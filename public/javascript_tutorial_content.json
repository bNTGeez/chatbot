{
    "Chapter 1: Getting Started with JavaScript 1": "Why should you learn JavaScript? 2\nSetting up your environment 3\nIntegrated Development Environment 3\nWeb browser 4\nExtra tools 4\nOnline editor 4\nHow does the browser understand JavaScript? 4\nUsing the browser console 5\nPractice exercise 1.1 7\nAdding JavaScript to a web page 8\nDirectly in HTML 8\nPractice exercise 1.2 9\nLinking an external file to our web page 9\nPractice exercise 1.3 10\nWriting JavaScript code 11\nFormatting code 11\nIndentations and whitespace 11\nSemicolons 12\nCode comments 13\nPractice exercise 1.4 13\nPrompt 14\nRandom numbers 14\nChapter project 15\nCreating an HTML file and a linked JavaScript file 15\nSelf-check quiz 16\nSummary 16\n[ v ]\nTable of Contents",
    "Chapter 2: JavaScript Essentials 17": "Variables 18\nDeclaring variables 18\nlet, var, and const 19\nNaming variables 20\nPrimitive data types 20\nString 21\nEscape characters 22\nNumber 23\nBigInt 24\nBoolean 25\nSymbol 25\nUndefined 26\nnull 26\nAnalyzing and modifying data types 27\nWorking out the type of a variable 28\nConverting data types 29\nPractice exercise 2.1 32\nOperators 32\nArithmetic operators 32\nAddition 32\nSubtraction 33\nMultiplication 33\nDivision 34\nExponentiation 34\nModulus 35\nUnary operators: increment and decrement 36\nCombining the operators 37\nPractice exercise 2.3 38\nAssignment operators 38\nPractice exercise 2.4 39\nComparison operators 40\nEqual 40\nNot equal 40\nGreater than and smaller than 41\nLogical operators 42\nAnd 42\nOr 43\nNot 43\nChapter project 43\nMiles-to-kilometers converter 43\nBMI calculator 44\nSelf-check quiz 44\nSummary 45\n[ vi ]\nTable of Contents",
    "Chapter 3: JavaScript Multiple Values 47": "Arrays and their properties 48\nCreating arrays 48\nAccessing elements 50\nOverwriting elements 50\nBuilt-in length property 51\nPractice exercise 3.1 53\nArray methods 53\nAdding and replacing elements 53\nDeleting elements 55\nFinding elements 56\nSorting 58\nReversing 58\nPractice exercise 3.2 59\nMultidimensional arrays 59\nPractice exercise 3.3 60\nObjects in JavaScript 61\nUpdating objects 62\nPractice exercise 3.4 63\nWorking with objects and arrays 64\nObjects in objects 64\nArrays in objects 65\nObjects in arrays 66\nObjects in arrays in objects 66\nPractice exercise 3.5 67\nChapter projects 68\nManipulating an array 68\nCompany product catalog 68\nSelf-check quiz 69\nSummary 69",
    "Chapter 4: Logic Statements 71": "if and if else statements 72\nPractice exercise 4.1 73\nelse if statements 74\nPractice exercise 4.2 75\nConditional ternary operators 76\nPractice exercise 4.3 76\nswitch statements 77\nThe default case 79\nPractice exercise 4.4 80\n[ vii ]\nTable of Contents\nCombining cases 81\nPractice exercise 4.5 82\nChapter projects 82\nEvaluating a number game 82\nFriend checker game 83\nRock Paper Scissors game 83\nSelf-check quiz 83\nSummary 86",
    "Chapter 5: Loops 87": "while loops 88\nPractice exercise 5.1 90\ndo while loops 91\nPractice exercise 5.2 92\nfor loops 92\nPractice exercise 5.3 95\nNested loops 95\nPractice exercise 5.4 97\nLoops and arrays 98\nPractice exercise 5.5 100\nfor of loop 101\nPractice exercise 5.6 102\nLoops and objects 102\nfor in loop 103\nPractice exercise 5.7 104\nLooping over objects by converting to an array 104\nbreak and continue 107\nbreak 108\ncontinue 109\nPractice exercise 5.8 111\nbreak, continue, and nested loops 111\nbreak and continue and labeled blocks 113\nChapter project 114\nMath multiplication table 114\nSelf-check quiz 115\nSummary 115",
    "Chapter 6: Functions 117": "Basic functions 118\nInvoking functions 118\nWriting functions 118\n[ viii ]\nTable of Contents\nNaming functions 119\nPractice exercise 6.1 120\nPractice exercise 6.2 120\nParameters and arguments 120\nPractice exercise 6.3 122\nDefault or unsuitable parameters 122\nSpecial functions and operators 123\nArrow functions 124\nSpread operator 125\nRest parameter 127\nReturning function values 127\nPractice exercise 6.4 129\nReturning with arrow functions 129\nVariable scope in functions 130\nLocal variables in functions 130\nlet versus var variables 132\nconst scope 133\nGlobal variables 134\nImmediately invoked function expression 136\nPractice exercise 6.5 137\nRecursive functions 138\nPractice exercise 6.6 140\nNested functions 140\nPractice exercise 6.7 142\nAnonymous functions 142\nPractice exercise 6.8 143\nFunction callbacks 143\nChapter projects 145\nCreate a recursive function 145\nSet timeout order 145\nSelf-check quiz 146\nSummary 147",
    "Chapter 7: Classes 149": "Object-oriented programming 150\nClasses and objects 150\nClasses 152\nConstructors 152\nPractice exercise 7.1 154\nMethods 154\nPractice exercise 7.2 156\n[ ix ]\nTable of Contents\nProperties 156\nGetters and setters 157\nInheritance 159\nPrototypes 161\nPractice exercise 7.3 163\nChapter projects 163\nEmployee tracking app 163\nMenu items price calculator 163\nSelf-check quiz 164\nSummary 165",
    "Chapter 8: Built-In JavaScript Methods 167": "Introduction to built-in JavaScript methods 168\nGlobal methods 169\nDecoding and encoding URIs 169\ndecodeUri() and encodeUri() 170\ndecodeUriComponent() and encodeUriComponent() 171\nEncoding with escape() and unescape() 172\nPractice exercise 8.1 172\nParsing numbers 172\nMaking integers with parseInt() 172\nMaking floats with parseFloat() 174\nExecuting JavaScript with eval() 175\nArray methods 176\nPerforming a certain action for every item 176\nFiltering an array 177\nChecking a condition for all elements 178\nReplacing part of an array with another part of the array 178\nMapping the values of an array 179\nFinding the last occurrence in an array 179\nPractice exercise 8.2 180\nPractice exercise 8.3 181\nString methods 181\nCombining strings 181\nConverting a string to an array 182\nConverting an array to a string 182\nWorking with index and positions 183\nCreating substrings 185\nReplacing parts of the string 185\nUppercase and lowercase 186\nThe start and end of a string 187\n[ x ]\nTable of Contents\nPractice exercise 8.4 188\nPractice exercise 8.5 189\nNumber methods 190\nChecking if something is (not) a number 190\nChecking if something is finite 190\nChecking if something is an integer 191\nSpecifying a number of decimals 192\nSpecifying precision 192\nMath methods 192\nFinding the highest and lowest number 193\nSquare root and raising to the power of 193\nTurning decimals into integers 194\nExponent and logarithm 196\nPractice exercise 8.6 196\nDate methods 196\nCreating dates 197\nMethods to get and set the elements of a date 198\nParsing dates 200\nConverting a date to a string 200\nPractice exercise 8.7 201\nChapter projects 201\nWord scrambler 201\nCountdown timer 202\nSelf-check quiz 203\nSummary 204",
    "Chapter 9: The Document Object Model 205": "HTML crash course 206\nHTML elements 206\nHTML attributes 210\nThe BOM 211\nPractice exercise 9.1 214\nWindow history object 214\nWindow navigator object 215\nWindow location object 216\nPractice exercise 9.2 217\nThe DOM 217\nAdditional DOM properties 219\nSelecting page elements 220\nPractice exercise 9.3 221\n[ xi ]\nTable of Contents\nChapter project 222\nManipulating HTML elements with JavaScript 222\nSelf-check quiz 222\nSummary 223",
    "Chapter 10: Dynamic Element Manipulation Using the DOM 225": "Basic DOM traversing 226\nPractice exercise 10.1 228\nSelecting elements as objects 229\nChanging innerText 230\nChanging innerHTML 230\nAccessing elements in the DOM 230\nAccessing elements by ID 231\nPractice exercise 10.2 232\nAccessing elements by tag name 232\nPractice exercise 10.3 233\nAccessing elements by class name 234\nPractice exercise 10.4 234\nAccessing elements with a CSS selector 234\nUsing querySelector() 235\nUsing querySelectorAll() 236\nElement click handler 237\nThis and the DOM 238\nPractice exercise 10.7 239\nManipulating element style 240\nChanging the classes of an element 243\nAdding classes to elements 243\nRemoving classes from elements 244\nToggling classes 246\nManipulating attributes 247\nPractice exercise 10.8 249\nEvent listeners on elements 251\nPractice exercise 10.9 253\nCreating new elements 253\nPractice exercise 10.10 255\nChapter projects 256\nCollapsible accordion component 256\nInteractive voting system 258\nHangman game 259\nSelf-check quiz 262\nSummary 263\n[ xii ]\nTable of Contents",
    "Chapter 11: Interactive Content and Event Listeners 265": "Introducing interactive content 266\nSpecifying events 266\nSpecifying events with HTML 266\nSpecifying events with JavaScript 266\nPractice exercise 11.1 267\nSpecifying events with event listeners 267\nPractice exercise 11.2 268\nThe onload event handler 268\nPractice exercise 11.3 269\nMouse event handlers 270\nPractice exercise 11.4 272\nThe event target property 272\nPractice exercise 11.5 274\nDOM event flow 275\nPractice exercise 11.6 278\nonchange and onblur 280\nPractice exercise 11.7 281\nKey event handler 282\nPractice exercise 11.8 284\nDrag and drop elements 285\nPractice exercise 11.9 287\nForm submission 289\nPractice exercise 11.10 291\nAnimating elements 292\nPractice exercise 11.11 293\nChapter projects 294\nBuild your own analytics 294\nStar rating system 295\nMouse position tracker 296\nBox clicker speed test game 297\nSelf-check quiz 299\nSummary 299",
    "Chapter 12: Intermediate JavaScript 301": "Regular expressions 302\nSpecifying multiple options for words 303\nCharacter options 304\nGroups 307\n[ xiii ]\nTable of Contents\nPractical regex 309\nSearching and replacing strings 310\nEmail validation 312\nFunctions and the arguments object 314\nPractice exercise 12.3 315\nJavaScript hoisting 315\nUsing strict mode 316\nDebugging 317\nBreakpoints 318\nPractice exercise 12.4 320\nError handling 325\nPractice exercise 12.5 326\nUsing cookies 327\nPractice exercise 12.6 329\nLocal storage 330\nPractice exercise 12.7 332\nJSON 333\nPractice exercise 12.8 336\nParsing JSON 336\nPractice exercise 12.9 337\nPractice exercise 12.9 answers 337\nChapter projects 338\nEmail extractor 338\nForm validator 339\nSimple math quiz 341\nSelf-check quiz 342\nSummary 343",
    "Chapter 13: Concurrency 345": "Introducing concurrency 346\nCallbacks 346\nPractice exercise 13.1 349\nPromises 349\nPractice exercise 13.2 352\nasync and await 353\nPractice exercise 13.3 354\nEvent loop 355\nCall stack and callback queue 355\nChapter project 359\nPassword checker 359\nSelf-check quiz 360\nSummary 361\n[ xiv ]\nTable of Contents",
    "Chapter 14: HTML5, Canvas, and JavaScript 363": "Introducing HTML5 with JavaScript 364\nLocal file reader 365\nUploading files 365\nReading files 367\nPractice exercise 14.1 368\nGetting position data with GeoLocation 369\nHTML5 canvas 370\nPractice exercise 14.2 373\nDynamic canvas 373\nAdding lines and circles to the canvas 374\nPractice exercise 14.3 376\nAdding text to the canvas 377\nPractice exercise 14.4 378\nAdding and uploading images to the canvas 380\nPractice exercise 14.5 383\nAdding animations to the canvas 383\nPractice exercise 14.6 385\nDrawing on canvas with a mouse 386\nPractice exercise 14.7 389\nSaving dynamic images 390\nMedia on the page 392\nDigital accessibility in HTML 394\nChapter projects 395\nCreate a Matrix effect 395\nCountdown clock 397\nOnline paint app 399\nSelf-check quiz 401\nSummary 402",
    "Chapter 15: Next Steps 403": "Libraries and frameworks 404\nLibraries 405\njQuery 405\nD3 408\nUnderscore 409\nReact 410\nFrameworks 412\nVue.js 412\nAngular 414\nLearning the backend 415\nAPIs 416\n[ xv ]\nTable of Contents\nAJAX 417\nPractice exercise 15.1 418\nNode.js 418\nUsing the Express Node.js framework 419\nNext steps 420\nChapter projects 421\nWorking with JSON 421\nList-making project 421\nSelf-check quiz 422\nSummary 423\nAppendix \u2013 Practice Exercise, Project,\nand Self-Check Quiz Answers 425\nChapter 1, Getting Started with JavaScript 425\nPractice exercises 425\nProjects 426\nCreating an HTML file and a linked JavaScript file 426\nSelf-check quiz 427\nChapter 2, JavaScript Essentials 427\nPractice exercises 427\nProjects 428\nMiles-to-kilometers converter 428\nBMI calculator 428\nSelf-check quiz 429\nChapter 3, JavaScript Multiple Values 429\nPractice exercises 429\nProjects 431\nManipulating an array 431\nCompany product catalog 431\nSelf-check quiz 432\nChapter 4, Logic Statements 432\nPractice exercises 432\nProjects 434\nEvaluating a number game answers 434\nFriend checker game answers 435\nRock paper scissors game answers 435\nSelf-check quiz 436\nChapter 5, Loops 436\nPractice exercises 436\nProject 441\nMath multiplication table 441\n[ xvi ]\nTable of Contents\nSelf-check quiz 442\nChapter 6, Functions 442\nPractice exercises 442\nProjects 445\nCreate a recursive function 445\nSet timeout order 445\nSelf-check quiz 446\nChapter 7, Classes 446\nPractice exercises 446\nProjects 448\nEmployee tracking app 448\nMenu items price calculator 448\nSelf-check quiz 449\nChapter 8, Built-In JavaScript Methods 449\nPractice exercises 449\nProjects 452\nWord scrambler 452\nCountdown timer 452\nSelf-check quiz 453\nChapter 9, The Document Object Model 453\nPractice exercises 453\nProjects 454\nManipulating HTML elements with JavaScript 454\nSelf-check quiz 455\nChapter 10, Dynamic Element Manipulation Using the DOM 456\nPractice exercises 456\nProjects 461\nCollapsible accordion component 461\nInteractive voting system 461\nHangman game 462\nSelf-check quiz 464\nChapter 11, Interactive Content and Event Listeners 465\nPractice exercises 465\nProjects 473\nBuild your own analytics 473\nStar rater system 474\nMouse position tracker 475\nBox clicker speed test game 476\nSelf-check quiz 477\nChapter 12, Intermediate JavaScript 477\nPractice exercises 477\n[ xvii ]\nTable of Contents\nProjects 482\nEmail extractor 482\nForm validator 483\nSimple math quiz 484\nSelf-check quiz 485\nChapter 13, Concurrency 486\nPractice exercises 486\nProjects 487\nPassword checker 487\nSelf-check quiz 488\nChapter 14, HTML5, Canvas, and JavaScript 489\nPractice exercises 489\nProjects 496\nCreate a Matrix effect 496\nCountdown clock 497\nOnline paint app 499\nSelf-check quiz 500\nChapter 15, Next Steps 501\nPractice exercises 501\nProjects 501\nWorking with JSON 501\nList-making project 502\nSelf-check quiz 504\nOther Books You May Enjoy 507\nIndex 513\n[ xviii ]\nPreface\nJavaScript is an amazing multi-functional language that is used a lot for web\ndevelopment (among other things). Any interaction that happens on web pages is\nJavaScript in action. In fact, all modern browsers understand JavaScript\u2014and soon\nyou will understand it too.\nThis book deals with everything you need to know to create JavaScript applications\nand use JavaScript on web pages. By the time you finish this book, you'll be capable\nof creating interactive web pages, dynamic applications, and a lot more as you\nprogress on your professional JavaScript journey!\nWho this book is for\nTo get started with this book, you don't need any JavaScript experience. However,\nif you do have some coding experience, you're likely to go through the book and\nexercises with a bit more ease. Basic familiarity with HTML and CSS would be of\nbenefit. If you're a first-time programmer, we are honored to welcome you to the\nworld of programming in this book. It may seem difficult in the beginning, but we'll\nguide you right through it.\nWhat this book covers\nChapter 1, Getting Started with JavaScript, covers some fundamentals of the JavaScript\nlanguage that you'll have to know to understand the rest of the book.\nChapter 2, JavaScript Essentials, deals with essentials such as variables, data types, and\noperators.\nChapter 3, JavaScript Multiple Values, covers how to store multiple values in one\nvariable using arrays and objects.\n[ xix ]\nPreface\nChapter 4, Logic Statements, is where the real fun starts: we are going to use logic\nstatements to make decisions for us!\nChapter 5, Loops, accounts for situations when it is necessary to repeat a block of code,\nwhich is what we use loops for. We are using different types of loops, such as the for\nand the while loop.\nChapter 6, Functions, introduces a very useful block for repeating code snippets:\nfunctions! This enables us to invoke a specified code block at any time in our script\nto do something for us. This will help you to not repeat yourself, which is one of\nthe fundamental principles of writing clean code.\nChapter 7, Classes, continues with building blocks of JavaScript that help us to\nstructure our application better. We have already seen how to create objects, and\nwith classes we learn how to create a template for objects that we can reuse anytime\nwe need that particular type of object.\nChapter 8, Built-In JavaScript Methods, deals with some great built-in functionality.\nFunctions are something we can write ourselves, but we'll find ourselves using the\nbuilt-in JavaScript functions often whenever we need to do common tasks, such as\nchecking whether something is a number or not.\nChapter 9, The Document Object Model, dives into the browser object model and\ndocument object model (DOM). This is going to enrich the way we can use JavaScript\nby a lot. We'll learn what the DOM is, and how we can affect it with JavaScript and\nchange our websites by doing so.\nChapter 10, Dynamic Element Manipulation Using the DOM, demonstrates how to\nmanipulate the elements of the DOM dynamically, which will enable you to create\nmodern user experiences. We can change our website as a response to user behavior\nsuch as clicking on a button.\nChapter 11, Interactive Content and Event Listeners, takes our responses to the user to\nthe next level. For example, we are going to learn how to respond to events such as\nthe cursor leaving an input box and the mouse of the user moving.\nChapter 12, Intermediate JavaScript, deals with topics that you'll need to write\nintermediate JavaScript code, such as regular expressions, recursion, and debugging,\nto boost the performance of your code.\nChapter 13, Concurrency, introduces the topic of concurrency and asynchronous\nprogramming, which will allow our code to do multiple things at the same time and\nbe truly flexible.\n[ xx ]\nPreface\nChapter 14, HTML5, Canvas, and JavaScript, focuses on HTML5 and JavaScript. We'll\nhave seen a lot of both HTML and JavaScript in the previous chapters, but here we'll\nbe focusing on the HTML5-specific features, such as the canvas element.\nChapter 15, Next Steps, explores the next steps you could take after you've gotten\nall the fundamental features of JavaScript down and you are able to write nifty\nprograms using JavaScript. We'll take a look at some of the famous JavaScript\nlibraries and development frameworks, such as Angular, React, and Vue, and we'll\nhave a look at Node.js to see how the backend can be written in JavaScript.\nTo get the most out of this book\nPrevious coding experience will help, but is definitely not required. If you have a\ncomputer with a text editor (such as Notepad or TextEdit, not Word!) and a browser,\nyou can get started with this book. We encourage you to engage with the exercises\nand projects, and experiment continually while you go through the chapters, to\nensure you are comfortable with each concept before moving on.\nDownload the example code files\nThe code bundle for the book is also hosted on GitHub at https://github.com/\nPacktPublishing/JavaScript-from-Beginner-to-Professional. We also have other\ncode bundles from our rich catalog of books and videos available at https://github.\ncom/PacktPublishing/. Check them out!\nDownload the color images\nWe also provide a PDF file that has color images of the screenshots/diagrams\nused in this book. You can download it here: https://static.packt-cdn.com/\ndownloads/9781800562523_ColorImages.pdf.\nConventions used\nThere are a number of text conventions used throughout this book.\nCodeInText: Indicates code words in text, database table names, folder names,\nfilenames, file extensions, pathnames, dummy URLs, user input, and Twitter\nhandles. For example; \"We also need to let the browser know what kind of document\nwe're working on with the <!DOCTYPE> declaration.\"\n[ xxi ]\nPreface\nA block of code is set as follows:\n<html>\n<script type=\"text/javascript\">\nalert(\"Hi there!\");\n</script>\n</html>\nAny command-line input or output is written as follows:\nconsole.log(\"Hello world!\")\nBold: Indicates a new term, an important word, or words that you see on the screen,\nfor example, in menus or dialog boxes, also appear in the text like this. For example:\n\"If you right-click and select Inspect on macOS systems, you will see a screen appear,\nsimilar to the one in the following screenshot.\"\nWarnings or important notes appear like this.\nTips and tricks appear like this.\nGet in touch\nFeedback from our readers is always welcome.\nGeneral feedback: Email feedback@packtpub.com, and mention the book's title in the\nsubject of your message. If you have questions about any aspect of this book, please\nemail us at questions@packtpub.com.\nErrata: Although we have taken every care to ensure the accuracy of our content,\nmistakes do happen. If you have found a mistake in this book we would be grateful\nif you would report this to us. Please visit, http://www.packtpub.com/submit-errata,\nselecting your book, clicking on the Errata Submission Form link, and entering the\ndetails.\n[ xxii ]\nPreface\nPiracy: If you come across any illegal copies of our works in any form on the\nInternet, we would be grateful if you would provide us with the location address\nor website name. Please contact us at copyright@packtpub.com with a link to the\nmaterial.\nIf you are interested in becoming an author: If there is a topic that you have\nexpertise in and you are interested in either writing or contributing to a book, please\nvisit http://authors.packtpub.com.\nShare Your Thoughts\nOnce you've read JavaScript from Beginner to Professional, we'd love to hear your\nthoughts! Please click here to go straight to the Amazon review page for this\nbook and share your feedback.\nYour review is important to us and the tech community and will help us make sure\nwe're delivering excellent quality content.\n[ xxiii ]\n1\nGetting Started\nwith JavaScript\nIt appears you have decided to start learning JavaScript. Excellent choice! JavaScript\nis a programming language that can be used on both the server side and client side of\napplications. The server side of an application is the backend logic that usually runs\non computers in data centers and interacts with the database, while the client side is\nwhat runs on the device of the user, often the browser for JavaScript.\nIt is not unlikely that you have used functionality written in JavaScript. If you have\nused a web browser, such as Chrome, Firefox, Safari, or Edge, then you definitely\nhave. JavaScript is all over the web. If you enter a web page and it asks you to\naccept cookies and you click OK, the popup disappears. This is JavaScript in action.\nAnd if you want to navigate a website and a sub-menu opens up, that means more\nJavaScript. Often, when you filter products in a web shop, this involves JavaScript.\nAnd what about these chats that start talking to you after you have been on a\nwebsite for a certain number of seconds? Well, you guessed it\u2014JavaScript!\nPretty much any interaction we have with web pages is because of JavaScript; the\nbuttons you are clicking, birthday cards you are creating, and calculations you are\ndoing. Anything that requires more than a static web page needs JavaScript.\nIn this chapter, we will cover the following topics:\n\u2022 Why should you learn JavaScript?\n\u2022 Setting up your environment\n\u2022 How does the browser understand JavaScript?\n[ 1 ]\nGetting Started with JavaScript\n\u2022 Using the browser console\n\u2022 Adding JavaScript to a web page\n\u2022 Writing JavaScript code\nNote: exercise, project and self-check quiz answers can be found in\nthe Appendix.\nWhy should you learn JavaScript?\nThere are many reasons why you should want to learn JavaScript. JavaScript\noriginates from 1995, and is often considered the most widely used programming\nlanguage. This is because JavaScript is the language that web browsers support\nand understand. You have everything you need to interpret it already installed on\nyour computer if you have a web browser and text editor. There are better setups,\nhowever, and we will discuss these later in this chapter.\nIt is a great programming language for beginners, and most advanced software\ndevelopers will know at least some JavaScript because they will have run into it at\nsome point. JavaScript is a great choice for beginners for a number of reasons. The\nfirst reason is that you can start building really cool apps using JavaScript sooner\nthan you could imagine. By the time you get to Chapter 5, Loops, you will be able to\nwrite quite complex scripts that interact with users. And by the end of the book, you\nwill be able to write dynamic web pages to do all sorts of things.\nJavaScript can be used to write many different types of applications and scripts. It\ncan be used for programming for the web browser, but also the logic layer of code\nthat we cannot see (such as communication with the database) of an application\ncan be programmed in JavaScript, along with games, automation scripts, and a\nplethora of other purposes. JavaScript can also be used for different programming\nstyles, by which we mean ways to structure and write code. How you would go\nabout this depends on the purpose of your script. If you've never coded before, you\nmay not quite grasp these concepts, and it's not entirely necessary to at this stage,\nbut JavaScript can be used for (semi) object-oriented, functional, and procedural\nprogramming, which are just different programming paradigms.\nThere are a ton of libraries and frameworks you can use once you get the basics of\nJavaScript down. These libraries and frameworks will really enhance your software\nlife and make it a lot easier and possible to get more done in less time. Examples of\nthese great libraries and frameworks include React, Vue.js, jQuery, Angular, and\nNode.js. Don't worry about these for now; just see them as a bonus for later. We will\ncover some of them briefly at the very end of this book.\n[ 2 ]\nChapter 1\nFinally, we'll mention the JavaScript community. JavaScript is a very popular\nprogramming language, and many people are using it. As a beginner in particular,\nthere won't be a problem for which you cannot find a solution on the internet.\nThe community of JavaScript is huge. The popular Stack Overflow forum contains\nlots of help for all sorts of coding issues and has an enormous section on JavaScript.\nYou'll find yourself running into this web page a lot while googling problems and\ntips and tricks.\nIf JavaScript is your first programming language, you are new to the whole software\ncommunity and you are in for a treat. Software developers, no matter the language,\nlove to help one another. There are forums and tutorials online and you can find\nanswers to almost all your questions. As a beginner, it can be hard to understand\nall the answers though. Just hang in there, keep trying and learning, and you will\nunderstand it soon enough.\nSetting up your environment\nThere are many ways in which you can set up a JavaScript coding environment. For\nstarters, your computer probably already has all the minimal things you will need to\ncode JavaScript. We recommend you make your life a little bit easier and use an IDE.\nIntegrated Development Environment\nAn Integrated Development Environment (IDE) is a special application that is used\nto write, run, and debug code. You can just open it like you would any program. For\nexample, to write a text document, you need to open the program, select the right\nfile, and start to write. Coding is similar. You open the IDE and write the code. If\nyou want to execute the code, the IDE often has a special button for this. Pressing\nthis button will run the code from inside the IDE. For JavaScript, you might find\nyourself opening your browser manually in certain cases though.\nAn IDE does do more than that though; it usually has syntax highlighting. This\nmeans that certain elements in your code will have a certain color, and you can\neasily see when something is going wrong. Another great feature is the autosuggest\nfeature, where the editor helps you with the options you have at the place where you\nare coding. This is often called code completion. Many IDEs have special plugins\nso you can make working with other tools more intuitive and add features to it, for\nexample, a hot reload in the browser.\nThere are many IDEs out there and they differ in what they have to offer. We use\nVisual Studio Code throughout the book, but that's a personal preference. Other\npopular ones at the time of writing include Atom, Sublime Text, and WebStorm.\n[ 3 ]\nGetting Started with JavaScript\nThere are many IDEs and they keep on appearing, so chances are the most popular\none at the time you are reading is not on this list. There are many other options. You\ncan do a quick search on the web for JavaScript IDEs. There are a few things to pay\nattention to when selecting an IDE. Make sure that it supports syntax highlighting,\ndebugging, and code completion for JavaScript.\nWeb browser\nYou will also need a web browser. Most browsers are perfectly fine for this, but\nit's better not to use Internet Explorer, which doesn't support the latest JavaScript\nfeatures. Two good options would be Chrome and Firefox. They support the latest\nJavaScript features and helpful plugins are available.\nExtra tools\nThere are many extra things you can use while coding, for example, browser plugins\nthat will help you to debug or make things easier to look at. You don't really need\nany of them at this point, but keep an open mind whenever you come across a tool\nthat others are very excited about.\nOnline editor\nIt may be the case that you don't have access to a computer, perhaps just a tablet,\nor that you cannot install anything on your laptop. There are great online editors\nout there for these scenarios as well. We don't name any, since they are evolving\nrapidly and probably will be old by the time you are reading this. But if you do\na web search for online JavaScript IDE, you will find plenty of online options\nwhere you can just start coding JavaScript and hit a button to run it.\nHow does the browser understand\nJavaScript?\nJavaScript is an interpreted language, which means that the computer understands\nit while running it. Some languages get processed before running, this is called\ncompiling, but not JavaScript. The computer can just interpret JavaScript on the fly.\nThe \"engine\" that understands JavaScript will be called the interpreter here.\n[ 4 ]\nChapter 1\nA web page isn't just JavaScript. Web pages are written in three languages: HTML,\nCSS, and JavaScript.\nHTML determines what is on the page; the content of the page is in there. If there is\na paragraph on the page, the HTML of the page contains a paragraph. And if there\nis a heading, HTML was used to add a heading, and so forth. HTML consists of\nelements, also called tags. They specify what is on the page. Here is a little sample\nthat will create a web page with the text Hello world on it:\n<html>\n<body>\nHello world!\n</body>\n</html>\nIn Chapter 9, The Document Object Model, we have a little crash course in HTML, so\ndon't worry if you have never seen it.\nCSS is the layout of the web page. So for example, if the text color is blue, this is done\nby CSS. Font size, font family, and position on the page are all determined by CSS.\nJavaScript is the final piece in the puzzle, which defines what the web page can do\nand how it can interact with the user or the backend.\nWhen dealing with JavaScript, you will come across the term ECMAScript sooner\nor later. This is the specification or standardization for the JavaScript language.\nThe current standard is ECMAScript 6 (also referred to as ES6). Browsers use\nthis specification to support JavaScript (in addition to some other topics such as\nDocument Object Model (DOM), which we'll see later). JavaScript has many\nimplementations that might differ slightly, but ECMAScript can be considered the\nbasic specification that the JavaScript implementation will definitely include.\nUsing the browser console\nYou may have seen this already, or not, but web browsers have a built-in option\nto see the code that makes the web page you are on possible. If you hit F12 on a\nWindows computer while you are in the web browser, or you right-click and select\nInspect on macOS systems, you will see a screen appear, similar to the one in the\nfollowing screenshot.\n[ 5 ]\nGetting Started with JavaScript\nIt might work slightly differently on your browser on your machine, but right-\nclicking and selecting Inspect generally does the trick:\nFigure 1.1: Browser console on the Packt website\nThis screenshot contains multiple tabs at the top. We are now looking at the element\ntabs, which contain all the HTML and CSS (remember those?). If you click on the\nconsole tab, you will find at the bottom of the panel a place where you can insert\nsome code directly. You may see some warnings or error messages in this tab. This\nis not uncommon, and don't worry about it if the page is working.\nThe console is used by developers to log what is going on and do any debugging.\nDebugging is finding the problem when an application is not displaying the desired\nbehavior. The console gives some insights as to what is happening if you log\nsensible messages. This is actually the first command we are going to learn:\nconsole.log(\"Hello world!\");\nIf you click on this console tab, enter the first JavaScript code above, and then\nhit Enter, this will show you the output of your code therein. It will look like the\nfollowing screenshot:\n[ 6 ]\nChapter 1\nFigure 1.2: JavaScript in the browser console\nYou will be working with the console.log() statement a lot throughout the book in\nyour code to test your code snippets and see the results. There are also other console\nmethods, such as console.table(), that create a table when the inputted data can be\npresented as a table. Another console method is console.error(), which will log the\ninputted data, but with a styling that draws attention to the fact that it's an error.\nPractice exercise 1.1\nWorking with the console:\n1. Open the browser console, type 4 + 10, and press Enter. What do you see as\nthe response?\n2. Use the console.log() syntax, placing a value within the rounded brackets.\nTry entering your name with quotes around it (this is to indicate the fact that\nit's a text string\u2014we'll get to this in the next chapter).\n[ 7 ]\nGetting Started with JavaScript\nAdding JavaScript to a web page\nThere are two ways to link JavaScript to a web page. The first way is to type the\nJavaScript directly in the HTML between two <script> tags. In HTML, the first tag,\n<script>, is to declare that the following script will be executed. Then we have the\ncontent that should be inside this element. Next, we close the script with the same\ntag, but preceded by a forward slash, </script>. Or you can link a JavaScript file to\nthe HTML file using the script tag at the head of the HTML page.\nDirectly in HTML\nHere is an example of how to write a very simple web page that will give a pop-up\nbox saying Hi there!:\n<html>\n<script type=\"text/javascript\">\nalert(\"Hi there!\");\n</script>\n</html>\nIf you store this as a .html file, and open the file in your browser, you will get\nsomething like the following screenshot. We will be storing this one as Hi.html:\nFigure 1.3: JavaScript made this popup with the text \"Hi there!\" appear\nThe alert command will create a popup that provides a message. This message is\nspecified between the parentheses behind the alert.\nRight now, we have the content directly within our <html> tags. This is not a best\npractice. We will need to create two elements inside <html>\u2014<head> and <body>.\nIn the head element, we write metadata and we also use this part later to connect\nexternal files to our HTML file. In the body, we have the content of the web page.\nWe also need to let the browser know what kind of document we're working on\nwith the <!DOCTYPE> declaration. Since we're writing JavaScript inside an HTML file,\nwe need to use <!DOCTYPE html>. Here's an example:\n[ 8 ]\nChapter 1\n<!DOCTYPE html>\n<html>\n<head>\n<title>This goes in the tab of your browser</title>\n</head>\n<body>\nThe content of the webpage\n<script>\nconsole.log(\"Hi there!\");\n</script>\n</body>\n</html>\nThis example web page will display the following: The content of the webpage. If\nyou look in the browser console, you'll find a surprise! It has executed the JavaScript\nas well and logs Hi there! in the console.\nPractice exercise 1.2\nJavaScript in an HTML page:\n1. Open your code editor and create an HTML file.\n2. Within your HTML file, set up the HTML tags, doctype, HTML, head, and\nbody, and then proceed and add the script tags.\n3. Place some JavaScript code within the script tags. You can use console.\nlog(\"hello world!\").\nLinking an external file to our web page\nYou could also link an external file to the HTML file. This is considered a better\npractice, as it organizes code better and you can avoid very lengthy HTML pages\ndue to the JavaScript. In addition to these benefits, you can reuse the JavaScript on\nother web pages of your website without having to copy and paste. Say that you\nhave the same JavaScript on 10 pages and you need to make a change to the script.\nYou would only have to change one file if you did it in the way we are showing you\nin this example.\n[ 9 ]\nGetting Started with JavaScript\nFirst, we are going to create a separate JavaScript file. These files have the postfix .js.\nI'm going to call it ch1_alert.js. This will be the content of our file:\nalert(\"Saying hi from a different file!\");\nThen we are going to create a separate HTML file (using the postfix .html again).\nAnd we are going to give it this content:\n<html>\n<script type=\"text/javascript\" src=\"ch1_alert.js\"></script>\n</html>\nMake sure that you put the files in the same location, or that you specify the path to\nthe JavaScript file in your HTML. The names are case-sensitive and should match\nexactly.\nYou have two options. You can use a relative path and an absolute path. Let's cover\nthe latter first since that is the easiest to explain. Your computer has a root. For Linux\nand macOS, it is /, and for Windows, it is often C:/. The path to the file starting from\nthe root is the absolute path. This is the easiest to add because it will work on your\nmachine. But there is a catch: on your machine, if this website folder later gets moved\nto a server, the absolute path will no longer work.\nThe second, safer option is relative paths. You specify how to get there from the\nfile you are in at that time. So if it's in the same folder, you will only have to insert\nthe name. If it's in a folder called \"example\" that is inside the folder that your file is\nin, you will have to specify example/nameOfTheFile.js. And if it's a folder up, you\nwould have to specify ../nameOfTheFile.js.\nIf you open the HTML file, this is what you should get:\nFigure 1.4: Popup created by JavaScript in a different file\nPractice exercise 1.3\nLinking to a JS JavaScript file:\n[ 10 ]\nChapter 1\n1. Create a separate file called app with the extension .js.\n2. Within the .js file, add some JavaScript code.\n3. Link to the separate .js file within the HTML file you created in Practice\nexercise 1.2.\n4. Open the HTML file within your browser and check to see whether the\nJavaScript code ran properly.\nWriting JavaScript code\nSo, we now have lots of context, but how do you actually write JavaScript code?\nThere are some important things to keep in mind, such as how to format the code,\nusing the right indentation level, using semicolons, and adding comments. Let's\nstart with formatting code.\nFormatting code\nCode needs to be formatted well. If you have a long file with many lines of code\nand you didn't stick to a few basic formatting rules, it is going to be hard to\nunderstand what you've written. So, what are the basic formatting rules? The two\nmost important for now are indentations and semicolons. There are also naming\nconventions, but these will be addressed for every topic that is yet to come.\nIndentations and whitespace\nWhen you are writing code, often a line of code belongs to a certain code block (code\nbetween two curly brackets { like this }) or parent statement. If that is the case,\nyou give the code in that block one indentation to make sure that you can see easily\nwhat is part of the block and when a new block starts. You don't need to understand\nthe following code snippet, but it will demonstrate readability with and without\nindentations.\nWithout new lines:\nlet status = \"new\"; let scared = true; if (status === \"new\") { console.\nlog(\"Welcome to JavaScript!\"); if (scared) { console.log(\"Don't worry\nyou will be fine!\"); } else { console.log(\"You're brave! You are going\nto do great!\"); } } else { console.log(\"Welcome back, I knew you'd like\nit!\"); }\n[ 11 ]\nGetting Started with JavaScript\nWith new lines but without indentation:\nlet status = \"new\";\nlet scared = true;\nif (status === \"new\") {\nconsole.log(\"Welcome to JavaScript!\");\nif (scared) {\nconsole.log(\"Don't worry you will be fine!\");\n} else {\nconsole.log(\"You're brave! You are going to do great!\");\n}\n} else {\nconsole.log(\"Welcome back, I knew you'd like it!\");\n}\nWith new lines and indentation:\nlet status = \"new\";\nlet scared = true;\nif (status === \"new\") {\nconsole.log(\"Welcome to JavaScript!\");\nif (scared) {\nconsole.log(\"Don't worry you will be fine!\");\n} else {\nconsole.log(\"You're brave! You are going to do great!\");\n}\n} else {\nconsole.log(\"Welcome back, I knew you'd like it!\");\n}\nAs you can see, you can now easily see when the code blocks end. This is where\nthe if has a corresponding } at the same indentation level. In the example without\nindentations, you would have to count the brackets to determine when the if block\nwould end. Even though it is not necessary for working code, make sure to use\nindentation well. You will thank yourself later.\nSemicolons\nAfter every statement, you should insert a semicolon. JavaScript is very forgiving\nand will understand many situations in which you have forgotten one, but develop\nthe habit of adding one after every line of code early. When you declare a code block,\nsuch as an if statement or loop, you should not end with a semicolon. It is only for\nthe separate statements.\n[ 12 ]\nChapter 1\nCode comments\nWith comments, you can tell the interpreter to ignore some lines of the file. They\nwon't get executed if they are comments. It is often useful to be able to avoid\nexecuting a part of the file. This could be for the following reasons:\n1. You do not want to execute a piece of code while running the script, so you\ncomment it out so it gets ignored by the interpreter.\n2. Metadata. Adding some context to the code, such as the author, and a\ndescription of what the file covers.\n3. Adding comments to specific parts of the code to explain what is happening\nor why a certain choice has been made.\nThere are two ways to write comments. You can either write single-line comments or\nmulti-line comments. Here is an example:\n// I'm a single line comment\n// console.log(\"single line comment, not logged\");\n/* I'm a multi-line comment. Whatever is between the slash asterisk and\nthe asterisk slash will not get executed.\nconsole.log(\"I'm not logged, because I'm a comment\");\n*/\nIn the preceding code snippet, you see both commenting styles. The first one is\nsingle-line. This can also be an inline comment at the end of the line. Whatever comes\nafter the // on the line will get ignored. The second one is multiline; it is written by\nstarting with /* and ending with */.\nPractice exercise 1.4\nAdding comments:\n1. Add a new statement to your JavaScript code by setting a variable value.\nSince we will cover this in the next chapter, you can use the following line:\nlet a = 10;\n2. Add a comment at the end of the statement indicating that you set a value of\n10.\n3. Print the value using console.log(). Add a comment explaining what this\nwill do.\n[ 13 ]\nGetting Started with JavaScript\n4. At the end of your JavaScript code, use a multiple-line comment. In a real\nproduction script, you might use this space to add a brief outline of the\npurpose of the file.\nPrompt\nAnother thing we would like to show you here is also a command prompt. It works\nvery much like an alert, but instead, it takes input from the user. We will learn how\nto store variables very soon, and once you know that, you can store the result of this\nprompt function and do something with it. Go ahead and change the alert() to a\nprompt() in the Hi.html file, for example, like this:\nprompt(\"Hi! How are you?\");\nThen, go ahead and refresh the HTML. You will get a popup with an input box in\nwhich you can enter text, as follows:\nFigure 1.5: Page prompting for use input\nThe value you (or any other user) enter will be returned to the script, and can be\nused in your code! This is great for getting user input to shape the way your code\nworks.\nRandom numbers\nFor the purpose of fun exercises in the early chapters of this book, we would like\nyou to know how to generate a random number in JavaScript. It is absolutely fine\nif you don't really understand what is going on just yet; just know that this is the\ncommand to create a random number:\nMath.random();\n[ 14 ]\nChapter 1\nWe can do it in the console and see the result appear if we log it:\nconsole.log(Math.random());\nThis number will be a decimal between 0 and 1. If we want a number between 0 and\n100, we can multiply it by 100, like this:\nconsole.log(Math.random() * 100);\nDon't worry, we will cover mathematic operators in Chapter 2,\nJavaScript Essentials.\nIf we don't want to have a decimal result, we can use the Math.floor function on it,\nwhich is rounding it down to the nearest integer:\nconsole.log(Math.floor(Math.random() * 100));\nDon't worry about not getting this yet. This will be explained in more detail further\non in the book. In Chapter 8, Built-In JavaScript Methods, we will discuss built-in\nmethods in more detail. Until then, just trust us that this does generate a random\nnumber between 0 and 100.\nChapter project\nCreating an HTML file and a linked JavaScript\nfile\nCreate an HTML file and create a separate JavaScript file. Then, connect to the\nJavaScript file from the HTML file.\n1. In the JavaScript file, output your name into the console and add a multiple-\nline comment to your code.\n2. Try commenting out the console message in your JavaScript file so that\nnothing shows in the console.\n[ 15 ]\nGetting Started with JavaScript\nSelf-check quiz\n1. What is the HTML syntax to add an external JavaScript file?\n2. Can you run JavaScript in a file with a JS extension in your browser?\n3. How do you write a multiple-line comment in JavaScript?\n4. What is the best way to remove a line of code from running that you might\nwant to keep as you debug?\nSummary\nNicely done! You have made a start with JavaScript! In this chapter, we have\ndiscussed a lot of context, which you will need to know before starting to code\nJavaScript. We saw that we can use JavaScript for many purposes, and one of the\nmost popular use cases is the web. Browsers can work with JavaScript because they\nhave a special part, called an interpreter, that can process JavaScript. We saw that\nwe have multiple options for writing JavaScript on our computer. We will need an\nIDE, a program that we can use to write and run our code.\nAdding JavaScript to a web page can be done in several ways. We saw how to\ninclude it in the script element and how to add a separate JavaScript file to a page.\nWe ended this chapter with some important general notes on how to write well-\nstructured, readable, and easy-to-maintain code that is well documented with\ncomments. We also saw that we can write to the console with our console.log()\nmethod and ask for user input using prompt(). Lastly, we also saw that we can\ngenerate random numbers with the Math.random() function.\nNext, we'll look at JavaScript's basic data types and the operators that can be used\nto manipulate them!\n[ 16 ]\n2\nJavaScript Essentials\nIn this chapter, we will be dealing with some essential building blocks of JavaScript:\nvariables and operators. We will start with variables, what they are, and which\ndifferent variable data types exist. We need these basic building blocks to store and\nwork with variable values in our scripts, making them dynamic.\nOnce we've got the variables covered, we will be ready to deal with operators.\nArithmetic, assignment, and conditional and logical operators will be discussed at\nthis stage. We need operators to modify our variables or to tell us something about\nthese variables. This way we can do basic calculations based on factors such as user\ninput.\nAlong the way, we'll cover the following topics:\n\u2022 Variables\n\u2022 Primitive data types\n\u2022 Analyzing and modifying data types\n\u2022 Operators\nNote: exercise, project, and self-check quiz answers can be found in\nthe Appendix.\n[ 17 ]\nJavaScript Essentials\nVariables\nVariables are the first building block you will be introduced to when learning most\nlanguages. Variables are values in your code that can represent different values each\ntime the code runs. Here is an example of two variables in a script:\nfirstname = \"Maaike\";\nx = 2;\nAnd they can be assigned a new value while the code is running:\nfirstname = \"Edward\";\nx = 7;\nWithout variables, a piece of code would do the exact same thing every single time\nit was run. Even though that could still be helpful in some cases, it can be made\nmuch more powerful by working with variables to allow our code to do something\ndifferent every time we run it.\nDeclaring variables\nThe first time you create a variable, you declare it. And you need a special word for\nthat: let, var, or const. We'll discuss the use of these three arguments shortly. The\nsecond time you call a variable, you only use the name of the existing variable to\nassign it a new value:\nlet firstname = \"Maria\";\nfirstname = \"Jacky\";\nIn our examples, we will be assigning a value to our variables in the code. This is\ncalled \"hardcoded\" since the value of your variable is defined in your script instead\nof coming dynamically from some external input. This is something you won't\nbe doing that often in actual code, as more commonly the value comes from an\nexternal source, such as an input box on a website that a user filled out, a database,\nor some other code that calls your code. The use of variables coming from external\nsources instead of being hardcoded into a script is actually the reason that scripts\nare adaptable to new information, without having to rewrite the code.\nWe have just established how powerful the variable building block is in code. Right\nnow, we are going to hardcode variables into our scripts, and they therefore will not\nvary until a coder changes the program. However, we will soon learn how to make\nour variables take in values from outside sources.\n[ 18 ]\nChapter 2\nlet, var, and const\nA variable definition consists of three parts: a variable-defining keyword (let, var,\nor const), a name, and a value. Let's start with the difference between let, var, or\nconst. Here you can see some examples of variables using the different keywords:\nlet nr1 = 12;\nvar nr2 = 8;\nconst PI = 3.14159;\nlet and var are both used for variables that might have a new value assigned to\nthem somewhere in the program. The difference between let and var is complex.\nIt is related to scope.\nIf you understand the following sentences on scope, that is great,\nbut it is totally fine if you do not get it. You will understand it soon\nenough as you keep working your way through the book.\nvar has global scope and let has block scope. var's global scope means that you can\nuse the variables defined with var in the entire script. On the other hand, let's block\nscope means you can only use variables defined with let in the specific block of code\nin which they were defined. Remember, a block of code will always start with { and\nend with }, which is how you can recognize them.\nOn the other hand, const is used for variables that only get a value assigned once\u2014\nfor example, the value of pi, which will not change. If you try reassigning a value\ndeclared with const, you will get an error:\nconst someConstant = 3;\nsomeConstant = 4;\nThis will result in the following output:\nUncaught TypeError: Assignment to constant variable.\nWe will be using let in most of our examples\u2014for now, trust us that you should use\nlet in most cases.\n[ 19 ]\nJavaScript Essentials\nNaming variables\nWhen it comes to naming variables, there are some conventions in place:\n\u2022 Variables start with a lowercase letter, and they should be descriptive. If\nsomething holds an age, do not call it x, but age. This way, when you read\nyour script later, you can easily understand what you did by just reading\nyour code.\n\u2022 Variables cannot contain spaces, but they can use underscores. If you use a\nspace, JavaScript doesn't recognize it as a single variable.\nWe will be using camel case here. This means that when we want\nto use multiple words to describe a variable, we will start with a\nlowercase word, then use a capital for every new word after the\nfirst word\u2014for example: ageOfBuyer.\nWhatever the convention is in the place you are working, the key\nis consistency. If all naming is done in a similar format, the code\nwill look cleaner and more readable, which makes it a lot easier to\nmake a small change later.\nThe value of your variable can be anything. Let's start with the easiest thing variables\ncan be: primitives.\nPrimitive data types\nNow you know what variables are and why we need them in our code, it is time to\nlook at the different types of values we can store in variables. Variables get a value\nassigned. And these values can be of different types. JavaScript is a loosely typed\nlanguage. This means that JavaScript determines the type based on the value. The\ntype does not need to be named explicitly. For example, if you declared a value of 5,\nJavaScript will automatically define it as a number type.\nA distinction exists between primitive data types and other, more complex data\ntypes. In this chapter, we will cover the primitive type, which is a relatively simple\ndata structure. Let's say for now that they just contain a value and have a type.\nJavaScript has seven primitives: String, Number, BigInt, Boolean, Symbol, undefined,\nand null. We'll discuss each of them in more detail below.\n[ 20 ]\nChapter 2\nString\nA string is used to store a text value. It is a sequence of characters. There are different\nways to declare a string:\n\u2022 Double quotes\n\u2022 Single quotes\n\u2022 Backticks: special template strings in which you can use variables directly\nThe single and double quotes can both be used like so:\nlet singleString = 'Hi there!';\nlet doubleString = \"How are you?\";\nYou can use the option you prefer, unless you are working on code\nin which one of these options has already been chosen. Again,\nconsistency is key.\nThe main difference between single quotes and double quotes is that you can use\nsingle quotes as literal characters in double-quoted strings, and vice versa. If you\ndeclare a string with single quotes, the string will end as soon as a second quote is\ndetected, even if it's in the middle of a word. So for example, the following will result\nin an error, because the string will be ended at the second single quote within let's:\nlet funActivity = 'Let's learn JavaScript';\nLet will be recognized as a string, but after that, the bunch of characters that follow\ncannot be interpreted by JavaScript. However, if you declare the string using double\nquotes, it will not end the string as soon as it hits the single quote, because it is\nlooking for another double quote. Therefore, this alternative will work fine:\nlet funActivity = \"Let's learn JavaScript\";\nIn the same way with double quotes, the following would not work:\nlet question = \"Do you want to learn JavaScript? \"Yes!\"\";\n[ 21 ]\nJavaScript Essentials\nAgain, the compiler will not distinguish between double quotes used in different\ncontexts, and will output an error.\nIn a string using backticks, you can point to variables and the variable's value will be\nsubstituted into the line. You can see this in the following code snippet:\nlet language = \"JavaScript\";\nlet message = `Let's learn ${language}`;\nconsole.log(message);\nAs you can see, you will have to specify these variables with a rather funky\nsyntax\u2014don't be intimidated! Variables in these template strings are specified\nbetween ${nameOfVariable}. The reason that it's such an intense syntax is that they\nwant to avoid it being something you would normally use, which would make it\nunnecessarily difficult to do so. In our case, the console output would be as follows:\nLet's learn JavaScript\nAs you can see, the language variable gets replaced with its value: JavaScript.\nEscape characters\nSay we want to have double quotes, single quotes, and backticks in our string. We\nwould have a problem, as this cannot be done with just the ingredients we have now.\nThere is an elegant solution to this problem. There is a special character that can be\nused to tell JavaScript, \"do not take the next character as you normally would.\" This\nis the escape character, a backslash.\nIn this example, the backslash can be used to ensure your interpreter doesn't see the\nsingle or double quote marks and end either string too early:\nlet str = \"Hello, what's your name? Is it \\\"Mike\\\"?\";\nconsole.log(str);\nlet str2 = 'Hello, what\\'s your name? Is it \"Mike\"?';\nconsole.log(str2);\nThis logs the following to the console:\nHello, what's your name? Is it \"Mike\"?\nHello, what's your name? Is it \"Mike\"?\n[ 22 ]\nChapter 2\nAs you can see, both types of quote marks inside the strings have been logged\nwithout throwing an error. This is because the backslash before the quote character\ngives the quote character a different meaning. In this case, the meaning is that it\nshould be a literal character instead of an indicator to end the string.\nThe escape character has even more purposes. You can use it to create a line break\nwith \\n, or to include a backslash character in the text with \\\\:\nlet str3 = \"New \\nline.\";\nlet str4 = \"I'm containing a backslash: \\\\!\";\nconsole.log(str3);\nconsole.log(str4);\nThe output of these lines is as follows:\nNew\nline.\nI'm containing a backslash: \\!\nThere are some more options, but we will leave them for now. Let's get back to\nprimitive data types by looking at the number type.\nNumber\nThe number data type is used to represent, well, numbers. In many languages, there\nis a very clear difference between different types of numbers. The developers of\nJavaScript decided to go for one data type for all these numbers: number. To be more\nprecise, they decided to go for a 64-bit floating-point number. This means that it can\nstore rather large numbers and both signed and unsigned numbers, numbers with\ndecimals, and more.\nHowever, there are different kinds of numbers it can represent. First of all, integers,\nfor example: 4 or 89. But the number data type can also be used to represent\ndecimals, exponentials, octal, hexadecimal, and binary numbers. The following code\nsample should speak for itself:\nlet intNr = 1;\nlet decNr = 1.5;\nlet expNr = 1.4e15;\nlet octNr = 0o10; //decimal version would be 8\nlet hexNr = 0x3E8; //decimal version would be 1000\nlet binNr = 0b101; //decimal version would be 5\n[ 23 ]\nJavaScript Essentials\nYou don't need to worry about these last three if you're not familiar with them. These\nare just different ways to represent numbers that you may encounter in the broader\nfield of computer science. The takeaway here is that all the above numbers are of the\nnumber data type. So integers are numbers, like these ones:\nlet intNr2 = 3434;\nlet intNr3 = -111;\nAnd the floating points are numbers as well, like this one:\nlet decNr2 = 45.78;\nAnd binary numbers are of the number data type as well, for example, this one:\nlet binNr2 = 0b100; //decimal version would be 4\nWe have just seen the number data type, which is very commonly used. But in some\nspecial cases, you will need an even bigger number.\nBigInt\nThe limits of the number data type are between 253-1 and -(253-1). In case you were to\nneed a bigger (or smaller) number, BigInt comes into play. A BigInt data type can be\nrecognized by the postfix n:\nlet bigNr = 90071992547409920n;\nLet's see what happens when we start to do some calculations between our\npreviously made integer Number, intNr, and BigInt, bigNr:\nlet result = bigNr + intNr;\nThe output will be as follows:\nUncaught TypeError: Cannot mix BigInt and other types, use explicit\nconversions\nUh-oh, a TypeError! It is very clear about what is going wrong. We cannot mix\nBigInt with the Number data type to perform operations. This is something to keep\nin mind for later when actually working with BigInt\u2014you can only operate on\nBigInt with other BigInts.\n[ 24 ]\nChapter 2\nBoolean\nThe Boolean data type can hold two values: true and false. There is nothing in\nbetween. This Boolean is used a lot in code, especially expressions that evaluate to\na Boolean:\nlet bool1 = false;\nlet bool2 = true;\nIn the preceding example, you can see the options we have for the Boolean data\ntype. It is used for situations in which you want to store a true or a false value\n(which can indicate on/off or yes/no). For example, whether an element is deleted:\nlet objectIsDeleted = false;\nOr, whether the light is on or off:\nlet lightIsOn = true;\nThese variables suggest respectively that the specified object is not deleted, and that\nthe specific light is on.\nSymbol\nSymbol is a brand new data type introduced in ES6 (we mentioned ECMA Script 6,\nor ES6, in Chapter 1, Getting Started with JavaScript). Symbol can be used when it is\nimportant that variables are not equal, even though their value and type are the same\n(in this case, they would both be of the symbol type). Compare the following string\ndeclarations to the symbol declarations, all of equal value:\nlet str1 = \"JavaScript is fun!\";\nlet str2 = \"JavaScript is fun!\";\nconsole.log(\"These two strings are the same:\", str1 === str2);\nlet sym1 = Symbol(\"JavaScript is fun!\");\nlet sym2 = Symbol(\"JavaScript is fun!\");\nconsole.log(\"These two Symbols are the same:\", sym1 === sym2);\nAnd the output:\nThese two strings are the same: true\nThese two Symbols are the same: false\n[ 25 ]\nJavaScript Essentials\nIn the first half, JavaScript concludes that the strings are the same. They have the\nsame value, and the same type. However, in the second part, each symbol is unique.\nTherefore, although they contain the same string, they are not the same, and output\nfalse when compared. These symbol data types can be very handy as properties of\nobjects, which we will see in Chapter 3, JavaScript Multiple Values.\nUndefined\nJavaScript is a very special language. It has a special data type for a variable that has\nnot been assigned a value. And this data type is undefined:\nlet unassigned;\nconsole.log(unassigned);\nThe output here will be:\nUndefined\nWe can also purposefully assign an undefined value. It is important you know that\nit is possible, but it is even more important that you know that manually assigning\nundefined is a bad practice:\nlet terribleThingToDo = undefined;\nAlright, this can be done, but it is recommended to not do this. This is for a number\nof reasons\u2014for example, checking whether two variables are the same. If one\nvariable is undefined, and your own variable is manually set to undefined, they will\nbe considered equal. This is an issue because if you are checking for equality, you\nwould want to know whether two values are actually equal, not just that they are\nboth undefined. This way, someone's pet and their last name might be considered\nequal, whereas they are actually both just empty values.\nnull\nIn the last example, we saw an issue that can be solved with a final primitive type,\nnull. null is a special value for saying that a variable is empty or has an unknown\nvalue. This is case sensitive. You should use lowercase for null:\nlet empty = null;\n[ 26 ]\nChapter 2\nTo solve the issue we encountered with setting a variable as undefined, note that if\nyou set it to null, you will not have the same problem. This is one of the reasons it is\nbetter to assign null to a variable when you want to say it is empty and unknown at\nfirst:\nlet terribleThingToDo = undefined;\nlet lastName;\nconsole.log(\"Same undefined:\", lastName === terribleThingToDo);\nlet betterOption = null;\nconsole.log(\"Same null:\", lastName === betterOption);\nThis outputs the following:\nSame undefined: true\nSame null: false\nThis shows that an automatically undefined variable, lastName, and a deliberately\nundefined variable, terribleThingToDo, are considered equal, which is problematic.\nOn the other hand, lastName and betterOption, which was explicitly declared with a\nvalue of null, are not equal.\nAnalyzing and modifying data types\nWe have seen the primitive data types. There are some built-in JavaScript methods\nthat will help us deal with common problems related to primitives. Built-in methods\nare pieces of logic that can be used without having to write JavaScript logic yourself.\nWe've seen one built-in method already: console.log().\nThere are many of these built-in methods, and the ones you will be meeting in this\nchapter are just the first few you will encounter.\n[ 27 ]\nJavaScript Essentials\nWorking out the type of a variable\nEspecially with null and undefined, it can be hard to determine what kind of data\ntype you are dealing with. Let's have a look at typeof. This returns the type of the\nvariable. You can check the type of a variable by entering typeof, then either a space\nfollowed by the variable in question, or the variable in question in brackets:\ntestVariable = 1;\nvariableTypeTest1 = typeof testVariable;\nvariableTypeTest2 = typeof(testVariable);\nconsole.log(variableTypeTest1);\nconsole.log(variableTypeTest2);\nAs you might assume, both methods will output number. Brackets aren't required\nbecause technically, typeof is an operator, not a method, unlike console.log. But,\nsometimes you may find that using brackets makes your code easier to read. Here\nyou can see it in action:\nlet str = \"Hello\";\nlet nr = 7;\nlet bigNr = 12345678901234n;\nlet bool = true;\nlet sym = Symbol(\"unique\");\nlet undef = undefined;\nlet unknown = null;\nconsole.log(\"str\", typeof str);\nconsole.log(\"nr\", typeof nr);\nconsole.log(\"bigNr\", typeof bigNr);\nconsole.log(\"bool\", typeof bool);\nconsole.log(\"sym\", typeof sym);\nconsole.log(\"undef\", typeof undef);\nconsole.log(\"unknown\", typeof unknown);\nHere, in the same console.log() print command, we are printing the name of each\nvariable (as a string, declared with double quotes), then its type (using typeof). This\nwill produce the following output:\nstr string\nnr number\nbigNr bigint\nbool boolean\n[ 28 ]\nChapter 2\nsym symbol\nundef undefined\nunknown object\nThere is an odd one out, and that is the null type. In the output you can see that\ntypeof null returns object, while in fact, null truly is a primitive and not an object.\nThis is a bug that has been there since forever and now cannot be removed due to\nbackward compatibility problems. Don't worry about this bug, as it won't affect our\nprograms\u2014just be aware of it, since it will go nowhere anytime soon, and it has the\npotential to break applications.\nConverting data types\nThe variables in JavaScript can change types. Sometimes JavaScript does this\nautomatically. What do you think the result of running the following code snippet\nwill be?\nlet nr1 = 2;\nlet nr2 = \"2\";\nconsole.log(nr1 * nr2);\nWe try to multiply a variable of type Number with a variable of type String.\nJavaScript does not just throw an error (as many languages would), but first tries to\nconvert the string value to a number. If that can be done, it can execute without any\nproblem as if two numbers were declared. In this case, console.log() will write 4 to\nthe console.\nBut this is dangerous! Guess what this code snippet does:\nlet nr1 = 2;\nlet nr2 = \"2\";\nconsole.log(nr1 + nr2);\nThis one will log 22. The plus sign can be used to concatenate strings. Therefore,\ninstead of converting a string to a number, it is converting a number to a string in\nthis example, and clubbing the two strings together\u2014\"2\" and \"2\" make \"22\". Luckily,\nwe do not need to rely on JavaScript's behavior when converting data types. There\nare built-in functions we can use to convert the data type of our variable.\nThere are three conversion methods: String(), Number(), and Boolean(). The first\none converts a variable to type String. It pretty much takes any value, including\nundefined and null, and puts quotes around it.\n[ 29 ]\nJavaScript Essentials\nThe second one tries to convert a variable to a number. If that cannot be done\nlogically, it will change the value into NaN (not a number). Boolean() converts a\nvariable to a Boolean. This will be true for everything except for null, undefined,\n0 (number), an empty string, and NaN. Let's see them in action:\nlet nrToStr = 6;\nnrToStr = String(nrToStr);\nconsole.log(nrToStr, typeof nrToStr);\nlet strToNr = \"12\";\nstrToNr = Number(strToNr);\nconsole.log(strToNr, typeof strToNr);\nlet strToBool = \"any string will return true\";\nstrToBool = Boolean(strToBool);\nconsole.log(strToBool, typeof strToBool);\nThis will log the following:\n6 string\n12 number\ntrue boolean\nThis might seem pretty straightforward, but not all of the options are equally\nobvious. These, for example, are not what you might think:\nlet nullToNr = null;\nnullToNr = Number(nullToNr);\nconsole.log(\"null\", nullToNr, typeof nullToNr);\nlet strToNr = \"\";\nstrToNr = Number(strToNr);\nconsole.log(\"empty string\", strToNr, typeof strToNr);\nThe preceding code snippet will log the following to the console:\nnull 0 number\nempty string 0 number\nAs you can see, an empty string and null will both result in the number 0. This is\na choice that the makers of JavaScript made, which you will have to know\u2014it can\ncome in handy at times when you want to convert a string to 0 when it is empty\nor null.\n[ 30 ]\nChapter 2\nNext, enter the following snippet:\nlet strToNr2 = \"hello\";\nstrToNr2 = Number(strToNr2);\nconsole.log(strToNr2, typeof strToNr2);\nThe result that will be logged to the console is:\nNaN number\nHere, we can see that anything that can't be interpreted as a number by simply\nremoving the quotes will evaluate as NaN (not a number).\nLet's continue with the following code:\nlet strToBool2 = \"false\";\nstrToBool2 = Boolean(strToBool2);\nconsole.log(strToBool2, typeof strToBool2);\nlet strToBool = \"\";\nstrToBool = Boolean(strToBool);\nconsole.log(strToBool, typeof strToBool);\nFinally, this one will log the following:\ntrue boolean\nfalse boolean\nThis output shows that any string will return true when converted to a Boolean,\neven the string \"false\"! Only an empty string, null, and undefined will lead to a\nBoolean value of false.\nLet's tease your brain a little bit more. What do you think this one will log?\nlet nr1 = 2;\nlet nr2 = \"2\";\nconsole.log(nr1 + Number(nr2));\nThis one logs 4! The string gets converted to a number before it executes the\nplus operation, and therefore it is a mathematical operation and not a string\nconcatenation. In the next sections of this chapter, we will discuss operators in\nmore depth.\n[ 31 ]\nJavaScript Essentials\nPractice exercise 2.1\nWhat are the types of these variables listed below? Verify this with typeof and\noutput the result to the console:\nlet str1 = 'Laurence';\nlet str2 = \"Svekis\";\nlet val1 = undefined;\nlet val2 = null;\nlet myNum = 1000;\nOperators\nAfter seeing quite a few data types and some ways to convert them, it is time for the\nnext major building block: operators. These come in handy whenever we want to\nwork with the variables, modify them, perform calculations on them, and compare\nthem. They are called operators because we use them to operate on our variables.\nArithmetic operators\nArithmetic operators can be used to perform operations with numbers. Most of these\noperations will feel very natural to you because they are the basic mathematics you\nwill have come across earlier in life already.\nAddition\nAddition in JavaScript is very simple, we have seen it already. We use + for this\noperation:\nlet nr1 = 12;\nlet nr2 = 14;\nlet result1 = nr1 + nr2;\nHowever, this operator can also come in very handy for concatenating strings. Note\nthe added space after \"Hello\" to ensure the end result contains space characters:\nlet str1 = \"Hello \";\nlet str2 = \"addition\";\nlet result2 = str1 + str2;\n[ 32 ]\nChapter 2\nThe output of printing result1 and result2 will be as follows:\n26\nHello addition\nAs you can see, adding numbers and strings lead to different results. If we add two\ndifferent strings, it will concatenate them into a single string.\nPractice exercise 2.2\nCreate a variable for your name, another one for your age, and another one for\nwhether you can code JavaScript or not.\nLog to the console the following sentence, where name, age and true/false are\nvariables:\nHello, my name is Maaike, I am 29 years old and I can code JavaScript:\ntrue.\nSubtraction\nSubtraction works as we would expect it as well. We use - for this operation. What\ndo you think gets stored in the variable in this second example?\nlet nr1 = 20;\nlet nr2 = 4;\nlet str1 = \"Hi\";\nlet nr3 = 3;\nlet result1 = nr1 - nr2;\nlet result2 = str1 - nr3;\nconsole.log(result1, result2);\nThe output is as follows:\n16 NaN\nThe first result is 16. And the second result is more interesting. It gives NaN, not an\nerror, but just simply the conclusion that a word and a number subtracted is not a\nnumber. Thanks for not crashing, JavaScript!\nMultiplication\nWe can multiply two numeric values with the * character. Unlike some other\nlanguages, we cannot successfully multiply a number and a string in JavaScript.\n[ 33 ]\nJavaScript Essentials\nThe result of multiplying a numeric and a non-numeric value is NaN:\nlet nr1 = 15;\nlet nr2 = 10;\nlet str1 = \"Hi\";\nlet nr3 = 3;\nlet result1 = nr1 * nr2;\nlet result2 = str1 * nr3;\nconsole.log(result1, result2);\nOutput:\n150 NaN\nDivision\nAnother straightforward operator is division. We can divide two numbers with the /\ncharacter:\nlet nr1 = 30;\nlet nr2 = 5;\nlet result1 = nr1 / nr2;\nconsole.log(result1);\nThe output is as follows:\n6\nExponentiation\nExponentiation means raising a certain base number to the power of the exponent,\nfor example, xy. This can be read as x to the power of y. It means that we will\nmultiply x by itself y number of times. Here is an example of how to do this in\nJavaScript\u2014we use ** for this operator:\nlet nr1 = 2;\nlet nr2 = 3;\nlet result1 = nr1 ** nr2;\nconsole.log(result1);\n[ 34 ]\nChapter 2\nWe get the following output:\n8\nThe result of this operation is 2 to the power of 3 (2 * 2 * 2), which is 8. We're going\nto avoid going into a mathematics lesson here, but we can also find the root of a\nnumber by using fractional exponents: for example, the square root of a value is\nthe same as raising it to the power of 0.5.\nModulus\nThis is one that often requires a little explanation. Modulus is the operation in which\nyou determine how much is left after dividing a number by another number in its\nentirety. The amount of times the number can fit in the other number does not matter\nhere. The outcome will be the remainder, or what is left over. The character we use\nfor this operation is the % character. Here are some examples:\nlet nr1 = 10;\nlet nr2 = 3;\nlet result1 = nr1 % nr2;\nconsole.log(`${nr1} % ${nr2} = ${result1}`);\nlet nr3 = 8;\nlet nr4 = 2;\nlet result2 = nr3 % nr4;\nconsole.log(`${nr3} % ${nr4} = ${result2}`);\nlet nr5 = 15;\nlet nr6 = 4;\nlet result3 = nr5 % nr6;\nconsole.log(`${nr5} % ${nr6} = ${result3}`);\nAnd the output:\n10 % 3 = 1\n8 % 2 = 0\n15 % 4 = 3\nThe first one is 10 % 3, where 3 fits 3 times into 10, and then 1 is left. The second one\nis 8 % 2. This results in 0, because 2 can fit 4 times into 8 without having anything\nleft. The last one is 15 % 4, where 4 fits 3 times into 15. And then we have 3 left as\na result.\n[ 35 ]\nJavaScript Essentials\nThis is something that would happen in your head automatically if I asked you\nto add 125 minutes to the current time. You will probably do two things: integer\ndivision to determine how many whole hours fit into 125 minutes, and then 125\nmodulo 60 (in JavaScript terms, 125 % 60) to conclude that you'll have to add 5 more\nminutes to the current time. Say our current time is 09:59, you will probably start by\nadding 2 hours, and get to 11:59, and then add 5 minutes, and then you will perform\nanother modulus operation with 59 and 5, adding 1 more hour to the total and\nhaving 4 minutes left: 12:04.\nUnary operators: increment and decrement\nThe last two operators of our arithmetic operator section are probably new to\nyou, if you are new to programming (or only familiar with another programming\nlanguage). These are the increment and decrement operators. A term we use here\nis operand. Operands are subject to the operator. So, if we say x + y, x and y are\noperands.\nWe only need one operand for these operators, and therefore we also call them\nunary operators. If we see x++, we can read this as x = x + 1. The same is true for the\ndecrement operators: x-- can be read as x = x \u2013 1:\nlet nr1 = 4;\nnr1++;\nconsole.log(nr1);\nlet nr2 = 4;\nnr2--;\nconsole.log(nr2);\nThe output is as follows:\n5\n3\nPrefix and postfix operators\nWe can have the increment operator after the operand (x++), in which case we call\nthis the postfix unary operator. We can also have it before (++x), which is the prefix\nunary operator. This does something different though\u2014the next few lines might be\ncomplicated, so do not worry if you need to read it a few times and have a good look\nat the examples here.\n[ 36 ]\nChapter 2\nThe postfix gets executed after sending the variable through, and then after that, the\noperation gets executed. In the following example, nr gets incremented by 1 after\nlogging. So the first logging statement is still logging the old value because it has not\nbeen updated yet. It has been updated for the second log statement:\nlet nr = 2;\nconsole.log(nr++);\nconsole.log(nr);\nThe output is as follows:\n2\n3\nThe prefix gets executed before sending the variable through, and often this is the one\nyou will need. Have a look at the following example:\nlet nr = 2;\nconsole.log(++nr);\nWe get the following output:\n3\nAlright, if you can figure out what the next code snippets logs to the console, you\nshould really have a handle on it:\nlet nr1 = 4;\nlet nr2 = 5;\nlet nr3 = 2;\nconsole.log(nr1++ + ++nr2 * nr3++);\nIt outputs 16. It will do the multiplication first, according to the basic mathematical\norder of operations. For multiplying, it uses 6 (prefix, so 5 is incremented before\nmultiplying) and 2 (postfix, so 2 is only incremented after execution, meaning it\nwon't affect our current calculation). This comes down to 12. And then nr1 is a\npostfix operator, so this one will execute after the addition. Therefore, it will add 12\nto 4 and become 16.\nCombining the operators\nThese operators can be combined, and it works just as it does in math. They get\nexecuted in a certain order, and not necessarily from left to right. This is due to a\nphenomenon called operator precedence.\n[ 37 ]\nJavaScript Essentials\nThere is one more thing to take into account here, and that is grouping. You can\ngroup using ( and ). The operations between the parentheses have the highest\nprecedence. After that, the order of the operations takes place based on the type of\noperation (highest precedence first) and if they are of equal precedence, they take\nplace from left to right:\nName Symbol Example\nGrouping (...) (x + y)\nExponentiation ** x ** y\nPrefix increment and decrement --, ++ --x, ++y\nMultiplication, division, modulus *, /, % x * y, x / y, x % y\nAddition and subtraction +, - x + y, x - y\nPractice exercise 2.3\nWrite some code to calculate the hypotenuse of a triangle using the Pythagorean\ntheorem when given the values of the other two sides. The theorem specifies that the\nrelation between the sides of a right-angled triangle is a2 + b2 = c2.\nThe Pythagorean theorem only applies to right-angled triangles.\nThe sides connected to the 90-degree angle are called the adjacent\nand opposite sides, represented by a and b in the formula. The\nlongest side, not connected to the 90-degree angle, is called the\nhypotenuse, represented by c.\nYou can use prompt() to get the value for a and b. Write code to get the value from\nthe user for a and b. Then square the values of both a and b before adding them\ntogether and finding the square root. Print your answer to the console.\nAssignment operators\nWe have seen one assignment operator already when we were assigning values to\nvariables. The character for this basic assignment operation is =. There are a few\nothers available. Every binary arithmetic operator has a corresponding assignment\noperator to write a shorter piece of code. For example, x += 5 means x = x + 5, and\nx **= 3 means x = x ** 3 (x to the power of 3).\n[ 38 ]\nChapter 2\nIn this first example we declare a variable x, and set it to 2 as an initial value:\nlet x = 2;\nx += 2;\nAfter this assignment operation, the value of x becomes 4, because x += 2 is the same\nas x = x + 2:\nIn the next assignment operation, we will subtract 2:\nx -= 2;\nSo, after this operation the value of x becomes 2 again (x = x \u2013 2). In the next\noperation, we are going to multiply the value by 6:\nx *= 6;\nWhen this line has been executed, the value of x is no longer 2, but becomes\n12 (x = x * 6). In the next line, we are going to use an assignment operator to perform\na division:\nx /= 3;\nAfter dividing x by 3, the new value becomes 4. The next assignment operator we\nwill use is exponentiation:\nx **= 2;\nThe value of x becomes 16, because the old value was 4, and 4 to the power of 2\nequals 16 (4 * 4). The last assignment operator we will talk about is the modulus\nassignment operator:\nx %= 3;\nAfter this assignment operation, the value of x is 1, because 3 can fit 5 times into 16\nand then leaves 1.\nPractice exercise 2.4\nCreate variables for three numbers: a, b, and c. Update these variables with the\nfollowing actions using the assignment operators:\n\u2022 Add b to a\n\u2022 Divide a by c\n[ 39 ]\nJavaScript Essentials\n\u2022 Replace the value of c with the modulus of c and b\n\u2022 Print all three numbers to the console\nComparison operators\nComparison operators are different from the operators we have seen so far. The\noutcome of the comparison operators is always a Boolean, true, or false.\nEqual\nThere are a few equality operators that determine whether two values are equal.\nThey come in two flavors: equal value only, or equal value and data type. The first\none returns true when the values are equal, even though the type is different, while\nthe second returns true only when the value and the type are the same:\nlet x = 5;\nlet y = \"5\";\nconsole.log(x == y);\nThe double equals operator, two equal signs, means that it will only check for equal\nvalue and not for data type. Both have the value 5, so it will log true to the console.\nThis type of equality is sometimes called loose equality.\nThe triple equals operator, written as three equal signs, means that it will evaluate\nboth the value and the data type to determine whether both sides are equal or not.\nThey both need to be equal in order for this statement to be true, but they are not\nand therefore the following statement outputs false:\nconsole.log(x === y);\nThis is sometimes also called strict equality. This triple equals operator is the one\nyou should most commonly be using when you need to check for equality, as only\nwith this one can you be sure that both variables are really equal.\nNot equal\nNot equal is very similar to equal, except it does the opposite\u2014it returns true when\ntwo variables are not equal, and false when they are equal. We use the exclamation\nmark for not equal:\nlet x = 5;\nlet y = \"5\";\nconsole.log(x != y);\n[ 40 ]\nChapter 2\nThis will log false to the console. If you are wondering what is going on here, take\na look again at the double and triple equals operators, because it is the same here.\nHowever, when there is only one equals sign in a not-equal operator, it is comparing\nloosely for non-equality. Therefore, it concludes that they are equal and therefore not\nequal should result in false. The one with two equals signs is checking for strict non-\nequality:\nconsole.log(x !== y);\nThis will conclude that since x and y have different data types, they are not the\nsame, and will log true to the console.\nGreater than and smaller than\nThe greater than operator returns true if the left-hand side is greater than the right-\nhand side of the operation. We use the > character for this. We also have a greater\nthan or equal to operator, >=, which returns true if the left-hand side is greater than\nor equal to the right-hand side.\nlet x = 5;\nlet y = 6;\nconsole.log(y > x);\nThis one will log true, because y is greater than x.\nconsole.log(x > y);\nSince x is not greater than y, this one will log false.\nconsole.log(y > y);\ny is not greater than y, so this one will log false.\nconsole.log(y >= y);\nThis last one is looking at whether y is greater than or equal to y, and since it is equal\nto itself, it will log true.\nIt might not surprise you that we also have smaller than (<) and smaller than or equal\nto operators (<=). Let's have a look at the smaller than operator, as it is very similar to\nthe previous ones.\nconsole.log(y < x);\n[ 41 ]\nJavaScript Essentials\nThis first one will be false, since y is not smaller than x.\nconsole.log(x < y);\nSo, this second one will log true, because x is smaller than y.\nconsole.log(y < y);\ny is not smaller than y, so this one will log false.\nconsole.log(y <= y);\nThis last one looks at whether y is smaller than or equal to y. It is equal to y, so it will\nlog true.\nLogical operators\nWhenever you want to check two conditions in one, or you need to negate a\ncondition, the logical operators come in handy. You can use and, or, and not.\nAnd\nThe first one we will have a look at is and. If you want to check whether x is greater\nthan y and y is greater than z, you would need to be able to combine two expressions.\nThis can be done with the && operator. It will only return true if both expressions are\ntrue:\nlet x = 1;\nlet y = 2;\nlet z = 3;\nWith these variables in mind, we are going to have a look at the logical operators:\nconsole.log(x < y && y < z);\nThis will log true, you can read it like this: if x is smaller than y and y is smaller\nthan z, it will log true. That is the case, so it will log true. The next example will log\nfalse:\nconsole.log(x > y && y < z);\nSince x is not greater than y, one part of the expression is not true, and therefore\nit will result in false.\n[ 42 ]\nChapter 2\nOr\nIf you want to get true if either one of the expressions is true, you use or. The\noperator for this is ||. These pipes are used to see if either one of these two is true,\nin which case the whole expression evaluates to true. Let's have a look at the or\noperator in action:\nconsole.log(x > y || y < z);\nThis will result in true, whereas it was false with &&. This is because only one of\nthe two sides needs to be true in order for the whole expression to evaluate to true.\nThis is the case because y is smaller than z.\nWhen both sides are false, it will log false, which is the case in the next example:\nconsole.log(x > y || y > z);\nNot\nIn some cases you will have to negate a Boolean. This will make it the opposite value.\nIt can be done with the exclamation mark, which reads as not:\nlet x = false;\nconsole.log(!x);\nThis will log true, since it will simply flip the value of the Boolean. You can also\nnegate an expression that evaluates to a Boolean, but you would have to make sure\nthat the expression gets evaluated first by grouping it.\nlet x = 1;\nlet y = 2;\nconsole.log(!(x < y));\nx is smaller than y, so the expression evaluates to true. But, it gets negated due to the\nexclamation mark and prints false to the console.\nChapter project\nMiles-to-kilometers converter\nCreate a variable that contains a value in miles, convert it to kilometers, and log the\nvalue in kilometers in the following format:\nThe distance of 130 kms is equal to 209.2142 miles\n[ 43 ]\nJavaScript Essentials\nFor reference, 1 mile equals 1.60934 kilometers.\nBMI calculator\nSet values for height in inches and weight in pounds, then convert the values to\ncentimeters and kilos, outputting the results to the console:\n\u2022 1 inch is equal to 2.54 cm\n\u2022 2.2046 pounds is equal to 1 kilo\nOutput the results. Then, calculate and log the BMI: this is equal to weight (in kilos)\ndivided by squared height (in meters). Output the results to the console.\nSelf-check quiz\n1. What data type is the following variable?\nconst c = \"5\";\n2. What data type is the following variable?\nconst c = 91;\n3. Which one is generally better, line 1 or line 2?\nlet empty1 = undefined; //line 1\nlet empty2 = null; //line 2\n4. What is the console output for the following?\nlet a = \"Hello\";\na = \"world\";\nconsole.log(a);\n5. What will be logged to the console?\nlet a = \"world\";\nlet b = `Hello ${a}!`;\nconsole.log(b);\n6. What is the value of a?\nlet a = \"Hello\";\na = prompt(\"world\");\nconsole.log(a);\n[ 44 ]\nChapter 2\n7. What is the value of b output to the console?\nlet a = 5;\nlet b = 70;\nlet c = \"5\";\nb++;\nconsole.log(b);\n8. What is the value of result?\nlet result = 3 + 4 * 2 / 8;\n9. What is the value of total and total2?\nlet firstNum = 5;\nlet secondNum = 10;\nfirstNum++;\nsecondNum--;\nlet total = ++firstNum + secondNum;\nconsole.log(total);\nlet total2 = 500 + 100 / 5 + total--;\nconsole.log(total2);\n10. What is logged to the console here?\nconst a = 5;\nconst b = 10;\nconsole.log(a > 0 && b > 0);\nconsole.log(a == 5 && b == 4);\nconsole.log(true ||false);\nconsole.log(a == 3 || b == 10);\nconsole.log(a == 3 || b == 7);\nSummary\nIn this chapter, we dealt with the first two programming building blocks: variables\nand operators. Variables are special fields that have a name and contain values. We\ndeclare a variable by using one of the special variable-defining words: let, var, or\nconst. Variables enable us to make our scripts dynamic, store values, access them\nlater, and change them later. We discussed some primitive data types, including\nstrings, numbers, Booleans, and Symbols, as well as more abstract types such as\nundefined and null. You learned how to determine the type of a variable using the\ntypeof word. And you saw how you can convert the data type by using the built-in\nJavaScript methods Number(), String(), and Boolean().\n[ 45 ]\nJavaScript Essentials\nThen we moved on and discussed operators. Operators enable us to work with our\nvariables. They can be used to perform calculations, compare variables, and more.\nThe operators we discussed included arithmetic operators, assignment operators,\ncomparison operators, and logical operators.\nAfter this chapter, you are ready to deal with more complex data types, such as\narrays and objects. We'll cover these in the next chapter.\n[ 46 ]\n3\nJavaScript Multiple Values\nThe basic data types have been dealt with in the previous chapter. Now it's time\nto look at a slightly more complicated topic: arrays and objects. In the previous\nchapter, you saw variables that held just a single value. To allow for more complex\nprogramming, objects and arrays can contain multiple values.\nYou can look at objects as a collection of properties and methods. Properties can\nbe thought of as variables. They can be simple data structures such as numbers\nand strings, but also other objects. Methods perform actions; they contain a certain\nnumber of lines of code that will be executed when the method gets called. We'll\nexplain methods in more detail later in this book and focus on properties for now.\nAn example of an object can be a real-life object, for example, a dog. It has properties,\nsuch as name, weight, color, and breed.\nWe will also discuss arrays. An array is a type of object, which allows you to store\nmultiple values. They are a bit like lists. So, you could have an array of items to buy\nat the grocery store, which might contain the following values: apples, eggs, and\nbread. This list would take the form of a single variable, holding multiple values.\nAlong the way, we will cover the following topics:\n\u2022 Arrays and their properties\n\u2022 Array methods\n\u2022 Multidimensional arrays\n\u2022 Objects in JavaScript\n\u2022 Working with objects and arrays\n[ 47 ]\nJavaScript Multiple Values\nLet's start with arrays.\nNote: exercise, project and self-check quiz answers can be found in\nthe Appendix.\nArrays and their properties\nArrays are lists of values. These values can be of all data types and one array can\neven contain different data types. It is often very useful to store multiple values\ninside one variable; for example, a list of students, groceries, or test scores. Once\nyou start writing scripts, you'll find yourself needing to write arrays very often; for\nexample, when you want to keep track of all the user input, or when you want to\nhave a list of options to present to the user.\nCreating arrays\nYou might be convinced by now that arrays are great, so let's see how we can make\nthem. There is actually a right way and a wrong way to do it. Here are both. Which\none do you think is the right one?\narr1 = new Array(\"purple\", \"green\", \"yellow\");\narr2 = [\"black\", \"orange\", \"pink\"];\nIf you guessed the second option, using square brackets, you are right. This is the\nbest and most readable way to create a new array. On the other hand, the first option\ncan do unexpected things. Look at both lines of code here. What do you think they\nwill do?\narr3 = new Array(10);\narr4 = [10];\nProbably, you sense that something is up here. They do not both create an array with\none value, 10. The second one, arr4, does. The first option creates an array with 10\nundefined values. If we log the values like this:\nconsole.log(arr3);\nconsole.log(arr4);\n[ 48 ]\nChapter 3\nHere is what it logs:\n[ <10 empty items> ]\n[ 10 ]\nThanks, JavaScript! That was very helpful. So, unless that is what you need to do,\nplease use the square brackets!\nAs I already mentioned, we can have mixed arrays and arrays can hold any type of\nvariable. The values of the array won't be converted to a single data type or anything\nlike that. JavaScript simply stores all the variables with their own data type and\nvalue in the array:\nlet arr = [\"hi there\", 5, true];\nconsole.log(typeof arr[0]);\nconsole.log(typeof arr[1]);\nconsole.log(typeof arr[2]);\nThis will output to the console:\nstring\nnumber\nboolean\nThe last array fun fact we will go over here is what happens if you define an array\nusing const. You can change the values of a constant array, but you cannot change\nthe array itself. Here is a piece of code to demonstrate:\nconst arr = [\"hi there\"];\narr[0] = \"new value\";\nconsole.log(arr[0]);\narr = [\"nope, now you are overwriting the array\"];\nThe new value for the first element of the array is going fine, but you cannot assign\na new value to the full array. Here is what it will output:\nnew value\nTypeError: Assignment to constant variable.\n[ 49 ]\nJavaScript Multiple Values\nAccessing elements\nThis beautiful array we just made would become much more powerful if we\ncould access its elements. We can do this by referencing the array's index. This is\nsomething we did not specify when we created the array, and we did not need to\neither. JavaScript assigns an index to every value of the array. The first value is\nassigned the position of 0, the second 1, the third 2, and so on. If we want to call a\nspecific value based on its position in the array, we can use the name of our array,\nadd square brackets to the end, and put the index we want to access between the\nsquare brackets, like this:\ncars = [\"Toyota\", \"Renault\", \"Volkswagen\"];\nconsole.log(cars[0]);\nThis log statement will write Toyota to the console because we called for the position\n0 of the array, which outputs the first value in the list.\nconsole.log(cars[1]);\nCalling index position 1 is giving us the second element in the array, which is\nRenault. This will be logged to the console.\nconsole.log(cars[2]);\nThe third element in our array has index 2, so this one will log Volkswagen. What do\nyou think will happen if we use a negative index or an index that is higher than the\nnumber of values we get?\nconsole.log(cars[3]);\nconsole.log(cars[-1]);\nWe didn't assign a value to the negative or non-existent index, so when we ask for\nit, the value is undefined. As such, the log output will be undefined. JavaScript does\nnot throw an error because of this.\nOverwriting elements\nThe elements in an array can be overwritten. This can be done by accessing a certain\nelement using the index and assigning a new value:\ncars[0] = \"Tesla\";\nconsole.log(cars[0]);\n[ 50 ]\nChapter 3\nThe output of this log is Tesla because it has overwritten the old value, Toyota. If we\noutput the whole array:\nconsole.log(cars);\nIt will output the following:\n[ 'Tesla', 'Renault', 'Volkswagen' ]\nWhat happens if you try to overwrite an element that does not exist?\ncars[3] = \"Kia\";\nOr even a negative index?\ncars[-1] = \"Fiat\";\nLet's see what happens when we try to write the values to the console:\nconsole.log(cars[3]);\nconsole.log(cars[-1]);\nAnd the output:\nKia\nFiat\nHa! They suddenly exist. How is that you may wonder? We will discuss this in the\nnext section. For now, just remember that this is not the right way to add values to\nthe array. We will discuss the right way when we explain arrays in the Array methods\nsection.\nBuilt-in length property\nArrays have a very useful built-in property: length. This will return the number of\nvalues that the array has:\ncolors = [\"black\", \"orange\", \"pink\"]\nbooleans = [true, false, false, true];\nemptyArray = [];\nconsole.log(\"Length of colors:\", colors.length);\nconsole.log(\"Length of booleans:\", booleans.length);\nconsole.log(\"Length of empty array:\", emptyArray.length);\n[ 51 ]\nJavaScript Multiple Values\nThe first console.log call returns 3, indicating that the colors array contains 3 values.\nThe second one returns 4, and the last one is an empty array with a length of 0:\nLength of colors: 3\nLength of booleans: 4\nLength of empty array: 0\nSo, be aware that the length is one higher than the maximum index because the index\nof the array starts at 0, but when determining the length, we look at the number of\nelements and there are four separate elements. This is why the maximum index is 3\nwhen the length is 4. Hence, the positional value of the last element in the array will\nbe one fewer than the total number of elements.\nTake a moment and try to figure out how you can use the length to access the last\nelement of the array:\nlastElement = colors[colors.length - 1];\nYou get the highest index by subtracting 1 from the length because, as you know,\narrays are zero-indexed. So, the positional value of the last element in the array will\nbe one fewer than the total number of elements.\nSo, this might seem pretty straightforward. Remember the non-existent index\nposition we called in the previous section? Let's see what happens in this example:\nnumbers = [12, 24, 36];\nnumbers[5] = 48;\nconsole.log(numbers.length);\nThe length of the array is only counting the integer numbers starting from 0 up to\nthe highest filled index. If there are elements in the middle of the sequence that do\nnot have a value, they will still get counted. In this case, the length becomes 6. If we\nlog the array, we can see why:\nconsole.log(\"numbers\", numbers);\nThe output will be as follows:\nnumbers [ 12, 24, 36, <2 empty items>, 48 ]\nBecause we added an element, 48, at index 5, it also created 2 elements at index\npositions 3 and 4 containing empty values. For now, let's have a look at array\nmethods and find out the right way to add to an array.\n[ 52 ]\nChapter 3\nPractice exercise 3.1\n1. Create an array to use as your shopping list with 3 items: \"Milk,\" \"Bread,\" and\n\"Apples.\"\n2. Check your list length in the console.\n3. Update \"Bread\" to \"Bananas.\"\n4. Output your entire list to the console.\nArray methods\nWe have just seen the built-in length property. We also have a few built-in methods.\nMethods are functions on a certain object. Instead of holding a value, like properties,\nthey perform actions. We will cover functions in-depth in Chapter 6, Functions. For\nnow, all you need to know is that you can call methods and functions, and when\nyou do, some code that is specified inside that function gets executed.\nWe just accidentally saw we could add elements using new indices. This is not\nthe proper way to do it as it is easy to make mistakes and accidentally overwrite\na certain value or skip a certain index. The right way is to do this with a special\nmethod. Similarly, we can also delete elements and sort the elements in the array.\nAdding and replacing elements\nWe can add elements with the push() method:\nfavoriteFruits = [\"grapefruit\", \"orange\", \"lemon\"];\nfavoriteFruits.push(\"tangerine\");\nThe value gets added to the end of the array. The push method returns the new\nlength of the array, four in this case. You can store this length in a variable like this:\nlet lengthOfFavoriteFruits = favoriteFruits.push(\"lime\");\nThe value 5 gets stored in the lengthOfFavoriteFruits variable. If we log our array,\nfavoriteFruits, like this:\nconsole.log(favoriteFruits);\nHere is the new array:\n[ 'grapefruit', 'orange', 'lemon', 'tangerine', 'lime' ]\n[ 53 ]\nJavaScript Multiple Values\nThis was easy right? But what if you would want to add elements at a certain index?\nYou can use the splice() method. This one is slightly more difficult:\nlet arrOfShapes = [\"circle\", \"triangle\", \"rectangle\", \"pentagon\"];\narrOfShapes.splice(2, 0, \"square\", \"trapezoid\");\nconsole.log(arrOfShapes);\nAfter this, the output containing the array is as follows:\n[\n'circle',\n'triangle',\n'square',\n'trapezoid',\n'rectangle',\n'pentagon'\n]\nFirst, let's point out the different layouts of this output. This might depend on the\ninterpreter you are using, but at some point, it will decide it is too long for a single\nline and apply an automatic format to the array to make it more readable. It doesn't\nchange the value of the array; it is just a different representation of the same values\nwere they to be on a single line.\nAs you can see, the square and trapezoid get inserted on index 2. The rest of the\narray is shifting to the right. The splice() method takes multiple parameters. The\nfirst parameter, 2 in our case, is the index of the array on which we want to start\ninserting. The second parameter, 0 in our case, is the number of elements we want to\ndelete starting at our previously defined starting index. The parameters after these\nfirst two, square and trapezoid in our case, are whatever should be inserted starting\nat the start index.\nSo, had we said this instead:\narrOfShapes.splice(2, 2, \"square\", \"trapezoid\");\nconsole.log(arrOfShapes);\nIt would have replaced the elements rectangle and pentagon and added square and\ntrapezoid in their place, as follows:\n[ 'circle', 'triangle', 'square', 'trapezoid' ]\n[ 54 ]\nChapter 3\nIf you were to increase the second parameter to a number higher than our array, it\nwould not affect the result as JavaScript would simply stop as soon as it runs out of\nvalues to delete. Try the following code:\narrOfShapes.splice(2, 12, \"square\", \"trapezoid\");\nconsole.log(arrOfShapes);\nThis would also have had this output:\n[ 'circle', 'triangle', 'square', 'trapezoid' ]\nYou can also add another array to your array. This can be done with the concat()\nmethod. This way, you can create a new array that consists of a concatenation of both\narrays. The elements of the first array will be first, and the elements of the argument\nof concat() will be concatenated to the end:\nlet arr5 = [1, 2, 3];\nlet arr6 = [4, 5, 6];\nlet arr7 = arr5.concat(arr6);\nconsole.log(arr7);\nAnd here is the output:\n[ 1, 2, 3, 4, 5, 6 ]\nThis concat() method can do even more! We can use it to add values as well. We can\nadd a single value, or we can comma-separate multiple values:\nlet arr8 = arr7.concat(7, 8, 9);\nconsole.log(arr8);\nThe new value of the array will be as follows:\n[ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\nDeleting elements\nThere are several ways in which you can delete elements from an array. Removing\nthe last element is done with pop():\narr8.pop();\n[ 55 ]\nJavaScript Multiple Values\nLogging the array after executing pop() results in this:\n[ 1, 2, 3, 4, 5, 6, 7, 8 ]\nDeleting the first element can be done with shift(). This causes all other indices to\nbe reduced by one:\narr8.shift();\nThe new array will be:\n[ 2, 3, 4, 5, 6, 7, 8 ]\nRemember splice()? This is a very special method because we can also use it to\ndelete values. We specify the index from where we want to start deleting, and then\nthe number of elements we want to delete.\narr8.splice(1, 3);\nAfter this, the value of the array is as follows:\n[ 2, 6, 7, 8 ]\nAs you can see, 3 elements starting from the second positional index have been\ndeleted. The values 3, 4, and 5 are gone. If you do not wish to change any of the later\nindices, you can also use the operator delete. This is not a method, but you can use it\nto change the value of a certain position of the array to undefined:\ndelete arr8[0];\nThe array then becomes:\n[ <1 empty item>, 6, 7, 8 ]\nThis is useful when you are relying on index or length for some reason. For example,\nif you are keeping user input, and you want to determine the number of user inputs\nbased on an array that the user is pushing to, deleting would decrease the number of\ninputs, whereas that might not be what you would want.\nFinding elements\nIf you want to check whether a value is present in an array, you can use the find()\nmethod. What will go in the find() method is somewhat different. It is actually a\nfunction. This function will be executed on every element in the array until it finds\na match, and if it does not, then it will return undefined.\n[ 56 ]\nChapter 3\nDo not worry if this is too difficult for now; it will become clear soon enough. We\nare writing the function in two different ways in the following code snippet. They\nare actually doing the same, except that the first one is checking for an element\nbeing equal to 6, and the second for an element being equal to 10:\narr8 = [ 2, 6, 7, 8 ];\nlet findValue = arr8.find(function(e) { return e === 6});\nlet findValue2 = arr8.find(e => e === 10);\nconsole.log(findValue, findValue2);\nThe log statement will log 6 and undefined because it can find an element that\nmatches for 6, but not one that matches for 10.\nA function can take a certain input. In this case, it takes the element of the array as\nan input. When the element of the array equals 6 (findValue) or 10 (findValue2), it\nreturns the element. In Chapter 6, Functions, we will cover functions in much more\ndetail. It is a lot for a beginner to take in, so you can review this a bit later if it is\nunclear for now.\nOften, you do not only want to find the element, but you want to know what\nposition it is on. This can be done with the indexOf() method. This method returns\nthe index on which the value is found. If a value occurs in an array more than once,\nit will return the first occurrence. If the value is not found, it will return -1:\narr8 = [ 2, 6, 7, 8 ];\nlet findIndex = arr8.indexOf(6);\nlet findIndex2 = arr8.indexOf(10);\nconsole.log(findIndex, findIndex2);\nSo, the first one will return 1 since that is the index position of 6 in the array. The\nsecond one will return -1 because the array does not contain 10.\nIf you want to find the next occurrence of the specified number, you can add a\nsecond argument to indexOf(), specifying from which position it should start\nsearching:\narr8 = [ 2, 6, 7, 8 ];\nlet findIndex3 = arr8.indexOf(6, 2);\nIn this case, the value of findIndex3 will be -1, because 6 cannot be found starting\nfrom index 2.\n[ 57 ]\nJavaScript Multiple Values\nThe last occurrence can also be found. This is done with the lastIndexOf() method:\nlet animals = [\"dog\", \"horse\", \"cat\", \"platypus\", \"dog\"];\nlet lastDog = animals.lastIndexOf(\"dog\");\nThe value of lastDog will be 4 because that is the last occurrence of dog in the array.\nSorting\nThere is also a built-in method for sorting arrays. It sorts numbers from small to\nhigh and strings A-Z. You can call sort() on an array and the order of the values of\nthe array will change to a sorted order:\nlet names = [\"James\", \"Alicia\", \"Fatiha\", \"Maria\", \"Bert\"];\nnames.sort();\nThe value of names after sorting is as follows:\n[ 'Alicia', 'Bert', 'Fatiha', 'James', 'Maria' ]\nAs you can see, the array is now sorted alphabetically. For numbers, it is sorting\nthem in ascending order, as you can see in the following code snippet:\nlet ages = [18, 72, 33, 56, 40];\nages.sort();\nAfter executing this sort() method, the value of ages is:\n[ 18, 33, 40, 56, 72 ]\nReversing\nThe elements of the array can be reversed by calling the built-in method, reverse(),\non an array. It puts the last element first, and the first element last. It does not matter\nwhether the array is sorted or not; it just reverses the order.\nThe value of names before reversing is as follows:\n[ 'Alicia', 'Bert', 'Fatiha', 'James', 'Maria' ]\nNow we are going to call the reverse() method:\nnames.reverse();\n[ 58 ]\nChapter 3\nThe new order will be:\n[ 'Maria', 'James', 'Fatiha', 'Bert', 'Alicia' ]\nPractice exercise 3.2\n1. Create an empty array to use as a shopping list.\n2. Add Milk, Bread, and Apples to your list.\n3. Update \"Bread\" with Bananas and Eggs.\n4. Remove the last item from the array and output it into the console.\n5. Sort the list alphabetically.\n6. Find and output the index value of Milk.\n7. After Bananas, add Carrots and Lettuce.\n8. Create a new list containing Juice and Pop.\n9. Combine both lists, adding the new list twice to the end of the first list.\n10. Get the last index value of Pop and output it to the console.\n11. Your final list should look like this:\n[\"Bananas\", \"Carrots\", \"Lettuce\", \"Eggs\", \"Milk\", \"Juice\",\n\"Pop\", \"Juice\", \"Pop\"]\nMultidimensional arrays\nEarlier, we established already that arrays can contain any data type. This means that\narrays can also contain other arrays (which, in turn, can contain\u2026 other arrays!). This\nis called a multidimensional array. It sounds complicated, but it is just an array of\narrays: a list of lists:\nlet someValues1 = [1, 2, 3];\nlet someValues2 = [4, 5, 6];\nlet someValues3 = [7, 8, 9];\nlet arrOfArrays = [someValues1, someValues2, someValues3];\nSo, we can create an array of already existing arrays. This is called a two-dimensional\narray. We can write it like this:\nlet arrOfArrays2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n[ 59 ]\nJavaScript Multiple Values\nIf you want to access elements of the inner arrays, you will have to specify an index\ntwice:\nlet value1 = arrOfArrays[0][1];\nThe statement will grab the first array because it has an index position of 0. From this\nfirst array, it will take the second value, because it has an index position of 1. Then it\nstores this value in value1. That means the value of value1 will be 2. Can you figure\nout what the value of the next one will be?\nlet value2 = arrOfArrays[2][2];\nIt takes the third array, and from this third array, it takes the third value. Thus, 9 will\nbe stored in value2. And it does not stop here; it can go many levels deep. Let's show\nthat by creating an array of our array of arrays. We are simply going to store this\narray three times in another array:\narrOfArraysOfArrays = [arrOfArrays, arrOfArrays, arrOfArrays];\nThis is what the array looks like in terms of values:\n[\n[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ],\n[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ],\n[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]\n]\nLet's get the middle element of this array, which is the value 5, belonging to the\nsecond array of arrays. It is done like this:\nlet middleValue = arrOfArraysOfArrays[1][1][1];\nThe first step is to get the second array of arrays, so index 1. Then we need to get\nthe second array of this one, which again is index 1. Now we reach the level of the\nvalues, and we need the second value, so again we use index 1. This is useful in\nmany situations, for example, when you want to work with matrices.\nPractice exercise 3.3\n1. Create an array containing three values: 1, 2, and 3.\n2. Nest the original array into a new array three times.\n3. Output the value 2 from one of the arrays into the console.\n[ 60 ]\nChapter 3\nObjects in JavaScript\nNow it is time to have a look at another complex data structure that can contain\nmore than one value: objects! Objects are very useful and can be used to describe\nreal-life objects as well as more complex abstract concepts that allow for more\nflexibility in your code.\nSecretly, you have just been introduced to objects already, because arrays are a\nvery special type of object. Arrays are objects with indexed properties. All the other\nobjects, and also the objects we will see here, are objects with named properties. This\nmeans that instead of an automatically generated index number, we will give it a\ncustom descriptive name.\nAs we can tell from the following code, arrays are defined by JavaScript as being of\nthe object type:\nlet arr = [0, 1, 2];\nconsole.log(typeof arr);\nThe output of the preceding code is as follows:\nObject\nObjects are not too dissimilar to real-world objects. They have properties and they can\nperform actions, methods. Here, we will only deal with the properties. We will cover\nmethods in Chapter 7, Classes, after we have seen functions. An object is a chance to\ngroup multiple variables into one. This is done with curly brackets: { and }. Let's\nhave a look at this object of a dog here:\nlet dog = { dogName: \"JavaScript\",\nweight: 2.4,\ncolor: \"brown\",\nbreed: \"chihuahua\",\nage: 3,\nburglarBiter: true\n};\nWe created a variable, dog, and we gave this an object as a value. We can recognize\nthat this is an object by seeing the { and }. In between the curly braces, we see a bunch\nof properties and their values.\n[ 61 ]\nJavaScript Multiple Values\nIf you have ever wondered whether something should be a property, just try the\nfollowing template sentence in your head:\n*objectname* has a(n) *property name*\nFor example, a dog has a name, a dog has a color, and a dog has a weight. This is\nslightly different for the Boolean properties, for which you can use \"is\" or \"is not\"\ninstead of \"has\".\nWe can access the properties of this object in a very similar way as we would\nwith the array. This time, we are not using the index number, but the name of the\nproperty, to get the value:\nlet dogColor1 = dog[\"color\"];\nThere is another way to do this. Instead of the square brackets, the property name\ncan also be added to the object name with a dot in between:\nlet dogColor2 = dog.color;\nThis might look familiar. Do you remember how we got the length of an array with\nthe built-in property length? Yes\u2014the same way! The difference between properties\nand methods is the lack of parentheses for properties.\nUpdating objects\nWe can change the value of the properties of the objects. Again, this is similar to an\narray because an array is an object as well, but for properties, we have two options:\ndog[\"color\"] = \"blue\";\ndog.weight = 2.3;\nThis has changed the properties of our chihuahua JavaScript. The color gets updated\nto blue and it has lost a little bit of weight since the new weight is 0.1 lower. So if we\nlog our dog:\nconsole.log(dog);\nWe will get the following:\n{\ndogName: 'JavaScript',\nweight: 2.3,\ncolor: 'blue',\n[ 62 ]\nChapter 3\nbreed: 'chihuahua',\nage: 3,\nburglarBiter: true\n}\nIt's useful to note that if we change the data type of one of our properties, for\nexample:\ndog[\"age\"] = \"three\";\nThis is not a problem. JavaScript will just change the whole value and data type to\nthe new situation.\nAnother element to note is that we are now using the literal string values to refer to\nthe object's properties, but we can also work with variables to achieve this. So, for\nexample:\nlet variable = \"age\";\nconsole.log(dog[variable]);\nThis will still output three, as we just changed the value of age to three. If we change\nthe value of the variable to another dog property, we will be accessing another\nproperty, like this:\nvariable = \"breed\";\nconsole.log(dog[variable]);\nThis will print chihuahua. And when we update the value accessing this way, it is\nthe exact same as when we would have accessed it with the literal string:\ndog[variable] = \"dachshund\";\nconsole.log(dog[\"breed\"]);\nSo, this will log dachshund to the console.\nPractice exercise 3.4\n1. Create a new myCar object for a car. Add some properties, including, but not\nlimited to, make and model, and values for a typical car or your car. Feel free\nto use booleans, strings, or numbers.\n[ 63 ]\nJavaScript Multiple Values\n2. Create a variable that can hold the string value color. This variable\ncontaining a string value color can now be used to reference the property\nname within myCar. Then, use the variable within the square bracket notation\nto assign a new value to the color property in myCar.\n3. Use that same variable and assign a new property string value to it, such as\nforSale. Use the bracket notation once again to assign a new value to the\nforSale property to indicate whether the car is available for purchase.\n4. Output make and model into the console.\n5. Output the value of forSale into the console.\nWorking with objects and arrays\nWhen working with objects and arrays, you will see these often combined. In the\nlast section of this chapter, we will deal with combining objects and arrays, and\nalso objects inside objects.\nObjects in objects\nLet's say we want to have an object for a company. This company will have an\naddress. And an address is another object. If we give our company an address,\nwe are using an object inside an object:\nlet company = { companyName: \"Healthy Candy\",\nactivity: \"food manufacturing\",\naddress: {\nstreet: \"2nd street\",\nnumber: \"123\",\nzipcode: \"33116\",\ncity: \"Miami\",\nstate: \"Florida\"\n},\nyearOfEstablishment: 2021\n};\nAs you can see, our company object has an address object with values. This can go\nvery many levels deep if necessary.\n[ 64 ]\nChapter 3\nTo access or modify one of the properties of the address here, we can use two\napproaches:\ncompany.address.zipcode = \"33117\";\ncompany[\"address\"][\"number\"] = \"100\";\nAs you can see, this is very similar to the array. We first need to select the address\nand then do the same thing to access the property we want to change.\nArrays in objects\nOur company might have a range of activities instead of one. We can simply replace\nthe activity from our previous sample with an array:\ncompany = { companyName: \"Healthy Candy\",\nactivities: [\"food manufacturing\",\n\"improving kids' health\", \"manufacturing toys\"],\naddress: {\nstreet: \"2nd street\",\nnumber: \"123\",\nzipcode: \"33116\",\ncity: \"Miami\",\nstate: \"Florida\"\n},\nyearOfEstablishment: 2021\n};\nWe have now used an array in our company object. You can simply use an array\nwith the square braces after the property. Retrieving the individual values is very\nsimilar. The second value of the activities array can be fetched using this statement:\nlet activity = company.activities[1];\nHere, we call the object we're interested in, company, then the relevant array,\nactivities, with reference to the index position of the variable we're looking for\nwithin the array, which is 1.\n[ 65 ]\nJavaScript Multiple Values\nObjects in arrays\nIt is very possible that instead of one address, our company has a list of addresses.\nWe can accomplish this by creating an array of address objects. In this case, we will\ncreate an array of two:\nlet addresses = [{\nstreet: \"2nd street\",\nnumber: \"123\",\nzipcode: \"33116\",\ncity: \"Miami\",\nstate: \"Florida\"\n},\n{\nstreet: \"1st West avenue\",\nnumber: \"5\",\nzipcode: \"75001\",\ncity: \"Addison\",\nstate: \"Texas\"\n}];\nSo, the arrays can be recognized by the square brackets and the objects by the curly\nbrackets. The street name of the first object can be fetched using this statement:\nlet streetName = addresses[0].street;\nHere, we call the array we're interested in, addresses, with reference to the index\nposition of the object we're looking for within the array, 0, and then the required\nvariable from within the object, which is street. This may seem complicated, but\nyou may notice that this simply reverses the syntax required to retrieve a variable\nfrom an array inside an object from the previous section. It's worth practicing calling\nvariables from nested arrays and objects until you're comfortable with it!\nObjects in arrays in objects\nJust to show that this can go as many levels as we would need, we are going to give\nour company object an array of address objects. So, let's add this array of address\nobjects to our company object. This way, our company has an array of addresses:\ncompany = { companyName: \"Healthy Candy\",\nactivities: [ \"food manufacturing\",\n\"improving kids' health\",\n[ 66 ]\nChapter 3\n\"manufacturing toys\"],\naddress: [{\nstreet: \"2nd street\",\nnumber: \"123\",\nzipcode: \"33116\",\ncity: \"Miami\",\nstate: \"Florida\"\n},\n{\nstreet: \"1st West avenue\",\nnumber: \"5\",\nzipcode: \"75001\",\ncity: \"Addison\",\nstate: \"Texas\"\n}],\nyearOfEstablishment: 2021\n};\nTo access elements of increasingly nested objects and arrays, we simply extend\nthe same logic you have seen in the previous sections. To access the street name of\nHealthy Candy's first address, we can use the following code:\nlet streetName = company.address[0].street;\nAs you see, we can stack object and array element requests indefinitely.\nWe will not make it any more complicated than this for now. Whenever you need\na list of something, you will be using an array. Whenever you want to represent\nsomething with properties that have descriptive names, it is better to use an object.\nJust remember that object properties can be of any type.\nPractice exercise 3.5\n1. Create an object named people that contains an empty array that is called\nfriends.\n2. Create three variables, each containing an object, that contain one of your\nfriend's first names, last names, and an ID value.\n3. Add the three friends to the friend array.\n4. Output it to the console.\n[ 67 ]\nJavaScript Multiple Values\nChapter projects\nManipulating an array\nTake the following array:\nconst theList = ['Laurence', 'Svekis', true, 35, null, undefined,\n{test: 'one', score: 55}, ['one', 'two']];\nManipulate your array using various methods, such as pop(), push(), shift(), and\nunshift(), and transform it into the following:\n[\"FIRST\", \"Svekis\", \"MIDDLE\", \"hello World\", \"LAST\"]\nYou can take the following steps, or adopt your own approach:\n\u2022 Remove the first item and the last item.\n\u2022 Add FIRST to the start of the array.\n\u2022 Assign hello World to the fourth item value.\n\u2022 Assign MIDDLE to the third index value.\n\u2022 Add LAST to the last position in the array.\n\u2022 Output it to the console.\nCompany product catalog\nIn this project, you will implement a data structure for a product catalog and create\nqueries to retrieve data.\n1. Create an array to hold an inventory of store items.\n2. Create three items, each having the properties of name, model, cost, and\nquantity.\n3. Add all three objects to the main array using an array method, and then log\nthe inventory array to the console.\n4. Access the quantity element of your third item, and log it to the console.\nExperiment by adding and accessing more elements within your data\nstructure.\n[ 68 ]\nChapter 3\nSelf-check quiz\n1. Can you use const and update values within an array?\n2. Which property in an array gives the number of items contained in the array?\n3. What is the output in the console?\nconst myArr1 = [1,3,5,6,8,9,15];\nconsole.log(myArr1.indexOf(0));\nconsole.log(myArr1.indexOf(3));\n4. How do you replace the second element in an array myArr =\n[1,3,5,6,8,9,15] with the value 4?\n5. What is the output in the console?\nconst myArr2 = [];\nmyArr2[10] = 'test'\nconsole.log(myArr2);\nconsole.log(myArr2[2]);\n6. What is the output in the console?\nconst myArr3 = [3,6,8,9,3,55,553,434];\nmyArr3.sort();\nmyArr3.length = 0;\nconsole.log(myArr3[0]);\nSummary\nSo, in this chapter, we have seen arrays and objects. Arrays are a list of values. These\ncould be values of the same type, but also values of different types. Every element\nof the array gets an index. The index of the first element is 0. We can access the\nelements of the array using this index. We can also use this index to change and\ndelete the element.\nWe then saw that it is also possible to have arrays containing other arrays; these are\nmultidimensional arrays. To access the elements of a multidimensional array, you\nwould need to use as many indices as you have nested arrays.\nThen, we covered objects and learned that arrays are a special kind of object. Objects\ncontain properties and methods. We looked at the properties of objects and saw that\nthese properties are given a name and can be accessed and modified using this name.\nWe ended this module by looking at how arrays can contain objects, and how objects\ncan contain arrays and more. This enables us to create complex object structures,\nwhich will be of great use in designing real-life applications.\n[ 69 ]\n4\nLogic Statements\nUp to this point, our code has been rather static. It will do the same thing every time\nwe execute it. In this chapter, that is all going to change. We will be dealing with\nlogical statements. Logical statements allow us to make multiple paths in our code.\nDepending on the outcome of a certain expression, we will follow one code path or\nanother.\nThere are different logic statements, and we will go over them in this chapter. We\nwill start with if and if else statements. After that, we will be dealing with the\nternary operator, and the final one we will be dealing with is the switch statement.\nAlong the way, we will cover the following topics:\n\u2022 if and if else statements\n\u2022 else if statements\n\u2022 Conditional ternary operators\n\u2022 switch statements\nNote: exercise, project and self-check quiz answers can be found in\nthe Appendix.\n[ 71 ]\nLogic Statements\nif and if else statements\nWe can make decisions in our code using if and if else statements. It is very much\nlike this template:\nif *some condition is true*, then *a certain action will happen*, else *another action will\nhappen*\nFor example, if it is raining then, I will take my umbrella, else I will leave my\numbrella at home. It is not that much different in code:\nlet rain = true;\nif(rain){\nconsole.log(\"** Taking my umbrella when I need to go outside **\");\n} else {\nconsole.log(\"** I can leave my umbrella at home **\");\n}\nIn this case, the value of rain is true. And therefore, it will log to the console:\n** Taking my umbrella when I need to go outside **\nBut let's first take a step back and look at the syntax. We start with the word \"if.\" After\nthis, we get something within parentheses. Whatever is between these parantheses\nwill be translated to a Boolean. If the value of this Boolean is true, it will execute the\nblock of code associated with if. You can recognize this block by the curly braces.\nThe next block is optional; it is an else block. It starts with the word \"else\" and is\nonly executed in case of the Boolean having the value false. If there is no else block\nand the condition evaluates to false, the program will just skip ahead to the code\nunderneath the if.\nOnly one of these two blocks will be executed; the if block when the expression is\ntrue, and the else block when the expression is false:\nif(expression) {\n// code associated with the if block\n// will only be executed if the expression is true\n} else {\n// code associated with the else block\n// we don't need an else block, it is optional\n// this code will only be executed if the expression is false\n}\n[ 72 ]\nChapter 4\nHere is another example. If the age is below 18, log to the console that access is\ndenied, otherwise log to the console that the person is allowed to come in:\nif(age < 18) {\nconsole.log(\"We're very sorry, but you can't get in under 18\");\n} else {\nconsole.log(\"Welcome!\");\n}\nThere is a common coding mistake related to if statements. I have made it in the\nfollowing code snippet. Can you see what this code does?\nlet hobby = \"dancing\";\nif(hobby == \"coding\"){\nconsole.log(\"** I love coding too! **\");\n} else {\nconsole.log(\"** Can you teach me that? **\");\n}\nIt will log the following:\n** I love coding too! **\nThat might surprise you. The problem here is the single equal sign in the if\nstatement. Instead of evaluating the condition, it is assigning coding to hobby. And\nthen it is converting coding to a Boolean, and since it is not an empty string, it will\nbecome true, so the if block will be executed. So, always remember to use the double\nequal sign in this case.\nLet's test our knowledge with a practice exercise.\nPractice exercise 4.1\n1. Create a variable with a Boolean value.\n2. Output the value of the variable to the console.\n3. Check whether the variable is true and if so, output a message to the console,\nusing the following syntax:\nif(myVariable){\n//action\n}\n[ 73 ]\nLogic Statements\n4. Add another if statement with an ! in front of the variable to check whether\nthe condition is not true, and create a message that will be printed to the\nconsole in that instance. You should have two if statements, one with an\n! and the other without. You could also use an if and an else statement\ninstead\u2014experiment!\n5. Change the variable to the opposite to see how the result changes.\nelse if statements\nA variation of the if statement is an if statement with multiple else if blocks.\nThis can be more efficient in certain situations because you are always only going\nto execute one or zero blocks. If you have many if else statements underneath one\nanother, they are going to be evaluated and possibly executed even though one of\nthe ones above already had a condition evaluate to true and proceeded to execute\nthe associated code block.\nHere is the written template:\nIf *a value falls into a certain category*, then *a certain action will happen*, else if *the\nvalue falls into a different category than the previous statement*, then *a certain action will\nhappen*, else if *the value falls into a different category than either of the previous brackets*,\nthen *a certain action will happen*\nFor example, take this statement, to determine what the ticket price should be. If\na person is younger than 3, then access is free, else if a person is older than 3 and\nyounger than 12, then access is 5 dollars, else if a person is older than 12 and younger\nthan 65, then access is 10 dollars, else if a person is 65 or older, then access is 7\ndollars:\nlet age = 10;\nlet cost = 0;\nlet message;\nif (age < 3) {\ncost = 0;\nmessage = \"Access is free under three.\";\n} else if (age >= 3 && age < 12) {\ncost = 5;\nmessage =\"With the child discount, the fee is 5 dollars\";\n} else if (age >= 12 && age < 65) {\ncost = 10;\nmessage =\"A regular ticket costs 10 dollars.\";\n[ 74 ]\nChapter 4\n} else {\ncost = 7;\nmessage =\"A ticket is 7 dollars.\";\n}\nconsole.log(message);\nconsole.log(\"Your Total cost \"+cost);\nChances are that you will think the code is easier to read than the written template.\nIn that case, nicely done! You are really starting to think like a JavaScript developer\nalready.\nThe code gets executed top to bottom, and only one of the blocks will be executed.\nAs soon as a true expression is encountered, the other ones will be ignored. This is\nwhy we can also write our sample like this:\nif(age < 3){\nconsole.log(\"Access is free under three.\");\n} else if(age < 12) {\nconsole.log(\"With the child discount, the fee is 5 dollars\");\n} else if(age < 65) {\nconsole.log(\"A regular ticket costs 10 dollars.\");\n} else if(age >= 65) {\nconsole.log(\"A ticket is 7 dollars.\");\n}\nPractice exercise 4.2\n1. Create a prompt to ask the user's age\n2. Convert the response from the prompt to a number\n3. Declare a message variable that you will use to hold the console message for\nthe user\n4. If the input age is equal to or greater than 21, set the message variable to\nconfirm entry to a venue and the ability to purchase alcohol\n5. If the input age is equal to or greater than 19, set the message variable to\nconfirm entry to the venue but deny the purchase of alcohol\n6. Provide a default else statement to set the message variable to deny entry if\nnone are true\n7. Output the response message variable to the console\n[ 75 ]\nLogic Statements\nConditional ternary operators\nWe did not actually discuss this very important operator in our section on operators\nin Chapter 2, JavaScript Essentials. This is because it helps to understand the if else\nstatement first. Remember that we had a unary operator that was called a unary\noperator because it only had one operand? This is why our ternary operator has its\nname; it has three operands. Here is its template:\noperand1 ? operand2 : operand3;\noperand1 is the expression that is to be evaluated. If the value of the expression is\ntrue, operand2 gets executed. If the value of the expression is false, operand3 gets\nexecuted. You can read the question mark as \"then\" and the colon as \"else\" here:\nexpression ? statement for true : statement associated with false;\nThe template for saying it in your head should be:\nif *operand1*, then *operand2*, else *operand3*\nLet's have a look at a few examples:\nlet access = age < 18 ? \"denied\" : \"allowed\";\nThis little code snippet will assign a value to access. If age is lower than 18, then it\nwill assign the value denied, else it will assign the value allowed. You can also specify\nan action in a ternary statement, like this:\nage < 18 ? console.log(\"denied\") : console.log(\"allowed\");\nThis syntax can be confusing at first. The template of what to say in your head\nwhile reading it can really come to the rescue here. You can only use these ternary\noperators for very short actions, so it's best practice to use the ternary operator\nin these instances as it makes code easier to read. However, if the logic contains\nmultiple comparison arguments, you'll have to use the regular if-else.\nPractice exercise 4.3\n1. Create a Boolean value for an ID variable\n2. Using a ternary operator, create a message variable that will check whether\ntheir ID is valid and either allow a person into a venue or not\n3. Output the response to the console\n[ 76 ]\nChapter 4\nswitch statements\nIf else statements are great for evaluating Boolean conditions. There are many things\nyou can do with them, but in some cases, it is better to replace them with a switch\nstatement. This is especially the case when evaluating more than four or five values.\nWe are going to see how switch statements can help us and what they look like.\nFirst, have a look at this if else statement:\nif(activity === \"Get up\") {\nconsole.log(\"It is 6:30AM\");\n} else if(activity === \"Breakfast\") {\nconsole.log(\"It is 7:00AM\");\n} else if(activity === \"Drive to work\") {\nconsole.log(\"It is 8:00AM\");\n} else if(activity === \"Lunch\") {\nconsole.log(\"It is 12.00PM\");\n} else if(activity === \"Drive home\") {\nconsole.log(\"It is 5:00PM\")\n} else if(activity === \"Dinner\") {\nconsole.log(\"It is 6:30PM\");\n}\nIt is determining what the time is based on what we are doing. It would be better\nto implement this using a switch statement. The syntax of a switch statement looks\nlike this:\nswitch(expression) {\ncase value1:\n// code to be executed\nbreak;\ncase value2:\n// code to be executed\nbreak;\ncase value-n:\n// code to be executed\nbreak;\n}\nYou can read it in your head as follows: If the expression equals value1, do whatever\ncode is specified for that case. If the expression equals value2, do whatever code is\nspecified for that case, and so on.\n[ 77 ]\nLogic Statements\nHere is how we can rewrite our long if else statement in a much cleaner manner\nusing a switch statement:\nswitch(activity) {\ncase \"Get up\":\nconsole.log(\"It is 6:30AM\");\nbreak;\ncase \"Breakfast\":\nconsole.log(\"It is 7:00AM\");\nbreak;\ncase \"Drive to work\":\nconsole.log(\"It is 8:00AM\");\nbreak;\ncase \"Lunch\":\nconsole.log(\"It is 12:00PM\");\nbreak;\ncase \"Drive home\":\nconsole.log(\"It is 5:00PM\");\nbreak;\ncase \"Dinner\":\nconsole.log(\"It is 6:30PM\");\nbreak;\n}\nIf our activity has the value Lunch it will output the following to the console:\nIt is 12:00PM\nWhat's up with all these breaks, you may be wondering? If you do not use the\ncommand break at the end of a case, it will execute the next case as well. This will\nbe done from the case where it has a match, until the end of the switch statement\nor until we encounter a break statement. This is what the output of our switch\nstatement would be without breaks for the Lunch activity:\nIt is 12:00PM\nIt is 5:00PM\nIt is 6:30PM\nOne last side note. switch uses strict type checking (the triple equals strategy) to\ndetermine equality, which checks for both a value and a data type.\n[ 78 ]\nChapter 4\nThe default case\nThere is one part of switch that we have not worked with yet, and that is a special\ncase label, namely, default. This works a lot like the else part of an if else statement.\nIf it does not find a match with any of the cases and a default case is present, then\nit will execute the code associated with the default case. Here is the template of a\nswitch statement with a default case:\nswitch(expression) {\ncase value1:\n// code to be executed\nbreak;\ncase value2:\n// code to be executed\nbreak;\ncase value-n:\n// code to be executed\nbreak;\ndefault:\n// code to be executed when no cases match\nbreak;\n}\nThe convention is to have the default case as the last case in the switch statement,\nbut the code will work just fine when it is in the middle or the first case. However,\nwe recommend you stick to the conventions and have it as a last case, since that is\nwhat other developers (and probably your future self) will expect when dealing\nwith your code later.\nLet's say our long if statement has an else statement associated with it that looks\nlike this:\nif(\u2026) {\n// omitted to avoid making this unnecessarily long\n} else {\nconsole.log(\"I cannot determine the current time.\");\n}\nThe switch statement would then look like this:\nswitch(activity) {\ncase \"Get up\":\nconsole.log(\"It is 6:30AM\");\n[ 79 ]\nLogic Statements\nbreak;\ncase \"Breakfast\":\nconsole.log(\"It is 7:00AM\");\nbreak;\ncase \"Drive to work\":\nconsole.log(\"It is 8:00AM\");\nbreak;\ncase \"Lunch\":\nconsole.log(\"It is 12:00PM\");\nbreak;\ncase \"Drive home\":\nconsole.log(\"It is 5:00PM\");\nbreak;\ncase \"Dinner\":\nconsole.log(\"It is 6:30PM\");\nbreak;\ndefault:\nconsole.log(\"I cannot determine the current time.\");\nbreak;\n}\nIf the value of the activity was to be something that is not specified as a case, for\nexample, \"Watch Netflix,\" it would log the following to the console:\nI cannot determine the current time.\nPractice exercise 4.4\nAs discussed in Chapter 1, Getting Started with JavaScript, the JavaScript function Math.\nrandom() will return a random number in the range of 0 to less than 1, including 0\nbut not 1. You can then scale it to the desired range by multiplying the result and\nusing Math.floor() to round it down to the nearest whole number; for example, to\ngenerate a random number between 0 and 9:\n// random number between 0 and 1\nlet randomNumber = Math.random();\n// multiply by 10 to obtain a number between 0 and 10\nrandomNumber = randomNumber * 10;\n// removes digits past decimal place to provide a whole number\nRandomNumber = Math.floor(randomNumber);\n[ 80 ]\nChapter 4\nIn this exercise, we'll create a Magic 8-Ball random answer generator:\n1. Start by setting a variable that gets a random value assigned to it. The value\nis assigned by generating a random number 0-5, for 6 possible results. You\ncan increase this number as you add more results.\n2. Create a prompt that can get a string value input from a user that you can\nrepeat back in the final output.\n3. Create 6 responses using the switch statement, each assigned to a different\nvalue from the random number generator.\n4. Create a variable to hold the end response, which should be a sentence\nprinted for the user. You can assign different string values for each case,\nassigning new values depending on the results from the random value.\n5. Output the user's original question, plus the randomly selected case\nresponse, to the console after the user enters their question.\nCombining cases\nSometimes, you would want to do the exact same thing for multiple cases. In an if\nstatement, you would have to specify all the different or (||) clauses. In a switch\nstatement, you can simply combine them by putting them on top of each other like\nthis:\nswitch(grade){\ncase \"F\":\ncase \"D\":\nconsole.log(\"You've failed!\");\nbreak;\ncase \"C\":\ncase \"B\":\nconsole.log(\"You've passed!\");\nbreak;\ncase \"A\":\nconsole.log(\"Nice!\");\nbreak;\ndefault:\nconsole.log(\"I don't know this grade.\");\n}\n[ 81 ]\nLogic Statements\nFor the values F and D, the same thing is happening. This is also true for C and B.\nWhen the value of grade is either C or B, it will log the following to the console:\nYou've passed!\nThis is more readable than the alternative if-else statement:\nif(grade === \"F\" || grade === \"D\") {\nconsole.log(\"You've failed!\");\n} else if(grade === \"C\" || grade === \"B\") {\nconsole.log(\"You've passed!\");\n} else if(grade === \"A\") {\nconsole.log(\"Nice!\");\n} else {\nconsole.log(\"I don't know this grade.\");\n}\nPractice exercise 4.5\n1. Create a variable called prize and use a prompt to ask the user to set the\nvalue by selecting a number between 0 and 10\n2. Convert the prompt response to a number data type\n3. Create a variable to use for the output message containing the value \"My\nSelection: \"\n4. Using the switch statement (and creativity), provide a response back\nregarding a prize that is awarded depending on what number is selected\n5. Use the switch break to add combined results for prizes\n6. Output the message back to the user by concatenating your prize variable\nstrings and the output message string\nChapter projects\nEvaluating a number game\nAsk the user to enter a number and check whether it's greater than, equal to, or less\nthan a dynamic number value in your code. Output the result to the user.\n[ 82 ]\nChapter 4\nFriend checker game\nAsk the user to enter a name, using the switch statement to return a confirmation\nthat the user is a friend if the name selected is known in the case statements. You\ncan add a default response that you don't know the person if it's an unknown name.\nOutput the result into the console.\nRock Paper Scissors game\nThis is a game between a player and the computer, where both will make a random\nselection of either Rock, Paper, or Scissors (alternatively, you could create a version\nusing real player input!). Rock will beat out Scissors, Paper will beat out Rock, and\nScissors will beat out Paper. You can use JavaScript to create your own version of\nthis game, applying the logic with an if statement. Since this project is a little more\ndifficult, here are some suggested steps:\n1. Create an array that contains the variables Rock, Paper, and Scissors.\n2. Set up a variable that generates a random number 0-2 for the player and then\ndo the same for the computer's selection. The number represents the index\nvalues in the array of the 3 items.\n3. Create a variable to hold a response message to the user. This can show the\nrandom results for the player and then also the result for the computer of the\nmatching item from the array.\n4. Create a condition to handle the player and computer selections. If both are\nthe same, this results in a tie.\n5. Use conditions to apply the game logic and return the correct results.\nThere are several ways to do this with the condition statements, but you\ncould check which player's index value is bigger and assign the victory\naccordingly, with the exception of Rock beating Scissors.\n6. Add a new output message that shows the player selection versus the\ncomputer selection and the result of the game.\nSelf-check quiz\n1. What will be outputted to the console in this instance?\nconst q = '1';\nswitch (q) {\ncase '1':\nanswer = \"one\";\n[ 83 ]\nLogic Statements\nbreak;\ncase 1:\nanswer = 1;\nbreak;\ncase 2:\nanswer = \"this is the one\";\nbreak;\ndefault:\nanswer = \"not working\";\n}\nconsole.log(answer);\n2. What will be outputted to the console in this instance?\nconst q = 1;\nswitch (q) {\ncase '1':\nanswer = \"one\";\ncase 1:\nanswer = 1;\ncase 2:\nanswer = \"this is the one\";\nbreak;\ndefault:\nanswer = \"not working\";\n}\nconsole.log(answer);\n3. What will be outputted to the console in this instance?\nlet login = false;\nlet outputHolder = \"\";\nlet userOkay = login ? outputHolder = \"logout\" : outputHolder =\n\"login\";\nconsole.log(userOkay);\n4. What will be outputted to the console in this instance?\nconst userNames = [\"Mike\", \"John\", \"Larry\"];\nconst userInput = \"John\";\nlet htmlOutput = \"\";\nif (userNames.indexOf(userInput) > -1) {\nhtmlOutput = \"Welcome, that is a user\";\n[ 84 ]\nChapter 4\n} else {\nhtmlOutput = \"Denied, not a user \";\n}\nconsole.log(htmlOutput + \": \" + userInput);\n5. What will be outputted to the console in this instance?\nlet myTime = 9;\nlet output;\nif (myTime >= 8 && myTime < 12) {\noutput = \"Wake up, it's morning\";\n} else if (myTime >= 12 && myTime < 13) {\noutput = \"Go to lunch\";\n} else if (myTime >= 13 && myTime <= 16) {\noutput = \"Go to work\";\n} else if (myTime > 16 && myTime < 20) {\noutput = \"Dinner time\";\n} else if (myTime >= 22) {\noutput = \"Time to go to sleep\";\n} else {\noutput = \"You should be sleeping\";\n}\nconsole.log(output);\n6. What will be outputted to the console in this instance?\nlet a = 5;\nlet b = 10;\nlet c = 20;\nlet d = 30;\nconsole.log(a > b || b > a);\nconsole.log(a > b && b > a);\nconsole.log(d > b || b > a);\nconsole.log(d > b && b > a);\n7. What will be outputted to the console in this instance?\nlet val = 100;\nlet message = (val > 100) ? `${val} was greater than 100` :\n`${val} was LESS or Equal to 100`;\nconsole.log(message);\nlet check = (val % 2) ? `Odd` : `Even`;\ncheck = `${val} is ${check}`;\nconsole.log(check);\n[ 85 ]\nLogic Statements\nSummary\nNow, let's wrap things up. In this chapter, we have covered conditional statements.\nWe started with if else statements. Whenever the condition associated with the if\nis true, the if block gets executed. If the condition is false and there is an else block\npresent, that will be executed. We have also seen ternary operators and the funky\nsyntax they bring to the table. It is a short way of writing an if-else statement if you\nonly need one statement per block.\nAnd lastly, we have seen switch statements and how they can be used to optimize\nour conditional code. With the switch statement, we can compare one condition\nwith many different cases. When they are equal (value and type), the code\nassociated with the case gets executed.\nIn the next chapter, we are going to add loops to the mix! This is going to help us\nwrite more efficient code and algorithms.\n[ 86 ]\n5\nLoops\nWe are starting to get a good basic grasp of JavaScript. This chapter will focus on\na very important control flow concept: loops. Loops execute a code block a certain\nnumber of times. We can use loops to do many things, such as repeating operations a\nnumber of times and iterating over data sets, arrays, and objects. Whenever you feel\nthe need to copy a little piece of code and place it right underneath where you copied\nit from, you should probably be using a loop instead.\nWe will first discuss the basics of loops, then continue to discuss nesting loops,\nwhich is basically using loops inside loops. Also, we will explain looping over two\ncomplex constructs we have seen, arrays and objects. And finally, we will introduce\ntwo keywords related to loops, break and continue, to control the flow of the loop\neven more.\nThere is one topic that is closely related to loops that is not in this\nchapter. This is the built-in foreach method. We can use this\nmethod to loop over arrays, when we can use an arrow function.\nSince we won't discuss these until the next chapter, foreach is not\nincluded here.\nThese are the different loops we will be discussing in this chapter:\n\u2022 while loop\n\u2022 do while loop\n\u2022 for loop\n\u2022 for in\n\u2022 for of loop\n[ 87 ]\nLoops\nNote: exercise, project, and self-check quiz answers can be found in\nthe Appendix.\nwhile loops\nThe first loop we will discuss is the while loop. A while loop executes a certain block\nof code as long as an expression evaluates to true. The snippet below demonstrates\nthe syntax of the while loop:\nwhile (condition) {\n// code that gets executed as long as the condition is true\n}\nThe while loop will only be executed as long as the condition is true, so if the\ncondition is false to begin with, the code inside will be skipped.\nHere is a very simple example of a while loop printing the numbers 0 to 10\n(excluding 10) to the console:\nlet i = 0;\nwhile (i < 10) {\nconsole.log(i);\ni++;\n}\nThe output will be as follows:\n1\n2\n3\n4\n5\n6\n7\n8\n9\nThese are the steps happening here:\n1. Create a variable, i, and set its value to zero\n2. Start the while loop and check the condition that the value of i is smaller\nthan 10\n[ 88 ]\nChapter 5\n3. Since the condition is true, the code logs i and increases i by 1\n4. The condition gets evaluated again; 1 is still smaller than 10\n5. Since the condition is true, the code logs i and increases i by 1\n6. The logging and increasing continues until i becomes 10\n7. 10 is not smaller than 10, so the loop ends\nWe can have a while loop that looks for a value in an array, like this:\nlet someArray = [\"Mike\", \"Antal\", \"Marc\", \"Emir\", \"Louiza\", \"Jacky\"];\nlet notFound = true;\nwhile (notFound && someArray.length > 0) {\nif (someArray[0] === \"Louiza\") {\nconsole.log(\"Found her!\");\nnotFound = false;\n} else {\nsomeArray.shift();\n}\n}\nIt checks whether the first value of the array is a certain value, and when it is not, it\ndeletes that value from the array using the shift method. Remember this method?\nIt removes the first element of the array. So, by the next iteration, the first value has\nchanged and is checked again. If it stumbles upon the value, it will log this to the\nconsole and change the Boolean notFound to false, because it has found it. That was\nthe last iteration and the loop is done. It will output:\nFound her!\nfalse\nWhy do you think the && someArray.length > 0 is added in the while condition? If\nwe were to leave it out, and the value we were looking for was not in the array, we\nwould get stuck in an infinite loop. This is why we make sure that we also end things\nif our value is not present, so our code can continue.\nBut we can also do more sophisticated things very easily with loops. Let's see how\neasy it is to fill an array with the Fibonacci sequence using a loop:\nlet nr1 = 0;\nlet nr2 = 1;\nlet temp;\n[ 89 ]\nLoops\nfibonacciArray = [];\nwhile (fibonacciArray.length < 25) {\nfibonacciArray.push(nr1);\ntemp = nr1 + nr2;\nnr1 = nr2;\nnr2 = temp;\n}\nIn the Fibonacci sequence, each value is the sum of the two previous values, starting\nwith the values 0 and 1. We can do this in a while loop as stated above. We create\ntwo numbers and they change every iteration. We have limited our number of\niterations to the length of the fibonacciArray, because we don't want an infinite\nloop. In this case the loop will be done as soon as the length of the array is no longer\nsmaller than 25.\nWe need a temporary variable that stores the next value for nr2. And every iteration\nwe push the value of the first number to the array. If we log the array, you can see\nthe numbers getting rather high very quickly. Imagine having to generate these\nvalues one by one in your code!\n[\n0, 1, 1, 2, 3,\n5, 8, 13, 21, 34,\n55, 89, 144, 233, 377,\n610, 987, 1597, 2584, 4181,\n6765, 10946, 17711, 28657, 46368\n]\nPractice exercise 5.1\nIn this exercise we will create a number guessing game that takes user input and\nreplies based on how accurate the user's guess was.\n1. Create a variable to be used as the max value for the number guessing game.\n2. Generate a random number for the solution using Math.random() and\nMath.floor(). You will also need to add 1 so that the value is returned as\n1-[whatever the set max value is]. You can log this value to the console for\ndevelopment to see the value as you create the game, then when the game is\ncomplete you can comment out this console output.\n[ 90 ]\nChapter 5\n3. Create a variable that will be used for tracking whether the answer is correct\nor not and set it to a default Boolean value of false. We can update it to be\ntrue if the user guess is a match.\n4. Use a while loop to iterate a prompt that asks the user to enter a number\nbetween 1 and 5, and convert the response into a number in order to match\nthe data type of the random number.\n5. Inside the while loop, check using a condition to see if the prompt value is\nequal to the solution number. Apply logic such that if the number is correct,\nyou set the status to true and break out of the loop. Provide the player with\nsome feedback as to whether the guess was high or low, and initiate another\nprompt until the user guesses correctly. In this way we use the loop to keep\nasking until the solution is correct, and at that point we can stop the iteration\nof the block of code.\ndo while loops\nIn some cases, you really need the code block to be executed at least once. For\nexample, if you need valid user input, you need to ask at least once. The same goes\nfor trying to connect with a database or some other external source: you will have to\ndo so at least once in order for it to be successful. And you will probably need to do\nso as long as you did not get the result you needed. In these cases, you can use a do\nwhile loop.\nHere is what the syntax looks like:\ndo {\n// code to be executed if the condition is true\n} while (condition);\nIt executes what is within the do block, and then after that it evaluates the while. If\nthe condition is true, it will execute what is in the do block again. It will continue to\ndo so until the condition in the while changes to false.\nWe can use the prompt() method to get user input. Let's use a do while loop to ask\nthe user for a number between 0 and 100.\nlet number;\ndo {\nnumber = prompt(\"Please enter a number between 0 and 100: \");\n} while (!(number >= 0 && number < 100));\n[ 91 ]\nLoops\nHere is the output; you will have to enter the number in the console yourself here.\nPlease enter a number between 0 and 100: > -50\nPlease enter a number between 0 and 100: > 150\nPlease enter a number between 0 and 100: > 34\nEverything behind the > is user input here. The > is part of the\ncode; it is added by the console to make the distinction between\nconsole output (Please enter a number between 0 and 100)\nand the console input (-50, 150, and 34) clearer.\nIt asks three times, because the first two times the number was not between 0 and\n100 and the condition in the while block was true. With 34, the condition in the while\nblock became false and the loop ended.\nPractice exercise 5.2\nIn this exercise, we will create a basic counter that will increase a dynamic variable\nby a consistent step value, up to an upper limit.\n1. Set the starting counter to 0\n2. Create a variable, step, to increase your counter by\n3. Add a do while loop, printing the counter to the console and incrementing it\nby the step amount each loop\n4. Continue to loop until the counter is equal to 100 or more than 100\nfor loops\nfor loops are special loops. The syntax might be a little bit confusing at first, but you\nwill find yourself using them soon, because they are very useful.\nHere is what the syntax looks like:\nfor (initialize variable; condition; statement) {\n// code to be executed\n}\n[ 92 ]\nChapter 5\nBetween the parentheses following the for statement, there are three parts, separated\nby semi-colons. The first one initializes the variables that can be used in the for loop.\nThe second one is a condition: as long as this condition is true, the loop will keep on\niterating. This condition gets checked after initializing the variables before the first\niteration (this will only take place when the condition evaluates to true). The last one\nis a statement. This statement gets executed after every iteration. Here is the flow of a\nfor loop:\n1. Initialize the variables.\n2. Check the condition.\n3. If the condition is true, execute the code block. If the condition is false, the\nloop will end here.\n4. Perform the statement (the third part, for example, i++).\n5. Go back to step 2.\nThis is a simple example that logs the numbers 0 to 10 (excluding 10) to the console:\nfor (let i = 0; i < 10; i++) {\nconsole.log(i);\n}\nIt starts by creating a variable, i, and sets this to 0. Then it checks whether i is\nsmaller than 10. If it is, it will execute the log statement. After this, it will execute i++\nand increase i by one.\nIf we don't increase i, we will get stuck in an infinite loop, since\nthe value of i would not change and it would be smaller than 10\nforever. This is something to look out for in all loops!\nThe condition gets checked again. And this goes on until i reaches a value of 10. 10 is\nnot smaller than 10, so the loop is done executing and the numbers 0 to 9 have been\nlogged to the console.\nWe can also use a for loop to create a sequence and add values to an array, like this:\nlet arr = [];\nfor (let i = 0; i < 100; i++) {\narr.push(i);\n}\n[ 93 ]\nLoops\nThis is what the array looks like after this loop:\n[\n0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,\n96, 97, 98, 99\n]\nSince the loop ran the block of code 100 times, starting with an initial value of 0 for\ni, the block of code will add the incrementing value into the array at the end of the\narray. This results in an array that has a count of 0\u201399 and a length of 100 items. Since\narrays start with an index value of zero, the values in the array will actually match\nup with the index values of the items in the array.\nOr we could create an array containing only even values:\nlet arr = [];\nfor (let i = 0; i < 100; i = i + 2) {\narr.push(i);\n}\nResulting in this array:\n[\n0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20,\n22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,\n44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64,\n66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86,\n88, 90, 92, 94, 96, 98\n]\nMost commonly, you will see i++ as the third part of the for loop, but please note\nthat you can write any statement there. In this case, we are using i = i + 2 to add 2\nto the previous value every time, creating an array with only even numbers.\n[ 94 ]\nChapter 5\nPractice exercise 5.3\nIn this exercise we will use a for loop to create an array that holds objects. Starting\nwith creating a blank array, the block of code within the loop will create an object\nthat gets inserted into the array.\n1. Setup a blank array, myWork.\n2. Using a for loop, create a list of 10 objects, each of which is a numbered\nlesson (e.g. Lesson 1, Lesson 2, Lesson 3\u2026.) with an alternating true/false\nstatus for every other item to indicate whether the class will be running this\nyear. For example:\nname: 'Lesson 1', status: true\n3. You can specify the status by using a ternary operator that checks whether\nthe modulo of the given lesson value is equal to zero and by setting up a\nBoolean value to alternate the values each iteration.\n4. Create a lesson using a temporary object variable, containing the name\n(lesson with the numeric value) and predefined status (which we set up in\nthe previous step).\n5. Push the objects to the myWork array.\n6. Output the array to the console.\nNested loops\nSometimes it can be necessary to use a loop inside a loop. A loop inside a loop is\ncalled a nested loop. Often it is not the best solution to the problem. It could even be\na sign of poorly written code (sometimes called \"code smell\" among programmers),\nbut every now and then it is a perfectly fine solution to a problem.\nHere is what it would look like for while loops:\nwhile (condition 1) {\n// code that gets executed as long as condition 1 is true\n// this loop depends on condition 1 being true\nwhile (condition 2) {\n// code that gets executed as long as condition 2 is true\n}\n}\n[ 95 ]\nLoops\nNesting can also be used with for loops, or with a combination of both for and\nwhile, or even with all kinds of loops; they can go several levels deep.\nAn example in which we might use nested loops would be when we want to create\nan array of arrays. With the outer loop, we create the top-level array, and with the\ninner loop we add the values to the array.\nlet arrOfArrays = [];\nfor (let i = 0; i < 3; i++){\narrOfArrays.push([]);\nfor (let j = 0; j < 7; j++) {\narrOfArrays[i].push(j);\n}\n}\nWhen we log this array like this:\nconsole.log(arrOfArrays);\nWe can see that the output is an array of arrays with values from 0 up to 6.\n[\n[\n0, 1, 2, 3, 4, 5, 6\n],\n[\n0, 1, 2, 3, 4, 5, 6\n],\n[\n0, 1, 2, 3, 4, 5, 6\n]\n]\nWe used the nested loops to create an array in an array, meaning we can work with\nrows and columns after having created this loop. This means nested loops can be\nused to create tabular data. We can show this output as a table using the console.\ntable() method instead, like so:\nconsole.table(arrOfArrays);\n[ 96 ]\nChapter 5\nThis will output:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502 (index) \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502 0 \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502\n\u2502 1 \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502\n\u2502 2 \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\nLet's put this into practice in the next exercise.\nPractice exercise 5.4\nIn this exercise we will be generating a table of values. We will be using loops to\ngenerate rows and also columns, which will be nested within the rows. Nested arrays\ncan be used to represent rows in a table. This is a common structure in spreadsheets,\nwhere each row is a nested array within a table and the contents of these rows are\nthe cells in the table. The columns will align as we are creating an equal number of\ncells in each row.\n1. To create a table generator, first create an empty array, myTable, to hold your\ntable data.\n2. Set variable values for the number of rows and columns. This will allow us\nto dynamically control how many rows and columns we want within the\ntable. Separating the values from the main code helps make updates to the\ndimensions easier.\n3. Set up a counter variable with an initial value of 0. The counter will be used\nto set the content and count the values of the cells within the table.\n4. Create a for loop with conditions to set the number of iterations, and to\nconstruct each row of the table. Within it, set up a new temporary array\n(tempTable) to hold each row of data. The columns will be nested within\nthe rows, generating each cell needed for the column.\n5. Nest a second loop within the first to count the columns. Columns are run\nwithin the row loop so that we have a uniform number of columns within\nthe table.\n[ 97 ]\nLoops\n6. Increment the main counter each iteration of the inner loop, so that we track\na master count of each one of the cells and how many cells are created.\n7. Push the counter values to the temporary array, tempTable. Since the array is\na nested array representing a table, the values of the counter can also be used\nto illustrate the cell values next to each other in the table. Although these are\nseparate arrays representing new rows, the value of the counter will help\nillustrate the overall sequence of cells in the final table.\n8. Push the temporary array to the main table. As each iteration builds a new\nrow of array items, this will continue to build the main table in the array.\n9. Output into the console with console.table(myTable). This will show you a\nvisual representation of the table structure.\nLoops and arrays\nIf you are not convinced of how extremely useful loops are by now, have a look at\nloops and arrays. Loops make life with arrays a lot more comfortable.\nWe can combine the length property and the condition part of the for loop or while\nloop to loop over arrays. It would look like this in the case of a for loop:\nlet arr = [some array];\nfor (initialize variable; variable smaller than arr.length; statement)\n{\n// code to be executed\n}\nLet's start with a simple example that is going to log every value of the array:\nlet names = [\"Chantal\", \"John\", \"Maxime\", \"Bobbi\", \"Jair\"];\nfor (let i = 0; i < names.length; i ++){\nconsole.log(names[i]);\n}\nThis will output:\nChantal\nJohn\nMaxime\nBobbi\nJair\n[ 98 ]\nChapter 5\nWe use the length property to determine the maximum value of our index. The\nindex starts counting at 0, but the length does not. The index is always one smaller\nthan the length. Hence, we loop over the values of the array by increasing the length.\nIn this case we aren't doing very interesting things yet; we are simply printing the\nvalues. But we could be changing the values of the array in a loop, for example, like\nthis:\nlet names = [\"Chantal\", \"John\", \"Maxime\", \"Bobbi\", \"Jair\"];\nfor (let i = 0; i < names.length; i ++){\nnames[i] = \"hello \" + names[i];\n}\nWe have concatenated hello with the beginnings of our names. The array is changed\nin the loop and the array will have this content after the loop has executed:\n[\n'hello Chantal',\n'hello John',\n'hello Maxime',\n'hello Bobbi',\n'hello Jair'\n]\nThe possibilities are endless here. When an array comes in somewhere in the\napplication, data can be sent to the database per value. Data can be modified by\nvalue, or even filtered, like this:\nlet names = [\"Chantal\", \"John\", \"Maxime\", \"Bobbi\", \"Jair\"];\nfor (let i = 0; i < names.length; i ++){\nif(names[i].startsWith(\"M\")){\ndelete names[i];\ncontinue;\n}\nnames[i] = \"hello \" + names[i];\n}\nconsole.log(names);\nThe startsWith() method just checks whether the string starts with a certain\ncharacter. In this case it checks whether the name starts with the string M.\n[ 99 ]\nLoops\nDon't worry, we will cover this function and many more in detail\nin Chapter 8, Built-in JavaScript Methods.\nThe output is:\n[\n'hello Chantal',\n'hello John',\n<1 empty item>,\n'hello Bobbi',\n'hello Jair'\n]\nYou'll have to be careful here though. If we were to remove the item instead of\ndeleting it and leaving an empty value, we would accidentally skip the next value,\nsince that value gets the index of the recently deleted one and i is incremented and\nmoves on to the next index.\nWhat do you think this one does:\nlet names = [\"Chantal\", \"John\", \"Maxime\", \"Bobbi\", \"Jair\"];\nfor (let i = 0; i < names.length; i++){\nnames.push(\"...\")\n}\nYour program gets stuck in an infinite loop here. Since a value gets added every\niteration, the length of the loop grows with every iteration and i will never be bigger\nthan or equal to length.\nPractice exercise 5.5\nExplore how to create a table grid that contains nested arrays as rows within a table.\nThe rows will each contain the number of cells needed for the number of columns set\nin the variables. This grid table will dynamically adjust depending on the values for\nthe variables.\n1. Create a grid array variable.\n2. Set a value of 64 for the number of cells.\n3. Set a counter to 0.\n[ 100 ]\nChapter 5\n4. Create a global variable to be used for the row array.\n5. Create a loop that will iterate up to the number of cells you want in the array,\nplus one to include the zero value. In our example, we would use 64+1.\n6. Add an outer if statement, which uses modulo to check if the main counter\nis divisible by 8 or whatever number of columns you want.\n7. Inside the preceding if statement, add another if statement to check if the\nrow is undefined, indicating whether it is the first run or whether the row\nis complete. If the row has been defined, then add the row to the main grid\narray.\n8. To finish off the outer if statement, if the counter is divisible by 8, clear the\nrow array\u2014it has already been added to the grid by the inner if statement.\n9. At the end of the for loop, increment of the main counter by 1.\n10. Set up a temporary variable to hold the value of the counter and push it to\nthe row array.\n11. Within the loop iteration, check if the value of the counter is equal to the total\nnumber of columns you want; if it is, then add the current row to the grid.\n12. Please note that the extra cell will not be added to the grid since there aren't\nenough cells to make a new row within the condition that adds the rows to\nthe grid. An alternative solution would be to remove the +1 from the loop\ncondition and add grid.push(row) after the loop is completed, both of which\nwill provide the same solution output.\n13. Output the grid into the console.\nfor of loop\nThere is another loop we can use to iterate over the elements of an array: the for of\nloop. It cannot be used to change the value associated with the index as we can do\nwith the regular loop, but for processing values it is a very nice and readable loop.\nHere is what the syntax looks like:\nlet arr = [some array];\nfor (let variableName of arr) {\n// code to be executed\n// value of variableName gets updated every iteration\n// all values of the array will be variableName once\n}\n[ 101 ]\nLoops\nSo you can read it like this: \"For every value of the array, call it variableName and do\nthe following.\" We can log our names array using this loop:\nlet names = [\"Chantal\", \"John\", \"Maxime\", \"Bobbi\", \"Jair\"];\nfor (let name of names){\nconsole.log(name);\n}\nWe need to specify a temporary variable; in this case we called it name. This is used to\nput the value of the current iteration in, and after the iteration, it gets replaced with\nthe next value. This code results in the following output:\nChantal\nJohn\nMaxime\nBobbi\nJair\nThere are some limitations here; we cannot modify the array, but we could write all\nthe elements to a database or a file, or send it somewhere else. The advantage of this\nis that we cannot accidentally get stuck in an infinite loop or skip values.\nPractice exercise 5.6\nThis exercise will construct an array as it loops through the incrementing values of\nx. Once the array is done, this exercise also will demonstrate several ways to output\narray contents.\n1. Create an empty array\n2. Run a loop 10 times, adding a new incrementing value to the array\n3. Log the array into the console\n4. Use the for loop to iterate through the array (adjust the number of iterations\nto however many values are in your array) and output into the console\n5. Use the for of loop to output the value into the console from the array\nLoops and objects\nWe have just seen how to loop over the values of an array, but we can also loop\nover the properties of an object. This can be helpful when we need to go over all the\nproperties but don't know the exact properties of the object we are iterating over.\n[ 102 ]\nChapter 5\nLooping over an object can be done in a few ways. We can use the for in loop to\nloop over the object directly, or we can convert the object to an array and loop over\nthe array. We'll consider both in the following sections.\nfor in loop\nManipulating objects with loops can also be done with another variation of the for\nloop, the for in loop. The for in loop is somewhat similar to the for of loop. Again\nhere, we need to specify a temporary name, also referred to as a key, to store each\nproperty name in. We can see it in action here:\nlet car = {\nmodel: \"Golf\",\nmake: \"Volkswagen\",\nyear: 1999,\ncolor: \"black\",\n};\nfor (let prop in car){\nconsole.log(car[prop]);\n}\nWe need to use the prop of each loop iteration to get the value out of the car object.\nThe output then becomes:\nGolf\nVolkswagen\n1999\nblack\nIf we just logged the prop, like this:\nfor (let prop in car){\nconsole.log(prop);\n}\nThis is what our output would look like:\nmodel\nmake\nyear\ncolor\n[ 103 ]\nLoops\nAs you can see, all the names of the properties get printed, and not the values. This\nis because the for in loop is getting the property names (keys) and not the values.\nThe for of is doing the opposite; it is getting the values and not the keys.\nThis for in loop can also be used on arrays, but it is not really useful. It will only\nreturn the indices, since these are the \"keys\" of the values of the arrays. Also, it\nshould be noted that the order of execution cannot be guaranteed, even though\nthis is usually important for arrays. It is therefore better to use the approaches\nmentioned in the section on loops and arrays.\nPractice exercise 5.7\nIn this exercise, we will experiment with looping over objects and internal arrays.\n1. Create a simple object with three items in it.\n2. Using the for in loop, get the properties' names and values from the object\nand output them into the console.\n3. Create an array containing the same three items. Using either the for loop or\nthe for in loop, output the values from the array into the console.\nLooping over objects by converting to an\narray\nYou can use any loop on objects, as soon as you convert the object to an array. This\ncan be done in three ways:\n\u2022 Convert the keys of the object to an array\n\u2022 Convert the values of the object to an array\n\u2022 Convert the key-value entries to an array (containing arrays with two\nelements: object key and object value)\nLet's use this example:\nlet car = {\nmodel: \"Golf\",\nmake: \"Volkswagen\",\nyear: 1999,\ncolor: \"black\",\n};\n[ 104 ]\nChapter 5\nIf we want to loop over the keys of the object, we can use the for in loop, as we saw\nin the previous section, but we can also use the for of loop if we convert it to an\narray first. We do so by using the Object.keys(nameOfObject) built-in function. This\ntakes an object and grabs all the properties of this object and converts them to an\narray.\nTo demonstrate how this works:\nlet arrKeys = Object.keys(car);\nconsole.log(arrKeys);\nThis will output:\n[ 'model', 'make', 'year', 'color' ]\nWe can loop over the properties of this array like this using the for of loop:\nfor(let key of Object.keys(car)) {\nconsole.log(key);\n}\nAnd this is what it will output:\nmodel\nmake\nyear\ncolor\nSimilarly, we can use the for of loop to loop over the values of the object by\nconverting the values to an array. The main difference here is that we use Object.\nvalues(nameOfObject):\nfor(let key of Object.values(car)) {\nconsole.log(key);\n}\nYou can loop over these arrays in the same way you loop over any array. You can\nuse the length and index strategy like this in a regular for loop:\nlet arrKeys = Object.keys(car);\nfor(let i = 0; i < arrKeys.length; i++) {\nconsole.log(arrKeys[i] + \": \" + car[arrKeys[i]]);\n}\n[ 105 ]\nLoops\nAnd this will output:\nmodel: Golf\nmake: Volkswagen\nyear: 1999\ncolor: black\nMore interesting is how to loop over both arrays at the same time using the for of\nloop. In order to do so, we will have to use Object.entries(). Let's demonstrate\nwhat it does:\nlet arrEntries = Object.entries(car);\nconsole.log(arrEntries);\nThis will output:\n[\n[ 'model', 'Golf' ],\n[ 'make', 'Volkswagen' ],\n[ 'year', 1999 ],\n[ 'color', 'black' ]\n]\nAs you can see, it is returning a two-dimensional array, containing key-value pairs.\nWe can loop over it like this:\nfor (const [key, value] of Object.entries(car)) {\nconsole.log(key, \":\", value);\n}\nAnd this will output:\nmodel : Golf\nmake : Volkswagen\nyear : 1999\ncolor : black\nAlright, you have seen many ways to loop over objects now. Most of them come\ndown to converting the object to an array. We can imagine that at this point you\ncould use a break. Or maybe you'd just like to continue?\n[ 106 ]\nChapter 5\nbreak and continue\nbreak and continue are two keywords that we can use to control the flow of\nexecution of the loop. break will stop the loop and move on to the code below the\nloop. continue will stop the current iteration and move back to the top of the loop,\nchecking the condition (or in the case of a for loop, performing the statement and\nthen checking the condition).\nWe will be using this array of car objects to demonstrate break and continue:\nlet cars = [\n{\nmodel: \"Golf\",\nmake: \"Volkswagen\",\nyear: 1999,\ncolor: \"black\",\n},\n{\nmodel: \"Picanto\",\nmake: \"Kia\",\nyear: 2020,\ncolor: \"red\",\n},\n{\nmodel: \"Peugeot\",\nmake: \"208\",\nyear: 2021,\ncolor: \"black\",\n},\n{\nmodel: \"Fiat\",\nmake: \"Punto\",\nyear: 2020,\ncolor: \"black\",\n}\n];\nWe will first have a closer look at break.\n[ 107 ]\nLoops\nbreak\nWe have already seen break in the switch statement. When break was executed, the\nswitch statement ended. This is not very different when it comes to loops: when the\nbreak statement is executed, the loop will end, even when the condition is still true.\nHere is a silly example to demonstrate how break works:\nfor (let i = 0; i < 10; i++) {\nconsole.log(i);\nif (i === 4) {\nbreak;\n}\n}\nIt looks like a loop that will log the numbers 0 to 10 (again excluding 10) to the\nconsole. There is a catch here though: as soon as i equals 4, we execute the break\ncommand. break ends the loop immediately, so no more loop code gets executed\nafterward.\nWe can also use break to stop looping through the array of cars when we have\nfound a car that matches our demands.\nfor (let i = 0; i < cars.length; i++) {\nif (cars[i].year >= 2020) {\nif (cars[i].color === \"black\") {\nconsole.log(\"I have found my new car:\", cars[i]);\nbreak;\n}\n}\n}\nAs soon as we run into a car with the year 2020 or later and the car is black, we will\nstop looking for other cars and just buy that one. The last car in the array would also\nhave been an option, but we did not even consider it because we found one already.\nThe code snippet will output this:\nI have found my new car: { model: 'Peugeot', make: '208', year: 2021,\ncolor: 'black' }\nHowever, often it is not a best practice to use break. If you can manage to work\nwith the condition of the loop to break out of the loop instead, this is a much better\npractice. It prevents you getting stuck in an infinite loop, and the code is easier to\nread.\n[ 108 ]\nChapter 5\nIf the condition of the loop is not an actual condition, but pretty much a run-forever\nkind of statement, the code gets hard to read.\nConsider the following code snippet:\nwhile (true) {\nif (superLongArray[0] != 42 && superLongArray.length > 0) {\nsuperLongArray.shift();\n} else {\nconsole.log(\"Found 42!\");\nbreak;\n}\n}\nThis would be better to write without break and without something terrible like\nwhile(true); you could do it like this:\nwhile (superLongArray.length > 0 && notFound) {\nif (superLongArray[0] != 42) {\nsuperLongArray.shift();\n} else {\nconsole.log(\"Found 42!\");\nnotFound = false;\n}\n}\nWith the second example, we can see the conditions of the loop easily, namely the\nlength of the array and a notFound flag. However, with while(true) we are kind\nof misusing the while concept. You want to specify the condition, and it should\nevaluate to true or false; this way your code is nice to read. If you say while(true),\nyou're actually saying forever, and the reader of your code will have to interpret it\nline by line to see what is going on and when the loop is ended by a workaround\nbreak statement.\ncontinue\nbreak can be used to quit the loop, and continue can be used to move on to the next\niteration of the loop. It quits the current iteration and moves back up to check the\ncondition and start a new iteration.\nHere you can see an example of continue:\nfor (let car of cars){\nif(car.color !== \"black\"){\n[ 109 ]\nLoops\ncontinue;\n}\nif (car.year >= 2020) {\nconsole.log(\"we could get this one:\", car);\n}\n}\nThe approach here is to just skip every car that is not black and consider all the\nothers that are not older than make year 2020 or later. The code will output this:\nwe could get this one: { model: 'Peugeot', make: '208', year: 2021,\ncolor: 'black' }\nwe could get this one: { model: 'Fiat', make: 'Punto', year: 2020,\ncolor: 'black' }\nBe careful with continue in a while loop. Without running it, what do you think the\nnext code snippet does?\n// let's only log the odd numbers to the console\nlet i = 1;\nwhile (i < 50) {\nif (i % 2 === 0){\ncontinue;\n}\nconsole.log(i);\ni++;\n}\nIt logs 1, and then it gets you stuck in an infinite loop, because continue gets hit\nbefore the value of i changes, so it will run into continue again, and again, and so\non. This can be fixed by moving the i++ up and subtracting 1 from i, like this:\nlet i = 1;\nwhile (i < 50) {\ni++;\nif ((i-1) % 2 === 0){\ncontinue;\n}\nconsole.log(i-1);\n}\n[ 110 ]\nChapter 5\nBut again, there is a better way without continue here. The chance of error is a lot\nsmaller:\nfor (let i = 1; i < 50; i = i + 2) {\nconsole.log(i);\n}\nAnd as you can see it is even shorter and more readable. The value of break and\ncontinue usually comes in when you are looping over large data sets, possibly\ncoming from outside your application. Here you'll have less influence to apply other\ntypes of control. Using break and continue is not a best practice for simple basic\nexamples, but it's a great way to get familiar with the concepts.\nPractice exercise 5.8\nThis exercise will demonstrate how to create a string with all the digits as it loops\nthrough them. We can also set a value to skip by adding a condition that will use\ncontinue, skipping the matching condition. A second option is to do the same\nexercise and use the break keyword.\n1. Set up a string variable to use as output.\n2. Select a number to skip, and set that number as a variable.\n3. Create a for loop that counts to 10.\n4. Add a condition to check if the value of the looped variable is equal to the\nnumber that should be skipped.\n5. If the number is to be skipped in the condition, continue to the next number.\n6. As you iterate through the values, append the new count value to the end of\nthe main output variable.\n7. Output the main variable after the loop completes.\n8. Reuse the code, but change the continue to break and see the difference. It\nshould now stop at the skip value.\nbreak, continue, and nested loops\nbreak and continue can be used in nested loops as well, but it is important to know\nthat when break or continue is used in a nested loop, the outer loop will not break.\n[ 111 ]\nLoops\nWe will use this array of arrays to discuss break and continue in nested loops:\nlet groups = [\n[\"Martin\", \"Daniel\", \"Keith\"],\n[\"Margot\", \"Marina\", \"Ali\"],\n[\"Helen\", \"Jonah\", \"Sambikos\"],\n];\nLet's break down this example. We are looking for all the groups that have two\nnames starting with an M. If we find such a group, we will log it.\nfor (let i = 0; i < groups.length; i++) {\nlet matches = 0;\nfor (let j = 0; j < groups[i].length; j++) {\nif(groups[i][j].startsWith(\"M\")){\nmatches++;\n} else {\ncontinue;\n}\nif (matches === 2){\nconsole.log(\"Found a group with two names starting with an M:\");\nconsole.log(groups[i]);\nbreak;\n}\n}\n}\nWe first loop over the top-level arrays and set a counter, matches, with a start value\nof 0, and for each of these top-level arrays, we are going to loop over the values.\nWhen a value starts with an M, we increase matches by one and check whether we\nhave found two matches already. If we find two Ms, we break out of the inner loop\nand continue in our outer loop. This one will move on to the next top-level array,\nsince nothing is happening after the inner loop.\nIf the name does not start with an M, we do not need to check for matches being 2,\nand we can continue to the next value in the inner array.\nTake a look at this example: what do you think it will log?\nfor (let group of groups){\nfor (let member of group){\nif (member.startsWith(\"M\")){\nconsole.log(\"found one starting with M:\", member);\n[ 112 ]\nChapter 5\nbreak;\n}\n}\n}\nIt will loop over the arrays, and for every array it will check the value to see if it\nstarts with an M. If it does, the inner loop will break. So, if one of the arrays in the\narray contains multiple values starting with M, only the first one will be found,\nsince the iteration over that array breaks and we continue to the next array.\nThis one will output:\nfound one starting with M: Martin\nfound one starting with M: Margot\nWe can see that it finds Margot, the first one from the second array, but it skips\nMarina, because it is the second one in the array. And it breaks after having found\none group, so it won't loop over the other elements in the inner array. It will continue\nwith the next array, which doesn't contain names starting with an M.\nIf we wanted to find groups that have a member with a name that starts with an M,\nthe previous code snippet would have been the way to go, because we are breaking\nthe inner loop as soon as we find a hit. This can be useful whenever you want to\nmake sure that an array in a data set contains at least one of something. Because of\nthe nature of the for of loop, it won't give the index or place where it found it. It will\nsimply break, and you have the value of the element of the array to use. If you need\nto know more, you can work with counters, which are updated every iteration.\nIf we want to see whether only one of all the names in the array of arrays starts\nwith an M, we would have to break out of the outer loop. This is something we can\ndo with labeled loops.\nbreak and continue and labeled blocks\nWe can break out of the outer loop from inside the inner loop, but only if we give a\nlabel to our loop. This can be done like this:\nouter:\nfor (let group of groups) {\ninner:\nfor (let member of group) {\nif (member.startsWith(\"M\")) {\nconsole.log(\"found one starting with M:\", member);\n[ 113 ]\nLoops\nbreak outer;\n}\n}\n}\nWe are giving our block a label by putting a word and a colon in front of a code\nblock. These words can be pretty much anything (in our case, \"outer\" and \"inner\"),\nbut not JavaScript's own reserved words, such as for, if, break, else, and others.\nThis will only log the first name starting with an M:\nfound one starting with M: Martin\nIt will only log one, because it is breaking out of the outer loop and all the loops end\nas soon as they find one. In a similar fashion you can continue the outer loop as well.\nWhenever you want to be done as soon as you find one hit, this is the option to use.\nSo, for example, if you want check for errors and quit if there aren't any, this would\nbe the way to go.\nChapter project\nMath multiplication table\nIn this project, you will create a math multiplication table using loops. You can do\nthis using your own creativity or by following some of the following suggested steps:\n1. Set up a blank array to contain the final multiplication table.\n2. Set a value variable to specify how many values you want to multiply with\none another and show the results for.\n3. Create an outer for loop to iterate through each row and a temp array to store\nthe row values. Each row will be an array of cells that will be nested into the\nfinal table.\n4. Add an inner for loop for the column values, which will push the multiplied\nrow and column values to the temp array.\n5. Add the temporary row data that contains the calculated solutions to the\nmain array of the final table. The final result will add a row of values for the\ncalculations.\n[ 114 ]\nChapter 5\nSelf-check quiz\n1. What is the expected output for the following code?\nlet step = 3;\nfor (let i = 0; i < 1000; i += step) {\nif (i > 10) {\nbreak;\n}\nconsole.log(i);\n}\n2. What is the final value for myArray, and what is expected in the console?\nconst myArray = [1,5,7];\nfor(el in myArray){\nconsole.log(Number(el));\nel = Number(el) + 5;\nconsole.log(el);\n}\nconsole.log(myArray);\nSummary\nIn this chapter we introduced the concept of loops. Loops enable us to repeat a\ncertain block of code. We need some sort of condition when we loop, and as long as\nthat condition is true, we'll keep looping. As soon as it changes to false, we end our\nloop.\nWe have seen the while loop, in which we just insert a condition, and as long as\nthat condition is true we keep looping. If the condition is never true, we won't even\nexecute the loop code once.\nThis is different for the do while loop. We always execute the code once, and then\nwe start to check a condition. If this condition is true, we execute the code again and\ndo so until the condition becomes false. This can be useful when working with input\nfrom outside, such as user input. We would need to request it once, and then we can\nkeep on requesting it again until it is valid.\n[ 115 ]\nLoops\nThen we saw the for loop, which has a slightly different syntax. We have to specify a\nvariable, check a condition (preferably using that variable, but this is not mandatory),\nand then specify an action to be executed after every iteration. Again, it's preferable\nfor the action to include the variable from the first part of the for loop. This gives us\ncode that is to be executed as long as a condition is true.\nWe also saw two ways to loop over arrays and objects, for in and for of. The for\nin loop loops over keys and for of loops over values. They go over every element\nin a collection. The advantage of these loops is that JavaScript controls the execution:\nyou can't miss an element or get stuck in an infinite loop.\nLastly, we saw break and continue. We can use the break keyword to end a loop\nimmediately and the continue keyword to end the current iteration and go back to\nthe top and start the next iteration, if the condition is still true, that is.\nIn the next chapter we are going to be adding a really powerful tool to our JavaScript\ntoolbox: functions! They allow us to take our coding skills to the next level and\nstructure our code better.\n[ 116 ]\n6\nFunctions\nYou have seen quite a lot of JavaScript already, and now you are ready for functions.\nSoon you will see that you have been using functions already, but now it is time\nto learn how to start writing your own. Functions are a great building block that\nwill reduce the amount of code you will need in your app. You can call a function\nwhenever you need it, and you can write it as a kind of template with variables. So,\ndepending on how you've written it, you can reuse it in many situations.\nThey do require you to think differently about the structure of your code and this\ncan be hard, especially in the beginning. Once you have got the hang of this way of\nthinking, functions will really help you to write nicely structured, reusable, and low-\nmaintenance code. Let's dive into this new abstraction layer!\nAlong the way, we will cover the following topics:\n\u2022 Basic functions\n\u2022 Function arguments\n\u2022 Return\n\u2022 Variable scope in functions\n\u2022 Recursive functions\n\u2022 Nested functions\n\u2022 Anonymous functions\n\u2022 Function callbacks\nNote: exercise, project and self-check quiz answers can be found in\nthe Appendix.\n[ 117 ]\nFunctions\nBasic functions\nWe have been calling functions for a while already. Remember prompt(), console.\nlog(), push(), and sort() for arrays? These are all functions. Functions are a group\nof statements, variable declarations, loops, and so on that are bundled together.\nCalling a function means an entire group of statements will get executed.\nFirst, we are going to have a look at how we can invoke functions, and then we will\nsee how to write functions of our own.\nInvoking functions\nWe can recognize functions by the parentheses at the end. We can invoke functions\nlike this:\nnameOfTheFunction();\nfunctionThatTakesInput(\"the input\", 5, true);\nThis is invoking a function called nameOfTheFunction with no arguments, and a\nfunction called functionThatTakesInput with three required arguments. Let's have\na look at what functions can look like when we start writing them.\nWriting functions\nWriting a function can be done using the function keyword. Here is the template\nsyntax to do so:\nfunction nameOfTheFunction() {\n//content of the function\n}\nThe above function can be called like this:\nnameOfTheFunction();\nLet's write a function that asks for your name and then greets you:\nfunction sayHello() {\nlet you = prompt(\"What's your name? \");\nconsole.log(\"Hello\", you + \"!\");\n}\n[ 118 ]\nChapter 6\nWe add a space after the question mark to ensure the user starts typing their answer\none space away from the question mark, rather than directly afterward. We call this\nfunction like this:\nsayHello();\nIt will prompt:\nWhat's your name? >\nLet's go ahead and enter our name. The output will be:\nHello Maaike!\nTake a moment to consider the relationship between functions and variables. As\nyou have seen, functions can contain variables, which shape how they operate. The\nopposite is also true: variables can contain functions. Still with me? Here you can\nsee an example of a variable containing a function (varContainingFunction) and a\nvariable inside a function (varInFunction):\nlet varContainingFunction = function() {\nlet varInFunction = \"I'm in a function.\";\nconsole.log(\"hi there!\", varInFunction);\n};\nvarContainingFunction();\nVariables contain a certain value and are something; they do not do anything.\nFunctions are actions. They are a bundle of statements that can be executed when\nthey get called. JavaScript will not run the statements when the functions do not get\ninvoked. We will return to the idea of storing functions in variables, and consider\nsome of the benefits, in the Anonymous functions section, but for now let's move on to\nlook at the best way to name your functions.\nNaming functions\nGiving your function a name might seem like a trivial task, but there are some best\npractices to keep in mind here. To keep it short:\n\u2022 Use camelCase for your functions: this means that the first word starts with a\nlowercase letter and new words start with a capital. That makes it a lot easier\nto read and keeps your code consistent.\n\u2022 Make sure that the name describes what the function is doing: it's better to\ncall a number addition function addNumbers than myFunc.\n[ 119 ]\nFunctions\n\u2022 Use a verb to describe what the function is doing: make it an action. So\ninstead of hiThere, call it sayHi.\nPractice exercise 6.1\nSee if you can write a function for yourself. We want to write a function that adds\ntwo numbers.\n1. Create a function that takes two parameters, adds the parameters together,\nand returns the result.\n2. Set up two different variables with two different values.\n3. Use your function on the two variables, and output the result using\nconsole.log.\n4. Create a second call to the function using two more numbers as arguments\nsent to the function.\nPractice exercise 6.2\nWe are going to create a program that will randomly describe an inputted name.\n1. Create an array of descriptive words.\n2. Create a function that contains a prompt asking the user for a name.\n3. Select a random value from the array using Math.random.\n4. Output into the console the prompt value and the randomly selected array\nvalue.\n5. Invoke the function.\nParameters and arguments\nYou may have noticed that we are talking about parameters and arguments. Both\nterms are commonly used to mean the information that is passed into a function:\nfunction tester(para1, para2){\nreturn para1 + \" \" + para2;\n}\nconst arg1 = \"argument 1\";\nconst arg2 = \"argument 2\";\ntester(arg1, arg2);\n[ 120 ]\nChapter 6\nA parameter is defined as the variable listed inside the parentheses of the function\ndefinition, which defines the scope of the function. They are declared like so:\nfunction myFunc(param1, param2) {\n// code of the function;\n}\nA practical example could be the following, which takes x and y as parameters:\nfunction addTwoNumbers(x, y) {\nconsole.log(x + y);\n}\nWhen called, this function will simply add the parameters and log the result.\nHowever, to do this, we can call the function with arguments:\nmyFunc(\"arg1\", \"arg2\");\nWe have seen various examples of arguments; for example:\nconsole.log(\"this is an argument\");\nprompt(\"argument here too\");\nlet arr = [];\narr.push(\"argument\");\nDepending on the arguments you are calling with the function, the outcome of the\nfunction can change, which makes the function a very powerful and flexible building\nblock. A practical example using our addTwoNumbers() function looks like this:\naddTwoNumbers(3, 4);\naddTwoNumbers(12,-90);\nThis will output:\n7\n-78\nAs you can see, the function has a different outcome for both calls. This is because\nwe call it with different arguments, which take the place of x and y, that are sent to\nthe function to be used within the function scope.\n[ 121 ]\nFunctions\nPractice exercise 6.3\nCreate a basic calculator that takes two numbers and one string value indicating\nan operation. If the operation equals add, the two numbers should be added. If the\noperation equals subtract, the two numbers should be subtracted from one another.\nIf there is no option specified, the value of the option should be add.\nThe result of this function needs to be logged. Test your function by invoking it\nwith different operators and no operator specified.\n1. Set up two variables containing number values.\n2. Set up a variable to hold an operator, either + or -.\n3. Create a function that retrieves the two values and the operator string value\nwithin its parameters. Use those values with a condition to check if the\noperator is + or -, and add or subtract the values accordingly (remember if\nnot presented with a valid operator, the function should default to addition).\n4. Within console.log(), call the function using your variables and output\nthe response to the console.\n5. Update the operator value to be the other operator type\u2014either plus or\nminus\u2014and call to the function again with the new updated arguments.\nDefault or unsuitable parameters\nWhat happens if we call our addTwoNumbers() function without any arguments?\nTake a moment and decide what you think this should do:\naddTwoNumbers();\nSome languages might crash and cry, but not JavaScript. JavaScript just gives the\nvariables a default type, which is undefined. And undefined + undefined equals:\nNaN\nInstead, we could tell JavaScript to take different default parameters. And that can\nbe done like this:\nfunction addTwoNumbers(x = 2, y = 3) {\nconsole.log(x + y);\n}\n[ 122 ]\nChapter 6\nIf you call the function with no arguments now, it will automatically assign 2 to x\nand 3 to y, unless you override them by calling the function with arguments. The\nvalues that are used for invoking are prioritized over hardcoded arguments. So,\ngiven the above function, what will the output of these function calls be?\naddTwoNumbers();\naddTwoNumbers(6, 6);\naddTwoNumbers(10);\nThe output will be:\n5\n12\n13\nThe first one has the default values, so x is 2 and y is 3. The second one assigns 6 to\nboth x and y. The last one is a bit less obvious. We are only giving one argument, so\nwhich one will be given this value? Well, JavaScript does not like to overcomplicate\nthings. It simply assigns the value to the first parameter, x. Therefore, x becomes 10\nand y gets its default value 3, and together that makes 13.\nIf you call a function with more arguments than parameters, nothing will happen.\nJavaScript will just execute the function using the first arguments that can be\nmapped to parameters. Like this:\naddTwoNumbers(1,2,3,4);\nThis will output:\n3\nIt is just adding 1 and 2 and ignoring the last two arguments (3 and 4).\nSpecial functions and operators\nThere are a few special ways of writing functions, as well as some special operators\nthat will come in handy. We are talking about arrow functions and the spread and\nrest operators here. Arrow functions are great for sending functions around as\nparameters and using shorter notations. The spread and rest operators make our\nlives easier and are more flexible when sending arguments and working with arrays.\n[ 123 ]\nFunctions\nArrow functions\nArrow functions are a special way of writing functions that can be confusing at first.\nTheir use looks like this:\n(param1, param2) => body of the function;\nOr for no parameters:\n() => body of the function;\nOr for one parameter (no parentheses are needed here):\nparam => body of the function;\nOr for a multiline function with two parameters:\n(param1, param2) => {\n// line 1;\n// any number of lines;\n};\nArrow functions are useful whenever you want to write an implementation on the\nspot, such as inside another function as an argument. This is because they are a\nshorthand notation for writing functions. They are most often used for functions that\nconsist of only one statement. Let's start with a simple function that we will rewrite\nto an arrow function:\nfunction doingStuff(x) {\nconsole.log(x);\n}\nTo rewrite this as an arrow function, you will have to store it in a variable or send it\nin as an argument if you want to be able to use it. We use the name of the variable to\nexecute the arrow function. In this case we only have one parameter, so it's optional\nto surround it with parentheses. We can write it like this:\nlet doingArrowStuff = x => console.log(x);\nAnd invoke it like this:\ndoingArrowStuff(\"Great!\");\n[ 124 ]\nChapter 6\nThis will log Great! to the console. If there is more than one argument, we will have\nto use parentheses, like this:\nlet addTwoNumbers = (x, y) => console.log(x + y);\nWe can call it like this:\naddTwoNumbers(5, 3);\nAnd then it will log 8 to the console. If there are no arguments, you must use the\nparentheses, like this:\nlet sayHi = () => console.log(\"hi\");\nIf we call sayHi(), it will log hi to the console.\nAs a final example, we can combine the arrow function with certain built-in methods.\nFor example, we can use the foreach() method on an array. This method executes a\ncertain function for every element in the array. Have a look at this example:\nconst arr = [\"squirrel\", \"alpaca\", \"buddy\"];\narr.forEach(e => console.log(e));\nIt outputs:\nsquirrel\nalpaca\nbuddy\nFor every element in the array, it takes the element as input and executing the arrow\nfunction for it. In this case, the function is to log the element. So the output is every\nsingle element in the array.\nUsing arrow functions combined with built-in functions is very powerful. We can do\nsomething for every element in the array, without counting or writing a complicated\nloop. We'll see more examples of great use cases for arrow functions later on.\nSpread operator\nThe spread operator is a special operator. It consists of three dots used before a\nreferenced expression or string, and it spreads out the arguments or elements of an\narray.\n[ 125 ]\nFunctions\nThis might sound very complicated, so let's look at a simple example:\nlet spread = [\"so\", \"much\", \"fun\"];\nlet message = [\"JavaScript\", \"is\", ...spread, \"and\", \"very\",\n\"powerful\"];\nThe value of this array becomes:\n['JavaScript', 'is', 'so', 'much', 'fun', 'and', 'very', 'powerful']\nAs you can see, the elements of the spread operator become individual elements in\nthe array. The spread operator spreads the array to individual elements in the new\narray. It can also be used to send multiple arguments to a function, like this:\nfunction addTwoNumbers(x, y) {\nconsole.log(x + y);\n}\nlet arr = [5, 9];\naddTwoNumbers(...arr);\nThis will log 14 to the console, since it is the same as calling the function with:\naddTwoNumbers(5, 9);\nThis operator avoids having to copy a long array or string into a function, which\nsaves time and reduces code complexity. You can call a function with multiple\nspread operators. It will use all the elements of the arrays as input. Here's an\nexample:\nfunction addFourNumbers(x, y, z, a) {\nconsole.log(x + y + z + a);\n}\nlet arr = [5, 9];\nlet arr2 = [6, 7];\naddFourNumbers(...arr, ...arr2);\nThis will output 27 to the console, calling the function like this:\naddFourNumbers(5, 9, 6, 7);\n[ 126 ]\nChapter 6\nRest parameter\nSimilar to the spread operator, we have the rest parameter. It has the same symbol as\nthe spread operator, but it is used inside the function parameter list. Remember what\nwould happen if we were to send an argument too many times, as here:\nfunction someFunction(param1, param2) {\nconsole.log(param1, param2);\n}\nsomeFunction(\"hi\", \"there!\", \"How are you?\");\nThat's right. Nothing really: it would just pretend we only sent in two arguments and\nlog hi there!. If we use the rest parameter, it allows us to send in any number of\narguments and translate them into a parameter array. Here is an example:\nfunction someFunction(param1, ...param2) {\nconsole.log(param1, param2);\n}\nsomeFunction(\"hi\", \"there!\", \"How are you?\");\nThis will log:\nhi [ 'there!', 'How are you?' ]\nAs you can see, the second parameter has changed into an array, containing our\nsecond and third arguments. This can be useful whenever you are not sure what\nnumber of arguments you will get. Using the rest parameter allows you to process\nthis variable number of arguments, for example, using a loop.\nReturning function values\nWe are still missing a very important piece to make functions as useful as they are:\nthe return value. Functions can give back a result when we specify a return value.\nThe return value can be stored in a variable. We have done this already \u2013 remember\nprompt()?\nlet favoriteSubject = prompt(\"What is your favorite subject?\");\n[ 127 ]\nFunctions\nWe are storing the result of our prompt() function in the variable favoriteSubject,\nwhich in this case would be whatever the user specifies. Let's see what happens if we\nstore the result of our addTwoNumbers() function and log that variable:\nlet result = addTwoNumbers(4, 5);\nconsole.log(result);\nYou may or may not have guessed it\u2014this logs the following:\n9\nundefined\nThe value 9 is written to the console because addTwoNumbers() contains a\nconsole.log() statement. The console.log(result) line outputs undefined, because\nnothing is inserted into the function to store the result, meaning our function\naddTwoNumbers() does not send anything back. Since JavaScript does not like to\ncause trouble and crash, it will assign undefined. To counter this, we can rewrite\nour addTwoNumbers() function to actually return the value instead of logging it. This\nis much more powerful because we can store the result and continue working with\nthe result of this function in the rest of our code:\nfunction addTwoNumbers(x, y) {\nreturn x + y;\n}\nreturn ends the function and sends back whatever value comes after return. If it is\nan expression, like the one above, it will evaluate the expression to one result and\nthen return that to where it was called (the result variable, in this instance):\nlet result = addTwoNumbers(4, 5);\nconsole.log(result);\nWith these adjustments made, the code snippet logs 9 to the terminal.\nWhat do you think this code does?\nlet resultsArr = [];\nfor(let i = 0; i < 10; i ++){\nlet result = addTwoNumbers(i, 2*i);\nresultsArr.push(result);\n}\nconsole.log(resultsArr);\n[ 128 ]\nChapter 6\nIt logs an array of all the results to the screen. The function is being called in a loop.\nThe first iteration, i, equals 0. Therefore, the result is 0. The last iteration, i, equals 9,\nand therefore the last value of the array equals 27. Here are the results:\n[\n0, 3, 6, 9, 12,\n15, 18, 21, 24, 27\n]\nPractice exercise 6.4\nModify the calculator that you made in Practice exercise 6.2 to return added values\ninstead of printing them. Then, call the function 10 or more times in a loop, and store\nthe results in an array. Once the loop finishes, output the final array into the console.\n1. Set up an empty array to store the values that will be calculated within the\nloop.\n2. Create a loop that runs 10 times, incrementing by 1 each time, creating two\nvalues each iteration. For the first value, multiply the value of the loop count\nby 5. For the second value, multiply the value of the loop counter by itself.\n3. Create a function that returns the value of the two parameters passed into the\nfunction when it is called. Add the values together, returning the result.\n4. Within the loop, call the calculation function, passing in the two values as\narguments into the function and storing the returned result in a response\nvariable.\n5. Still within the loop, push the result values into the array as it iterates\nthrough the loop.\n6. After the loop is complete, output the value of the array into the console.\n7. You should see the values [0, 6, 14, 24, 36, 50, 66, 84, 104, 126] for\nthe array in the console.\nReturning with arrow functions\nIf we have a one-line arrow function, we can return without using the keyword\nreturn. So if we want to rewrite the function, we can write it like this to make an\narrow function out of it:\nlet addTwoNumbers = (x, y) => x + y;\n[ 129 ]\nFunctions\nAnd we can call it and store the result like this:\nlet result = addTwoNumbers(12, 15);\nconsole.log(result);\nThis will then log 27 to the console. If it's a multiline function, you will have to use\nthe keyword return as demonstrated in the previous section. So, for example:\nlet addTwoNumbers = (x, y) => {\nconsole.log(\"Adding...\");\nreturn x + y;\n}\nVariable scope in functions\nIn this section, we will discuss a topic that is often considered challenging. We will\ntalk about scope. Scope defines where you can access a certain variable. When a\nvariable is in scope, you can access it. When a variable is out of scope, you cannot\naccess the variable. We will discuss this for both local and global variables.\nLocal variables in functions\nLocal variables are only in scope within the function they are defined. This is true\nfor let variables and var variables. There is a difference between them, which we\nwill touch upon here as well. The function parameters (they do not use let or var)\nare also local variables. This might sound very vague, but the next code snippet will\ndemonstrate what this means:\nfunction testAvailability(x) {\nconsole.log(\"Available here:\", x);\n}\ntestAvailability(\"Hi!\");\nconsole.log(\"Not available here:\", x);\nThis will output:\nAvailable here: Hi!\nReferenceError: x is not defined\nWhen called inside the function, x will be logged. The statement outside of the\nfunction fails, because x is a local variable to the function testAvailability(). This is\nshowing that the function parameters are not accessible outside of the function.\n[ 130 ]\nChapter 6\nThey are out of scope outside the function and in scope inside the function. Let's\nhave a look at a variable defined inside a function:\nfunction testAvailability() {\nlet y = \"Local variable!\";\nconsole.log(\"Available here:\", y);\n}\ntestAvailability();\nconsole.log(\"Not available here:\", y);\nThis shows the following on the console:\nAvailable here: Local variable!\nReferenceError: y is not defined\nVariables defined inside the function are not available outside the function either.\nFor beginners, it can be confusing to combine local variables and return. Right now,\nwe're telling you the local variables declared inside a function are not available\noutside of the function, but with return you can make their values available outside\nthe function. So if you need their values outside a function, you can return the\nvalues. The key word here is values! You cannot return the variable itself. Instead, a\nvalue can be caught and stored in a different variable, like this:\nfunction testAvailability() {\nlet y = \"I'll return\";\nconsole.log(\"Available here:\", y);\nreturn y;\n}\nlet z = testAvailability();\nconsole.log(\"Outside the function:\", z);\nconsole.log(\"Not available here:\", y);\nSo, the returned value I'll return that was assigned to local variable y gets\nreturned and stored in variable z.\nThis variable z could actually also have been called y, but that\nwould have been confusing since it still would have been a\ndifferent variable.\n[ 131 ]\nFunctions\nThe output of this code snippet is as follows:\nAvailable here: I'll return\nOutside the function: I'll return\nReferenceError: y is not defined\nlet versus var variables\nThe difference between let and var is that var is function-scoped, which is the\nconcept we described above. let is actually not function-scoped but block-scoped. A\nblock is defined by two curly braces { }. The code within those braces is where let is\nstill available.\nLet's see this distinction in action:\nfunction doingStuff() {\nif (true) {\nvar x = \"local\";\n}\nconsole.log(x);\n}\ndoingStuff();\nThe output of this snippet will be:\nlocal\nIf we use var, the variable becomes function-scoped and is available anywhere in the\nfunction block (even before defining with the value undefined). Thus, after the if\nblock has ended, x can still be accessed.\nHere is what happens with let:\nfunction doingStuff() {\nif (true) {\nlet x = \"local\";\n}\nconsole.log(x);\n}\ndoingStuff();\nThis will produce the following output:\nReferenceError: x is not defined\n[ 132 ]\nChapter 6\nHere we get the error that x is not defined. Since let is only block-scoped, x goes\nout of scope when the if block ends and can no longer be accessed after that.\nA final difference between let and var relates to the order of declaration in a script.\nTry using the value of x before having defined it with let:\nfunction doingStuff() {\nif (true) {\nconsole.log(x);\nlet x = \"local\";\n}\n}\ndoingStuff();\nThis will give a ReferenceError that x is not initialized. This is because variables\ndeclared with let cannot be accessed before being defined, even within the same\nblock. What do you think will happen for a var declaration like this?\nfunction doingStuff() {\nif (true) {\nconsole.log(x);\nvar x = \"local\";\n}\n}\ndoingStuff();\nThis time, we won't get an error. When we use a var variable before the define\nstatement, we simply get undefined. This is due to a phenomenon called hoisting,\nwhich means using a var variable before it's been declared results in the variable\nbeing undefined rather than giving a ReferenceError.\nHoisting, and how to negate its effects if needed, are more complex\ntopics that we will cover in Chapter 12, Intermediate JavaScript.\nconst scope\nConstants are block-scoped, just like let. This is why the scope rules here are similar\nto those for let. Here is an example:\nfunction doingStuff() {\nif (true) {\n[ 133 ]\nFunctions\nconst X = \"local\";\n}\nconsole.log(X);\n}\ndoingStuff();\nThis will produce the following output:\nReferenceError: X is not defined\nUsing a const variable before having defined it will also give a ReferenceError, just\nas it does for a let variable.\nGlobal variables\nAs you might have guessed, global variables are variables declared outside a\nfunction and not in some other code block. Variables are accessible in the scope\n(either function or block) where they're defined, plus any \"lower\" scopes. So, a\nvariable defined outside of a function is available within the function as well as\ninside any functions or other code blocks inside that function. A variable defined at\nthe top level of your program is therefore available everywhere in your program.\nThis concept is called a global variable. You can see an example here:\nlet globalVar = \"Accessible everywhere!\";\nconsole.log(\"Outside function:\", globalVar);\nfunction creatingNewScope(x) {\nconsole.log(\"Access to global vars inside function.\" , globalVar);\n}\ncreatingNewScope(\"some parameter\");\nconsole.log(\"Still available:\", globalVar);\nThis will output:\nOutside function: Accessible everywhere!\nAccess to global vars inside function. Accessible everywhere!\nStill available: Accessible everywhere!\n[ 134 ]\nChapter 6\nAs you can see, global variables are accessible from everywhere because they are not\ndeclared in a block. They are always in scope after they have been defined\u2014it doesn't\nmatter where you use them. However, you can hide their accessibility inside a\nfunction by specifying a new variable with the same name inside that scope; this can\nbe done for let, var, and const. (This is not changing the value of the const variable;\nyou are creating a new const variable that is going to override the first one in the\ninner scope.) In the same scope, you cannot specify two let or two const variables\nwith the same name. You can do so for var, but you shouldn't do so, in order to\navoid confusion.\nIf you create a variable with the same name inside a function, that variable's value\nwill be used whenever you refer to that variable name within the scope of that\nparticular function. Here you can see an example:\nlet x = \"global\";\nfunction doingStuff() {\nlet x = \"local\";\nconsole.log(x);\n}\ndoingStuff();\nconsole.log(x);\nThis will output:\nlocal\nglobal\nAs you can see, the value of x inside the doingStuff() function is local. However,\noutside the function the value is still global. This means that you'll have to be extra\ncareful about mixing up names in local and global scopes. It is usually better to\navoid this.\nThe same is also true for parameter names. If you have the same parameter name as\na global variable, the value of the parameter will be used:\nlet x = \"global\";\nfunction doingStuff(x) {\nconsole.log(x);\n}\ndoingStuff(\"param\");\n[ 135 ]\nFunctions\nThis will log param.\nThere is a danger in relying on global variables too much. This is something you\nwill come across soon when your applications grow. As we just saw, local variables\noverride the value of global variables. It is best to work with local variables in\nfunctions; this way, you have more control over what you are working with. This\nmight be a bit vague for now, but it will become clear when coding in the wild as\nthings get bigger and more lines and files of code get involved.\nThere is only one more very important point to be made about scopes for now.\nLet's start with an example and see if you can figure out what this should log:\nfunction confuseReader() {\nx = \"Guess my scope...\";\nconsole.log(\"Inside the function:\", x);\n}\nconfuseReader();\nconsole.log(\"Outside of function:\", x);\nAnswer ready? Here is the output:\nInside the function: Guess my scope...\nOutside of function: Guess my scope...\nDo not close the book\u2014we'll explain what is going on. If you look carefully, the x in\nthe function gets defined without the keyword let or var. There is no declaration of\nx above the code; this is all the code of the program. JavaScript does not see let or\nvar and then decides, \"this must be a global variable.\" Even though it gets defined\ninside the function, the declaration of x within the function gets global scope and can\nstill be accessed outside of the function.\nWe really want to emphasize that this is a terrible practice. If you need a global\nvariable, declare it at the top of your file.\nImmediately invoked function expression\nThe immediately invoked function expression (IIFE) is a way of expressing a\nfunction so that it gets invoked immediately. It is anonymous, it doesn't have a\nname, and it is self-executing.\nThis can be useful when you want to initialize something using this function. It is\nalso used in many design patterns, for example, to create private and public variables\nand functions.\n[ 136 ]\nChapter 6\nThis has to do with where functions and variables are accessible from. If you have an\nIIFE in the top-level scope, whatever is in there is not accessible from outside even\nthough it is top level.\nHere is how to define it:\n(function () {\nconsole.log(\"IIFE!\");\n})();\nThe function itself is surrounded by parentheses, which makes it create a function\ninstance. Without these parentheses around it, it would throw an error because our\nfunction does not have a name (this is worked around by assigning the function to a\nvariable, though, where the output can be returned to the variable).\n(); executes the unnamed function\u2014this must be done immediately following a\nfunction declaration. If your function were to require a parameter, you would pass it\nin within these final brackets.\nYou could also combine IIFE with other function patterns. For example, you could\nuse an arrow function here to make the function even more concise:\n(()=>{\nconsole.log(\"run right away\");\n})();\nAgain, we use (); to invoke the function that you created.\nPractice exercise 6.5\nUse IIFE to create a few immediately invoked functions and observe how the scope is\naffected.\n1. Create a variable value with let and assign a string value of 1000 to it.\n2. Create an IIFE function and within this function scope assign a new value to\na variable of the same name. Within the function, print the local value to the\nconsole.\n3. Create an IIFE expression, assigning it to a new result variable, and assign\na new value to a variable of the same name within this scope. Return this\nlocal value to the result variable and invoke the function. Print the result\nvariable, along with the variable name you've been using: what value does it\ncontain now?\n[ 137 ]\nFunctions\n4. Lastly, create an anonymous function that has a parameter. Add logic that\nwill assign a passed-in value to the same variable name as the other steps,\nand print it as part of a string sentence. Invoke the function and pass in your\ndesired value within the rounded brackets.\nRecursive functions\nIn some cases, you want to call the same function from inside the function. It can be\na beautiful solution to rather complex problems. There are some things to keep in\nmind though. What do you think this will do?\nfunction getRecursive(nr) {\nconsole.log(nr);\ngetRecursive(--nr);\n}\ngetRecursive(3);\nIt prints 3 and then counts down and never stops. Why is it not stopping? Well, we\nare not saying when it should stop. Look at our improved version:\nfunction getRecursive(nr) {\nconsole.log(nr);\nif (nr > 0) {\ngetRecursive(--nr);\n}\n}\ngetRecursive(3);\nThis function is going to call itself until the value of the parameter is no longer\nbigger than 0. And then it stops.\nWhat happens when we call a function recursively is that it goes one function deeper\nevery time. The first function call is done last. For this function it goes like this:\n\u2022 getRecursive(3)\n\u2022 getRecursive(2)\n\u2022 getRecursive(1)\n\u2022 getRecursive(0)\n\u2022 done with getRecursive(0) execution\n[ 138 ]\nChapter 6\n\u2022 done with getRecursive(1) execution\n\u2022 done with getRecursive(2) execution\n\u2022 done with getRecursive(3) execution\nThe next recursive function will demonstrate that:\nfunction logRecursive(nr) {\nconsole.log(\"Started function:\", nr);\nif (nr > 0) {\nlogRecursive(nr - 1);\n} else {\nconsole.log(\"done with recursion\");\n}\nconsole.log(\"Ended function:\", nr);\n}\nlogRecursive(3);\nIt will output:\nStarted function: 3\nStarted function: 2\nStarted function: 1\nStarted function: 0\ndone with recursion\nEnded function: 0\nEnded function: 1\nEnded function: 2\nEnded function: 3\nRecursive functions can be great in some contexts. When you feel the need to call\nthe same function over and over again in a loop, you should probably consider\nrecursion. An example could also be searching for something. Instead of looping\nover everything inside the same function, you can split up inside the function and\ncall the function repeatedly from the inside.\nHowever, it must be kept in mind that in general, the performance of recursion is\nslightly worse than the performance of regular iteration using a loop. So if this causes\na bottleneck situation that would really slow down your application, then you might\nwant to consider another approach.\nHave a look at calculating the factorial using recursive functions in the following\nexercise.\n[ 139 ]\nFunctions\nPractice exercise 6.6\nA common problem that we can solve with recursion is calculating the factorial.\nQuick mathematics refresher about factorials:\nThe factorial of a number is the product of all positive integers\nbigger than 0, up to the number itself. So for example, the factorial\nof seven is 7 * 6 * 5 * 4 * 3 * 2 * 1. You can write this as 7!.\nHow are recursive functions going to help us calculate the factorial? We are going to\ncall the function with a lower number until we reach 0. In this exercise, we will use\nrecursion to calculate the factorial result of a numeric value set as the argument of a\nfunction.\n1. Create a function that contains a condition within it checking if the argument\nvalue is 0.\n2. If the parameter is equal to 0, it should return the value of 1. Otherwise, it\nshould return the value of the argument multiplied by the value returned\nfrom the function itself, subtracting one from the value of the argument\nthat is provided. This will result in running the block of code until the value\nreaches 0.\n3. Invoke the function, providing an argument of whatever number you want\nto find the factorial of. The code should run whatever number is passed\ninitially into the function, decreasing all the way to 0 and outputting the\nresults of the calculation to the console. It could also contain a console.log()\ncall to print the current value of the argument in the function as it gets\ninvoked.\n4. Change and update the number to see how it affects the results.\nNested functions\nJust as with loops, if statements, and actually all other building blocks, we can have\nfunctions inside functions. This phenomenon is called nested functions:\nfunction doOuterFunctionStuff(nr) {\nconsole.log(\"Outer function\");\ndoInnerFunctionStuff(nr);\nfunction doInnerFunctionStuff(x) {\nconsole.log(x + 7);\n[ 140 ]\nChapter 6\nconsole.log(\"I can access outer variables:\", nr);\n}\n}\ndoOuterFunctionStuff(2);\nThis will output:\nOuter function\n9\nI can access outer variables: 2\nAs you can see, the outer function is calling its nested function. This nested function\nhas access to the variables of the parent. The other way around, this is not the case.\nVariables defined inside the inner function have function scope. This means they are\naccessible inside the function where they are defined, which is in this case the inner\nfunction. Thus, this will throw a ReferenceError:\nfunction doOuterFunctionStuff(nr) {\ndoInnerFunctionStuff(nr);\nfunction doInnerFunctionStuff(x) {\nlet z = 10;\n}\nconsole.log(\"Not accessible:\", z);\n}\ndoOuterFunctionStuff(2);\nWhat do you think this will do?\nfunction doOuterFunctionStuff(nr) {\ndoInnerFunctionStuff(nr);\nfunction doInnerFunctionStuff(x) {\nlet z = 10;\n}\n}\ndoInnerFunctionStuff(3);\nThis will also throw a ReferenceError. Now, doInnerFunctionStuff() is\ndefined inside the outer function, which means that it is only in scope inside\ndoOuterFunctionStuff(). Outside this function, it is out of scope.\n[ 141 ]\nFunctions\nPractice exercise 6.7\nCreate a countdown loop starting at a dynamic value of 10.\n1. Set the start variable at a value of 10, which will be used as the starting\nvalue for the loop.\n2. Create a function that takes one argument, which is the countdown value.\n3. Within the function, output the current value of the countdown into the\nconsole.\n4. Add a condition to check if the value is less than 1; if it is, then return the\nfunction.\n5. Add a condition to check if the value of the countdown is not less than 1,\nthen continue to loop by calling the function within itself.\n6. Make sure you add a decrement operator on the countdown so the preceding\ncondition eventually will be true to end the loop. Every time it loops, the\nvalue will decrease until it reaches 0.\n7. Update and create a second countdown using a condition if the value is\ngreater than 0. If it is, decrease the value of the countdown by 1.\n8. Use return to return the function, which then invokes it again and again\nuntil the condition is no longer true.\n9. Make sure, when you send the new countdown value as an argument into\nthe function, that there is a way out of the loop by using the return keyword\nand a condition that continues the loop if met.\nAnonymous functions\nSo far, we have been naming our functions. We can also create functions without\nnames if we store them inside variables. We call these functions anonymous. Here is\na non-anonymous function:\nfunction doingStuffAnonymously() {\nconsole.log(\"Not so secret though.\");\n}\nHere is how to turn the previous function into an anonymous function:\nfunction () {\nconsole.log(\"Not so secret though.\");\n};\n[ 142 ]\nChapter 6\nAs you can see, our function has no name. It is anonymous. So you may wonder how\nyou can invoke this function. Well actually, you can't like this!\nWe will have to store it in a variable in order to call the anonymous function; we can\nstore it like this:\nlet functionVariable = function () {\nconsole.log(\"Not so secret though.\");\n};\nAn anonymous function can be called using the variable name, like this:\nfunctionVariable();\nIt will simply output Not so secret though..\nThis might seem a bit useless, but it is a very powerful JavaScript construct. Storing\nfunctions inside variables enables us to do very cool things, like passing in functions\nas parameters. This concept adds another abstract layer to coding. This concept is\ncalled callbacks, and we will discuss it in the next section.\nPractice exercise 6.8\n1. Set a variable name and assign a function to it. Create a function expression\nwith one parameter that outputs a provided argument to the console.\n2. Pass an argument into the function.\n3. Create the same function as a normal function declaration.\nFunction callbacks\nHere is an example of passing a function as an argument to another function:\nfunction doFlexibleStuff(executeStuff) {\nexecuteStuff();\nconsole.log(\"Inside doFlexibleStuffFunction.\");\n}\nIf we call this new function with our previously made anonymous function,\nfunctionVariable, like this:\ndoFlexibleStuff(functionVariable);\n[ 143 ]\nFunctions\nIt will output:\nNot so secret though.\nInside doFlexibleStuffFunction.\nBut we can also call it with another function, and then our doFlexibleStuff function\nwill execute this other function. How cool is that?\nlet anotherFunctionVariable = function() {\nconsole.log(\"Another anonymous function implementation.\");\n}\ndoFlexibleStuff(anotherFunctionVariable);\nThis will produce the following output:\nAnother anonymous function implementation.\nInside doFlexibleStuffFunction.\nSo what happened? We created a function and stored it in the\nanotherFunctionVariable variable. We then sent that in as a function parameter to\nour doFlexibleStuff() function. And this function is simply executing whatever\nfunction gets sent in.\nAt this point you may wonder why the writers are so excited about this callback\nconcept. It probably looks rather lame in the examples you have seen so far. Once we\nget to asynchronous functions later on, this concept is going to be of great help. To\nstill satisfy your need for a more concrete example, we will give you one.\nIn JavaScript, there are many built-in functions, as you may know by now. One\nof them is the setTimeout() function. It is a very special function that is executing\na certain function after a specified amount of time that it will wait first. It is also\nseemingly responsible for quite a few terribly performing web pages, but that is\ndefinitely not the fault of this poor misunderstood and misused function.\nThis code is really something you should try to understand:\nlet youGotThis = function () {\nconsole.log(\"You're doing really well, keep coding!\");\n};\nsetTimeout(youGotThis, 1000);\n[ 144 ]\nChapter 6\nIt is going to wait for 1000ms (one second) and then print:\nYou're doing really well, keep coding!\nIf you need more encouragement, you can use the setInterval() function instead.\nIt works very similarly, but instead of executing the specified function once, it will\nkeep on executing it with the specified interval:\nsetInterval(youGotThis, 1000);\nIn this case, it will print our encouraging message every second until you kill the\nprogram.\nThis concept of the function executing the function after having been called itself is\nvery useful for managing asynchronous program execution.\nChapter projects\nCreate a recursive function\nCreate a recursive function that counts up to 10. Invoke the function with different\nstart numbers as the arguments that are passed into the function. The function\nshould run until the value is greater than 10.\nSet timeout order\nUse the arrow format to create functions that output the values one and two to the\nconsole. Create a third function that outputs the value three to the console, and then\ninvokes the first two functions.\nCreate a fourth function that outputs the word four to the console and also use\nsetTimeout() to invoke the first function immediately and then the third function.\nWhat does your output look like in the console? Try to get the console to output:\nFour\nThree\nOne\nTwo\nOne\n[ 145 ]\nFunctions\nSelf-check quiz\n1. What value is output into the console?\nlet val = 10;\nfunction tester(val){\nval += 10;\nif(val < 100){\nreturn tester(val);\n}\nreturn val;\n}\ntester(val);\nconsole.log(val);\n2. What will be output into the console by the below code?\nlet testFunction = function(){\nconsole.log(\"Hello\");\n}();\n3. What will be output to the console?\n(function () {\nconsole.log(\"Welcome\");\n})();\n(function () {\nlet firstName = \"Laurence\";\n})();\nlet result = (function () {\nlet firstName = \"Laurence\";\nreturn firstName;\n})();\nconsole.log(result);\n(function (firstName) {\nconsole.log(\"My Name is \" + firstName);\n})(\"Laurence\");\n4. What will be output to the console?\nlet test2 = (num) => num + 5;\nconsole.log(test2(14));\n[ 146 ]\nChapter 6\n5. What will be output to the console?\nvar addFive1 = function addFive1(num) {\nreturn num + 2;\n};\nlet addFive2 = (num) => num + 2;\nconsole.log(addFive1(14));\nSummary\nIn this chapter, we have covered functions. Functions are a great JavaScript building\nblock that we can use to reuse lines of code. We can give our functions parameters,\nso that we can change the code depending on the arguments a function gets invoked\nwith. Functions can return a result; we do so using the return keyword. And we can\nuse return at the place where we call a function. We can store the result in a variable\nor use it in another function, for example.\nWe then met with variable scopes. The scope entails the places from where variables\nare accessible. Default let and const variables can be accessed inside the block\nwhere they're defined (and the inner blocks of that block) and var is just accessible\nfrom the line where it was defined.\nWe can also use recursive functions to elegantly solve problems that can be solved\nrecursively by nature, such as calculating the factorial. Nested functions were the\nnext topic we studied. They are not a big deal, just functions inside functions. Basic\nfunctions inside functions are not considered very pretty, but anonymous functions\nand arrow functions are not uncommon to see. Anonymous functions are functions\nwithout a name and arrow functions are a special case of anonymous functions,\nwhere we use an arrow to separate the parameters and the body.\nIn the next chapter, we'll consider classes, another powerful programming construct!\n[ 147 ]\n7\nClasses\nIn this chapter, we are going to discuss JavaScript classes. We have seen JavaScript\nobjects already, and classes are a blueprint or template for object creation. So, many\nof the things discussed here should not sound too unfamiliar or revolutionary.\nClasses enable object-oriented programming, which was one of the most important\ndesign advancements in software development. This development reduced the\ncomplexity of applications and increased maintainability by a huge margin.\nSo, object-oriented programming and classes are of great importance for computer\nscience in general. This is not necessarily the case when we apply it to JavaScript\nthough. JavaScript classes are something special compared to other programming\nlanguages. Beneath the surface, classes are wrapped in some sort of special function.\nThis means that they are actually an alternative syntax for defining objects using a\nconstructor function. In this chapter, we will learn what classes are and how we can\ncreate and use them. Along the way, we will cover the following topics:\n\u2022 Object-oriented programming\n\u2022 Classes and objects\n\u2022 Classes\n\u2022 Inheritance\n\u2022 Prototypes\nNote: exercise, project, and self-check quiz answers can be found in\nthe Appendix.\n[ 149 ]\nClasses\nObject-oriented programming\nBefore we start diving right into the fun of classes, let's briefly say something about\nobject-oriented programming (OOP). OOP is a very important programming\nparadigm wherein code is structured in objects, leading to more maintainable and\nreusable code. Working with OOP teaches you to really try to think of all sorts of\ntopics in objects, by bundling properties in such a way that they can be wrapped\nin a blueprint called a class. This in turn might be inheriting properties from a\nparent class.\nFor example, if we are thinking of an animal, we can come up with certain\nproperties: name, weight, height, maximum speed, colors, and a lot more. And then\nif we think of a specific species of fish, we can reuse all the properties of \"animal\"\nand add a few fish-specific properties in there as well. The same for dogs; if we then\nthink of a dog, we can reuse all the properties of \"animal\" and add a few dog-specific\nones to it. This way we have reusable code of our animal class. And when we realize\nwe forgot a very important property for the many animals in our application, we\nonly need to add it to the animal class.\nThis is very important for Java, .NET, and other classic object-oriented ways of\nwriting code. JavaScript doesn't necessarily revolve around objects. We will need\nthem and we will use them, but they are not the star of our code, so to speak.\nClasses and objects\nAs a quick refresher, objects are a collection of properties and methods. We saw\nthem in Chapter 3, JavaScript Multiple Values. The properties of an object should have\nsensible names. So for example, if we have a person object, this object could have\nproperties called age and lastName that contain values. Here is an example of an\nobject:\nlet dog = { dogName: \"JavaScript\",\nweight: 2.4,\ncolor: \"brown\",\nbreed: \"chihuahua\"\n};\nClasses in JavaScript encapsulate data and functions that are part of that class. If you\ncreate a class, you can later create objects using that class using the following syntax:\nclass ClassName {\nconstructor(prop1, prop2) {\nthis.prop1 = prop1;\n[ 150 ]\nChapter 7\nthis.prop2 = prop2;\n}\n}\nlet obj = new ClassName(\"arg1\", \"arg2\");\nThis code defines a class with ClassName as a name, declares an obj variable, and\ninitializes this with a new instance of the object. Two arguments are provided. These\narguments will be used by the constructor to initialize the properties. As you can\nsee, the parameters of the constructor and the properties of the class (prop1 and\nprop2) have the same name. The properties of the class can be recognized by the\nthis keyword in front of them. The this keyword refers to the object it belongs to,\nso it is the first property of the instance of ClassName.\nRemember we said that classes are just some special function beneath the surface.\nWe could create the object with a special function like this:\nfunction Dog(dogName, weight, color, breed) {\nthis.dogName = dogName;\nthis.weight = weight;\nthis.color = color;\nthis.breed = breed;\n}\nlet dog = new Dog(\"Jacky\", 30, \"brown\", \"labrador\");\nThe dog example could have been made using a class syntax as well. It would have\nlooked like this:\nclass Dog {\nconstructor(dogName, weight, color, breed) {\nthis.dogName = dogName;\nthis.weight = weight;\nthis.color = color;\nthis.breed = breed;\n}\n}\nlet dog = new Dog(\"JavaScript\", 2.4, \"brown\", \"chihuahua\");\n[ 151 ]\nClasses\nThis results in an object with the same properties. If we do some logging as follows,\nwe will be able to see it:\nconsole.log(dog.dogName, \"is a\", dog.breed, \"and weighs\", dog.weight,\n\"kg.\");\nThis will output:\nJavaScript is a chihuahua and weighs 2.4 kg.\nIn the next section, we will dive into all the parts of classes.\nClasses\nYou may wonder, if classes do the exact same thing as simply defining an object,\nwhy do we even need classes? The answer is that classes are essentially blueprints\nfor object creation. This means that we need to do much less typing if we need\nto create 20 dogs when we have a dog class. If we have to create the objects, we\nwill have to specify all the properties' names each time. And it would be easy to\nmake a typo and misspell a property name. Classes come in handy in these sorts\nof situations.\nAs shown in the previous section, we use the class keyword to tell JavaScript we\nwant to create a class. Next, we give the class a name. It is the convention to start\nclass names with a capital letter.\nLet's have a look at all the different elements of a class.\nConstructors\nThe constructor method is a special method that we use to initialize objects with\nour class blueprint. There can only be one constructor in a class. This constructor\ncontains properties that will be set when initiating the class.\nHere you can see an example of a constructor in a Person class:\nclass Person {\nconstructor(firstname, lastname) {\nthis.firstname = firstname;\nthis.lastname = lastname;\n}\n}\n[ 152 ]\nChapter 7\nBeneath the surface, JavaScript creates a special function based on this constructor.\nThis function gets the class name, and it will create an object with the given\nproperties. With this special function, you can create instances (objects) of the class.\nHere is how you can create a new object from the Person class:\nlet p = new Person(\"Maaike\", \"van Putten\");\nThe new word is what tells JavaScript to look for the special constructor function in\nthe Person class and create a new object. The constructor gets called and returns an\ninstance of the person object with the specified properties. This object gets stored in\nthe p variable.\nIf we use our new p variable in a logging statement, you can see that the properties\nare really set:\nconsole.log(\"Hi\", p.firstname);\nThis outputs:\nHi Maaike\nWhat do you think will happen when we create a class without all of the properties?\nLet's find out:\nlet p = new Person(\"Maaike\");\nMany languages would crash, but not JavaScript. It just sets the remaining properties\nto undefined. You can see what happens by logging it:\nconsole.log(\"Hi\", p.firstname, p.lastname);\nThis results in:\nHi Maaike undefined\nYou can specify default values in constructor. You would do it like this:\nconstructor(firstname, lastname = \"Doe\") {\nthis.firstname = firstname;\nthis.lastname = lastname;\n}\nThis way, it would not have printed Hi Maaike undefined, but Hi Maaike Doe.\n[ 153 ]\nClasses\nPractice exercise 7.1\nTake the following steps to create a person class, and print instances of friends'\nnames:\n1. Create a class for Person including the constructor for firstname and\nlastname.\n2. Create a variable and assign a value of the new Person object using your\nfriend's first and last names.\n3. Now add a second variable with another friend's name using their first name\nand last name.\n4. Output both friends into the console with a greeting of hello.\nMethods\nIn a class, we can specify functions. This means that our object can start doing things\nusing the object's own properties\u2014for example, printing a name. Functions on a\nclass are called methods. When defining these methods, we don't use the function\nkeyword. We start directly with the name:\nclass Person {\nconstructor(firstname, lastname) {\nthis.firstname = firstname;\nthis.lastname = lastname;\n}\ngreet() {\nconsole.log(\"Hi there! I'm\", this.firstname);\n}\n}\nWe can call the greet method on a Person object like this:\nlet p = new Person(\"Maaike\", \"van Putten\");\np.greet();\nIt will output:\nHi there! I'm Maaike\n[ 154 ]\nChapter 7\nYou can specify as many methods on a class as you want. In this example, we are\nusing the firstname property. We do so by saying this.property. If we had a person\nwith a different value for the firstname property, for example, Rob, it would have\nprinted:\nHi there! I'm Rob\nJust like functions, methods can also take parameters and return results:\nclass Person {\nconstructor(firstname, lastname) {\nthis.firstname = firstname;\nthis.lastname = lastname;\n}\ngreet() {\nconsole.log(\"Hi there!\");\n}\ncompliment(name, object) {\nreturn \"That's a wonderful \" + object + \", \" + name;\n}\n}\nThe compliment function does not output anything itself, so we are logging it\nlet compliment = p.compliment(\"Harry\", \"hat\");\nconsole.log(compliment);\nThe output will be:\nThat's a wonderful hat, Harry\nIn this case we are sending parameters into our method, because you don't usually\ncompliment your own properties (that's a nice sentence, Maaike!). However,\nwhenever the method doesn't require external input but only the properties of\nthe object, no parameters will work and the method can use its object's properties.\nLet's do an exercise and then move on to using the properties of classes outside the\nclass.\n[ 155 ]\nClasses\nPractice exercise 7.2\nGet your friend's full name:\n1. Using the Person class from Practice exercise 7.1, add a method called\nfullname, which returns the concatenated value of firstname and lastname\nwhen invoked.\n2. Create values for person1 and person2 using two friends' first and last names.\n3. Using the fullname method within the class, return the full name of one or\nboth people.\nProperties\nProperties, sometimes also called fields, hold the data of the class. We have seen one\nkind of property already, when we created them in our constructors:\nclass Person {\nconstructor(firstname, lastname) {\nthis.firstname = firstname;\nthis.lastname = lastname;\n}\n}\nHere, the Person class gets two properties from the constructor: firstname and\nlastname. Properties can be added or removed just like we did for objects. These\nproperties can be accessed from outside the class, as we saw when we logged them\noutside the class by accessing them on the instance:\nlet p = new Person(\"Maaike\", \"van Putten\");\nconsole.log(\"Hi\", p.firstname);\nOften, it is not desirable to provide direct access to our properties. We want our class\nto be in control of the values of properties for several reasons\u2014perhaps we want to\ndo validation on a property to assure it has a certain value. For example, imagine\nwanting to validate an age as not being lower than 18. We can achieve this by\nmaking direct access to the property from outside the class impossible.\nThis is how to add properties that aren't accessible from outside. We prefix them\nwith a # symbol:\nclass Person {\n#firstname;\n#lastname;\n[ 156 ]\nChapter 7\nconstructor(firstname, lastname) {\nthis.#firstname = firstname;\nthis.#lastname = lastname;\n}\n}\nRight now, the firstname and lastname properties cannot be accessed from outside\nthe class. This is done by adding # in front of the property. If we try it:\nlet p = new Person(\"Maria\", \"Saga\");\nconsole.log(p.firstname);\nWe'll get:\nundefined\nIf we wanted to make sure we could only create objects with names starting with an\n\"M,\" we could modify our constructor a bit:\nconstructor(firstname, lastname) {\nif(firstname.startsWith(\"M\")){\nthis.#firstname = firstname;\n} else {\nthis.#firstname = \"M\" + firstname;\n}\nthis.#lastname = lastname;\n}\nNow when you try to create a person that has a firstname value that doesn't start\nwith an \"M,\" it will add an M in front. So for example, the value of the following first\nname is Mkay:\nlet p = new Person(\"kay\", \"Moon\");\nThis is a very silly example of validation. At this point, we cannot access it from\noutside the class at all after the constructor. We can only access it from inside the\nclass. This is where getters and setters come into play.\nGetters and setters\nGetters and setters are special properties that we can use to get data from a class and\nto set data fields on the class. Getters and setters are computed properties. So, they\nare more like properties than they are like functions. We call them accessors. They do\nlook a bit like functions, because they have () behind them, but they are not!\n[ 157 ]\nClasses\nThese accessors start with the get and set keywords. It is considered good practice to\nmake fields private as much as possible and provide access to them using getters and\nsetters. This way, the properties cannot be set from outside without the object itself\nbeing in control. This principle is called encapsulation. The class encapsulates the\ndata, and the object is in control of its own fields.\nHere is how to do it:\nclass Person {\n#firstname;\n#lastname;\nconstructor(firstname, lastname) {\nthis.#firstname = firstname;\nthis.#lastname = lastname;\n}\nget firstname() {\nreturn this.#firstname;\n}\nset firstname(firstname) {\nthis.#firstname = firstname;\n}\nget lastname() {\nreturn this.#lastname;\n}\nset lastname(lastname) {\nthis.#lastname = lastname;\n}\n}\nThe getter is used to get the property. Therefore, it doesn't take any parameters, but\nsimply returns the property. The setter is the other way around: it takes a parameter,\nassigns this new value to the property, and returns nothing. The setter can contain\nmore logic, for example, some validation, as we'll see below. The getter can be used\noutside the object as if it were a property. The properties are no longer directly\naccessible from outside the class, but can be accessed via the getter to get the value\nand via the setter to update the value. Here is how to use it outside the class instance:\nlet p = new Person(\"Maria\", \"Saga\");\nconsole.log(p.firstname);\n[ 158 ]\nChapter 7\nThis will output:\nMaria\nWe have created a new Person object with a first name of Maria and last name of\nSaga. The output is showing the first name, which is only possible because we have a\ngetter accessor. We can also set the value to something else, because there is a setter.\nHere is how to update the first name, so the name is no longer Maria, but Adnane.\np.firstname = \"Adnane\";\nAt this point, nothing special is happening in the setter. We could do a similar\nvalidation as in the constructor before, like this:\nset firstname(firstname) {\nif(firstname.startsWith(\"M\")){\nthis.#firstname = firstname;\n} else {\nthis.#firstname = \"M\" + firstname;\n}\n}\nThis will check whether firstname starts with an M, and if it does it will update the\nvalue to whatever the firstname parameter is. If it doesn't, it will concatenate an M in\nfront of the parameter.\nPlease note that we do not access firstname as if it was a function. If you put two\nparentheses () after it, you would actually get an error telling you that it is not a\nfunction.\nInheritance\nInheritance is one of the key concepts of OOP. It is the concept that classes can have\nchild classes that inherit the properties and methods from the parent class. For\nexample, if you needed all sorts of vehicle objects in your application, you could\nspecify a class named Vehicle in which you specify some shared properties and\nmethods of vehicles. You would then go ahead and create the specific child classes\nbased on this Vehicle class, for example, boat, car, bicycle, and motorcycle.\nThis could be a very simple version of the Vehicle class:\nclass Vehicle {\nconstructor(color, currentSpeed, maxSpeed) {\nthis.color = color;\n[ 159 ]\nClasses\nthis.currentSpeed = currentSpeed;\nthis.maxSpeed = maxSpeed;\n}\nmove() {\nconsole.log(\"moving at\", this.currentSpeed);\n}\naccelerate(amount) {\nthis.currentSpeed += amount;\n}\n}\nHere we have two methods in our Vehicle class: move and accelerate. And this\ncould be a Motorcyle class inheriting from this class using the extends keyword:\nclass Motorcycle extends Vehicle {\nconstructor(color, currentSpeed, maxSpeed, fuel) {\nsuper(color, currentSpeed, maxSpeed);\nthis.fuel = fuel;\n}\ndoWheelie() {\nconsole.log(\"Driving on one wheel!\");\n}\n}\nWith the extends keyword we specify that a certain class is the child of another class.\nIn this case, Motorcycle is a child class of Vehicle. This means that we'll have access\nto properties and methods from Vehicle in our Motorcycle class. We have added a\nspecial doWheelie() method. This is not something that makes sense to add to the\nVehicle class, because this is an action that is specific to certain vehicles.\nThe super word in the constructor is calling the constructor from the parent, the\nVehicle constructor in this case. This makes sure that the fields from the parent\nare set as well and that the methods are available without having to do anything\nelse: they are automatically inherited. Calling super() is not optional, you must do\nit when you are in a class that is inheriting from another class, else you will get a\nReferenceError.\nBecause we have access to the fields of Vehicle in Motorcycle, this will work:\nlet motor = new Motorcycle(\"Black\", 0, 250, \"gasoline\");\nconsole.log(motor.color);\n[ 160 ]\nChapter 7\nmotor.accelerate(50);\nmotor.move();\nAnd this is what it will output:\nBlack\nmoving at 50\nWe cannot access any Motorcycle specific properties or methods in our Vehicle class.\nThis is because not all vehicles are motorcycles, so we cannot be sure that we would\nhave the properties or methods from a child.\nRight now, we don't use any getters and setters here, but we clearly could. If there\nare getters and setters in the parent class, they are inherited by the child class as well.\nThis way we could influence which properties could be fetched and changed (and\nhow) outside our class. This is generally a good practice.\nPrototypes\nA prototype is the mechanism in JavaScript that makes it possible to have objects.\nWhen nothing is specified when creating a class, the objects inherit from the\nObject.prototype prototype. This is a rather complex built-in JavaScript class that\nwe can use. We don't need to look at how this is implemented in JavaScript, as\nwe can consider it the base object that is always on top of the inheritance tree and\ntherefore always present in our objects.\nThere is a prototype property available on all classes, and it is always named\n\"prototype.\" We can access it like this:\nClassName.prototype\nLet's give an example of how to add a function to a class using the prototype\nproperty. In order to do so, we'll be using this Person class:\nclass Person {\nconstructor(firstname, lastname) {\nthis.firstname = firstname;\nthis.lastname = lastname;\n}\ngreet() {\nconsole.log(\"Hi there!\");\n}\n}\n[ 161 ]\nClasses\nAnd here is how to add a function to this class using prototype:\nPerson.prototype.introduce = function () {\nconsole.log(\"Hi, I'm\", this.firstname);\n};\nprototype is a property holding all the properties and methods of an object. So,\nadding a function to prototype is adding a function to the class. You can use\nprototype to add properties or methods to an object, like we did in the above\nexample in our code with the introduce function. You can also do this for properties:\nPerson.prototype.favoriteColor = \"green\";\nAnd then you can call them from instances of Person:\nlet p = new Person(\"Maria\", \"Saga\");\nconsole.log(p.favoriteColor);\np.introduce();\nIt will output:\ngreen\nHi, I'm Maria\nAnd it will be as if you had defined the class with a favorite color holding a\ndefault value, and a function, introduce. They have been added to the class and\nare available for all instances and future instances.\nSo the methods and properties defined via prototype are really as if they were\ndefined in the class. This means that overwriting them for a certain instance doesn't\noverwrite them for all instances. For example, if we were to have a second Person\nobject, this person could overwrite the favoriteColor value and this wouldn't\nchange the value for our object with firstname as Maria.\nThis is something you should not be using when you have control over the class\ncode and you want to change it permanently. In that case, just change the class.\nHowever, you can expand existing objects like this and even expand existing objects\nconditionally. It is also important to know that the JavaScript built-in objects have\nprototypes and inherit from Object.prototype. However, be sure not to modify this\nprototype since it will affect how our JavaScript works.\n[ 162 ]\nChapter 7\nPractice exercise 7.3\nCreate a class that contains properties for different animal species and the sound that\neach species makes, and create two (or more) animals:\n1. Create a method that prints a given animal and its sound.\n2. Add a prototype with another action for the animal.\n3. Output an entire animal object into the console.\nChapter projects\nEmployee tracking app\nCreate a class to track the employees of a company:\n1. Use first names, last names, and the number of years worked as values in the\nconstructor.\n2. Create two or more people with values for their first names, last names, and\nthe number of years they've worked at the company. Add the people into an\narray.\n3. Set up a prototype to return the details of the person's first and last names\nand how long they've worked at the company.\n4. Iterate the contents of the array to output the results into the console, adding\nsome text to make the output a full sentence.\nMenu items price calculator\nCreate a class which will allow you to work out the combined price of a number of\nitems, and interact with it to work out the total cost of different orders.\n1. Create a class that contains the prices of two menu items as private field\ndeclarations.\n2. Use the constructor in the class to get the argument values (how many of\neach item are being bought).\n3. Create a method to calculate and return the total cost depending on how\nmany of each item the user selects.\n4. Use a getter property to grab the value output by the calculation method.\n5. Create two or three objects with different combinations of menu selections,\nand output the total cost in the console.\n[ 163 ]\nClasses\nSelf-check quiz\n1. What is the keyword used to create a class?\n2. How would you set up a class for a person's first and last names that could\ninclude first and last as initial properties?\n3. What is the concept of one thing gaining the properties and behaviors of\nanother thing called?\n4. Which of the following are true about the constructor method?\n\u2022 It gets executed automatically when a new object is created.\n\u2022 It should only be added afterward.\n\u2022 It has to include the constructor keyword.\n\u2022 It is used to initialize object properties.\n\u2022 It can be used when you have multiple values.\n5. Troubleshoot the following code so that the prototype outputs the first and\nlast name of the Person into the console. Which is the correct syntax for the\nPerson prototype?\nfunction Person(first,last) {\nthis.first = first;\nthis.last = last;\n}\n// What should go here: A, B, or C?\nconst friend1 = new Person(\"Laurence\", \"Svekis\");\nconsole.log(friend1.getName());\nA)\nPerson.prototype.getName = (first,last) {\nreturn this.first + \" \" + this.last;\n};\nB)\nPerson.prototype.getName = function getName() {\nreturn this.first + \" \" + this.last;\n};\nC)\nPerson.prototype = function getName() {\nreturn this.first + \" \" + this.last;\n};\n[ 164 ]\nChapter 7\nSummary\nIn this chapter, we introduced you to the concept of OOP. This means that we\nstructure our code in such a way that objects are the central players of the logic.\nClasses are blueprints for objects. We can make a template for an object and create an\ninstance easily by using the new keyword.\nWe then saw that classes can inherit from each other by using the extends keyword.\nClasses that extend from another class will have to call the constructor of this class\nwith super() and will then automatically have access to all the properties and\nmethods of the parent. This is great for reusable and highly maintainable code.\nLastly, we encountered prototypes. This is the built-in JavaScript concept that makes\nclasses possible. By adding properties and methods to a class using prototype, we\ncan modify the blueprint of that class.\nIn the next chapter, we will consider some of JavaScript's built-in methods, which\ncan be used to manipulate and add complexity to your code!\n[ 165 ]\n8\nBuilt-In JavaScript Methods\nWe have just covered most of the basic building blocks in JavaScript. Now it's time\nto look at some powerful built-in methods that will make your life easier that we\nhaven't seen yet. Built-in methods are functionality that we get out of the box with\nJavaScript. We can use these methods without having to code them first. This is\nsomething we have done a lot already, for example, console.log() and prompt().\nMany built-in methods belong to built-in classes as well. These classes and their\nmethods can be used at any time because JavaScript has already defined them.\nThese classes exist for our convenience, since they are very common things to need,\nsuch as the Date, Array, and Object classes.\nThe ability to harness the capabilities that are already built into JavaScript can\nimprove the effectiveness of the code, save time, and comply with various best\npractices for developing solutions. We are going to address some of the common\nuses for such functions, such as manipulating text, mathematical computations,\ndealing with date and time values, interactions, and supporting robust code. Here\nare the topics covered in this chapter:\n\u2022 Global JavaScript methods\n\u2022 String methods\n\u2022 Math methods\n\u2022 Date methods\n\u2022 Array methods\n\u2022 Number methods\n[ 167 ]\nBuilt-In JavaScript Methods\nNote: exercise, project and self-check quiz answers can be found in\nthe Appendix.\nIntroduction to built-in JavaScript\nmethods\nWe have seen many built-in JavaScript methods already. Any method that we didn't\ndefine ourselves is a built-in method. Some examples include console.log(), Math.\nrandom(), prompt(), and many more\u2014think about methods on arrays for example.\nThe difference between a method and a function is that a function is defined\nanywhere in the script, and a method is defined inside a class. So methods are pretty\nmuch functions on classes and instances.\nMethods can often be chained as well; this is only true for methods returning a\nresult. The next method will then be performed on the result. So for example:\nlet s = \"Hello\";\nconsole.log(\ns.concat(\" there!\")\n.toUpperCase()\n.replace(\"THERE\", \"you\")\n.concat(\" You're amazing!\")\n);\nWe create a variable, s, and we store Hello in there on the first line. Then we want to\nbe logging something. This code has been divided over different lines for readability,\nbut it's actually one statement. We first perform a concat() method on our s\nvariable, which appends a string to our string. So after that first operation the value\nis Hello there!. Then we transform this to uppercase with the next method. At that\npoint the value is HELLO THERE!. Then we proceed to replace THERE with you. After\nthat, the value becomes HELLO you!. We then append a string to it again and finally\nthe value will be logged:\nHELLO you! You're amazing!\nWe need to log or store the output in this example, because the original string value\nwill not be updated by just calling methods on a string.\n[ 168 ]\nChapter 8\nGlobal methods\nThe global JavaScript methods can be used without referring to the built-in object\nthey are part of. This means that we can just use the method name as if it is a\nfunction that has been defined inside the scope we are in, without the \"object\" in\nfront of it. For example, instead of writing:\nlet x = 7;\nconsole.log(Number.isNaN(x));\nYou can also write:\nconsole.log(isNaN(x));\nSo, the Number can be left out, because isNaN is made globally available without\nreferring to the class it belongs to (in this instance, the Number class). In this case, both\nof these console.log statements will log false (they are doing the exact same thing),\nbecause isNaN returns true when it isn't a number. And 7 is a number, so it will log\nfalse.\nJavaScript has been built to have these available directly, so to achieve this, some\nmagic is going on beneath the surface. The JavaScript creators chose the methods\nthat they thought were most common. So the reasons why some of them are\navailable as global methods and others are not might seem a bit arbitrary. It's just\nthe choice of some very bright developers at a certain point in time.\nWe'll address the most common global methods below. We start with decoding and\nencoding URIs, escaped and unescaped, followed by parsing numbers, and finally\nevaluate.\nDecoding and encoding URIs\nSometimes you will need to encode or decode a string. Encoding is simply\nconverting from one shape to another. In this case we will be dealing with percent\nencoding, also called URL encoding. Before we start, there might be some confusion\non the URI and URL meaning. A URI (uniform resource identifier) is an identifier of\na certain resource. URL (uniform resource locator) is a subcategory of URI that is not\nonly an identifier, but also holds the information on how to access it (location).\nLet's talk about encoding and decoding these URIs (and also URLs, since they are a\nsubset). An example of when you'd need this is when you are sending variables over\nthe URL using the get method in a form. These variables that you are sending via the\nURL are called query parameters.\n[ 169 ]\nBuilt-In JavaScript Methods\nIf something contains a space, this will be decoded, because you cannot use spaces in\nyour URL. They will be converted to %20. The URL might look something like:\nwww.example.com/submit?name=maaike%20van%20putten&love=coding\nAll characters can be converted to some %-starting format. However, this is not\nnecessary in most cases. URIs can contain a certain number of alphanumeric\ncharacters. The special characters need to be encoded. An example, before encoding, is:\nhttps://www.example.com/submit?name=maaike van putten\nThe same URL after encoding is:\nhttps://www.example.com/submit?name=maaike%20van%20putten\nThere are two pairs of encode and decode methods. We will discuss them and their\nuse cases here. You cannot have a URI with spaces, so working with these methods\nis crucial in order to work with variables containing spaces.\ndecodeUri() and encodeUri()\nThe decodeUri() and encodeUri() are actually not really encoding and decoding,\nthey are more so fixing broken URIs. It is like the previous example with the spaces.\nThis method pair is really good at fixing broken URIs and decoding them back into\na string. Here you can see them in action:\nlet uri = \"https://www.example.com/submit?name=maaike van putten\";\nlet encoded_uri = encodeURI(uri);\nconsole.log(\"Encoded:\", encoded_uri);\nlet decoded_uri = decodeURI(encoded_uri);\nconsole.log(\"Decoded:\", decoded_uri);\nAnd here is the output:\nEncoded: https://www.example.com/submit?name=maaike%20van%20putten\nDecoded: https://www.example.com/submit?name=maaike van putten\nAs you can see, it has replaced the spaces in the encoded version and removed them\nagain in the decoded version. All the other characters get to stay the same\u2014this encode\nand decode do not take special characters into account, and therefore leave them in the\nURI. Colons, question marks, equal signs, slashes, and ampersands can be expected.\nThis is great for fixing broken URIs, but it's actually a bit useless whenever you need\nto encode strings that contain any of these characters: / , ? : @ & = + $ #. These can\nbe used in URIs as part of the URI and are therefore skipped. This is where the next\ntwo built-in methods come in handy.\n[ 170 ]\nChapter 8\ndecodeUriComponent() and encodeUriComponent()\nSo, the methods decodeURI() and encodeURI() can be very useful to fix a broken URI,\nbut they are useless when you only want to encode or decode a string that contains a\ncharacter with a special meaning, such as = or &. Take the following example:\nhttps://www.example.com/submit?name=this&that=some thing&code=love\nWeird value, we can agree on that, but it will demonstrate our problem. Using\nencodeURI on this will leave us with:\nhttps://www.example.com/submit?name=this&that=some%20thing&code=love\nThere are actually 3 variables in here according to URI standards:\n\u2022 name (value is this)\n\u2022 that (value is some thing)\n\u2022 code (value is love)\nWhile we intended to send in one variable, name, with the value this&that=some\nthing&code=love.\nIn this case, you will need decodeUriComponent() and encodeUriComponent(),\nbecause you would need the = and & in the variable part encoded as well. Right\nnow, this is not the case and it will actually cause problems in interpreting the query\nparameters (the variables after the ?). We only wanted to send in one parameter:\nname. But instead we sent in three.\nLet's have a look at another example. Here is what the example of the previous\nsection would have done with this component encoding:\nlet uri = \"https://www.example.com/submit?name=maaike van putten\";\nlet encoded_uri = encodeURIComponent(uri);\nconsole.log(\"Encoded:\", encoded_uri);\nlet decoded_uri = decodeURIComponent(encoded_uri);\nconsole.log(\"Decoded:\", decoded_uri);\nThe resulting output is as follows:\nEncoded: https%3A%2F%2Fwww.example.com%2Fsubmit%3Fname%3Dmaaike%20\nvan%20putten\nDecoded: https://www.example.com/submit?name=maaike van putten\n[ 171 ]\nBuilt-In JavaScript Methods\nClearly, you don't want this as your URI, but the component methods are useful to\nencode, for example, a URL variable. If the URL variable were to contain a special\ncharacter, like = and &, this would change the meaning and break the URI if these\ncharacters don't get encoded.\nEncoding with escape() and unescape()\nThese are still global methods available to do something similar to encode (escape)\nand decode (unescape). Both methods are strongly discouraged to use and they\nmight actually disappear from future JavaScript versions or may not be supported by\nbrowsers for good reasons.\nPractice exercise 8.1\nOutput the decodeURIComponent() for the string How's%20it%20going%3F to the\nconsole. Also, encode the string How's it going? to be output into the console.\nCreate a web URL and encode the URI:\n1. Add the strings as variables in the JavaScript code\n2. Using encodeURIComponent() and decodeURIComponent() output the results\ninto the console\n3. Create a web URI with request parameters http://www.basescripts.\ncom?=Hello World\";\n4. Encode and output the web URI into the console\nParsing numbers\nThere are different ways to parse strings to numbers. In many situations you will have\nto translate a string to a number, for example reading input boxes from an HTML web\npage. You cannot calculate with strings, but you can with numbers. Depending on\nwhat exactly you need to do, you will need either one of these methods.\nMaking integers with parseInt()\nWith the method parseInt() a string will be changed to an integer. This method\nis part of the Number class, but it is global and you can use it without the Number in\nfront of it. Here you can see it in action:\nlet str_int = \"6\";\nlet int_int = parseInt(str_int);\nconsole.log(\"Type of \", int_int, \"is\", typeof int_int);\n[ 172 ]\nChapter 8\nWe start off with a string containing a 6. Then we convert this string to an integer\nusing the parseInt method, and when we log the result, we will get in the console:\nType of 6 is number\nYou can see that the type has changed from string to number. At this point, you may\nwonder what will happen if parseInt() tries to parse other types of numbers, like\nstring versions of floats or binary numbers. What do you think will happen when we\ndo this?\nlet str_float = \"7.6\";\nlet int_float = parseInt(str_float);\nconsole.log(\"Type of\", int_float, \"is\", typeof int_float);\nlet str_binary = \"0b101\";\nlet int_binary = parseInt(str_binary);\nconsole.log(\"Type of\", int_binary, \"is\", typeof int_binary);\nThis will log:\nType of 7 is number\nType of 0 is number\nCan you figure out the logic here? First of all, JavaScript doesn't like crashing or\nusing errors as a way out, so it is trying to make it work to the best of its abilities. The\nparseInt() method simply stops parsing when it runs into a non-numeric character.\nThis is the specified behavior, and you need to keep that in mind while working with\nparseInt(). In the first case, it stops parsing as soon as it finds the dot, so the result\nis 7. And in the binary number case, it stops parsing as soon as it hits the b, and the\nresult is 0. By now you can probably figure out what this does:\nlet str_nan = \"hello!\";\nlet int_nan = parseInt(str_nan);\nconsole.log(\"Type of\", int_nan, \"is\", typeof int_nan);\nSince the first character is non-numeric, JavaScript will convert this string to NaN.\nHere is the result that you will get in the console:\nType of NaN is number\nSo parseInt() can be a bit quirky, but it's very valuable. In the real world, it is used a\nlot to combine the input of users via web pages and calculations.\n[ 173 ]\nBuilt-In JavaScript Methods\nMaking floats with parseFloat()\nSimilarly, we can use parseFloat() to parse a string to a float. It works exactly the\nsame, except it can also understand decimal numbers and it doesn't quit parsing as\nsoon as it runs into the first dot:\nlet str_float = \"7.6\";\nlet float_float = parseFloat(str_float);\nconsole.log(\"Type of\", float_float, \"is\", typeof float_float);\nThis will log:\nType of 7.6 is number\nWith the parseInt(), this value became 7, because it would stop parsing as soon as\nit finds a non-numeric character. However, parseFloat() can deal with one dot in\nthe number, and the numbers after that are interpreted as decimals. Can you guess\nwhat happens when it runs into a second dot?\nlet str_version_nr = \"2.3.4\";\nlet float_version_nr = parseFloat(str_version_nr);\nconsole.log(\"Type of\", float_version_nr, \"is\", typeof float_version_\nnr);\nThis will log:\nType of 2.3 is number\nThe strategy is similar to the parseInt() function. As soon as it finds a character it\ncannot interpret, a second dot in this case, it will stop parsing and just return the\nresult so far. Then one more thing to note. It is not going to append a .0 to integers,\nso 6 is not going to become 6.0. This example:\nlet str_int = \"6\";\nlet float_int = parseFloat(str_int);\nconsole.log(\"Type of\", float_int, \"is\", typeof float_int);\nWill log:\nType of 6 is number\nLastly, the behavior for binary numbers and strings is the same. It is going to stop\nparsing as soon as it runs into a character it cannot interpret:\n[ 174 ]\nChapter 8\nlet str_binary = \"0b101\";\nlet float_binary = parseFloat(str_binary);\nconsole.log(\"Type of\", float_binary, \"is\", typeof float_binary);\nlet str_nan = \"hello!\";\nlet float_nan = parseFloat(str_nan);\nconsole.log(\"Type of\", float_nan, \"is\", typeof float_nan);\nThis will log:\nType of 0 is number\nType of NaN is number\nYou will use the parseFloat() whenever you need a decimal number. However, it\nwill not work with binary, hexadecimal, and octal values, so whenever you really\nneed to work with these values or integers you'll have to use parseInt().\nExecuting JavaScript with eval()\nThis global method executes the argument as a JavaScript statement. This means\nthat it will just do whatever JavaScript is inserted in there, as if that JavaScript were\nwritten directly on the spot instead of eval(). This can be convenient for working\nwith injected JavaScript, but injected code comes with great risks. We'll deal with\nthese risks later; let's first explore an example. Here is a fabulous website:\n<html>\n<body>\n<input onchange=\"go(this)\"></input>\n<script>\nfunction go(e) {\neval(e.value);\n}\n</script>\n</body>\n</html>\nThis is a basic HTML web page with an input box on it.\nYou'll learn more about HTML in Chapter 9, The Document Object\nModel.\n[ 175 ]\nBuilt-In JavaScript Methods\nWhatever you insert in the input box will get executed. If we were to write this in the\ninput box:\ndocument.body.style.backgroundColor = \"pink\";\nThe website background would change to pink. That looks like fun, right? However,\nwe cannot stress enough how careful you should be using eval(). They might as\nwell have called it evil according to many developers. Can you reason why this\nmight be?\nThe answer is security! Yes, this is probably the worst thing security-wise you can\ndo in most situations. You are going to execute external code. This code could be\nmalicious. It is a method for supporting code injection. The well-respected OWASP\n(Open Web Application Security Project) Foundation creates top 10s for security\nthreats every 3 years. Code injection has been on it since their first top 10 and it is\nstill in the OWASP top 10 security threats now. Running it server side can cause\nyour server to crash and your website to go down, or worse. There are almost always\nbetter solutions to what you want to do than using eval(). Next to the security risks,\nit is terrible performance-wise. So just for this reason already you might want to\navoid using it.\nAlright, so one last note on this. If you know what you are doing you might want to\nuse it in very specific cases. Even though it is \"evil\", it has a lot of power. It can be\nokay to use in certain cases, for example when you are creating template engines,\nyour own interpreter, and all other JavaScript core tools. Just beware of the danger\nand control access to this method carefully. And one last bonus tip, when you feel\nlike you really have to use eval, do a quick search on the web. Chances are that you\nwill find a better approach.\nArray methods\nWe have seen arrays already\u2014they can contain multiple items. We have also seen\nquite a few built-in methods on arrays, like shift() and push(). Let's look at a few\nmore in the following sections.\nPerforming a certain action for every item\nThere is a reason we are starting with this method. You might be thinking of loops\nat this point, but there is a built-in method that you can use to execute a function for\nevery element in the array. This is the forEach() method. We mentioned this briefly\nin Chapter 6, Functions, but let's consider it in some more detail. It takes the function\nthat needs to be executed for every element as input. Here you can see an example:\n[ 176 ]\nChapter 8\nlet arr = [\"grapefruit\", 4, \"hello\", 5.6, true];\nfunction printStuff(element, index) {\nconsole.log(\"Printing stuff:\", element, \"on array position:\", index);\n}\narr.forEach(printStuff);\nThis code snippet will write to the console:\nPrinting stuff: grapefruit on array position: 0\nPrinting stuff: 4 on array position: 1\nPrinting stuff: hello on array position: 2\nPrinting stuff: 5.6 on array position: 3\nPrinting stuff: true on array position: 4\nAs you can see, it called the printStuff() function for every element in the array.\nAnd we can also use the index, it is the second parameter. We don't need to\ncontrol the flow of the loop here and we cannot get stuck at a certain point. We\njust need to specify what function needs to be executed for every element. And\nthe element will be input for this function. This is used a lot, especially for a more\nfunctional programming style in which many methods get chained, for example,\nto process data.\nFiltering an array\nWe can use the built-in filter() method on an array to alter which values are in the\narray. The filter method takes a function as an argument, and this function should\nreturn a Boolean. If the Boolean has the value true, the element will end up in the\nfiltered array. If the Boolean has the value false, the element will be left out. You can\nsee how it works here:\nlet arr = [\"squirrel\", 5, \"Tjed\", new Date(), true];\nfunction checkString(element, index) {\nreturn typeof element === \"string\";\n}\nlet filterArr = arr.filter(checkString);\nconsole.log(filterArr);\n[ 177 ]\nBuilt-In JavaScript Methods\nThis will log to the console:\n[ 'squirrel', 'Tjed' ]\nIt is important to realize that the original array has not changed, the filter()\nmethod returns a new array with the elements that made it through the filter. We\ncapture it here in the variable filterArr.\nChecking a condition for all elements\nYou can use the every() method to see whether something is true for all elements\nin the array. If that is the case, the every() method will return true, else it will\nreturn false. We are using the checkString() function and array from the previous\nexample here:\nconsole.log(arr.every(checkString));\nThis will log false, since not all elements are of type string in the array.\nReplacing part of an array with another part of\nthe array\nThe copyWithin() method can be used to replace a part of the array with another\npart of the array. In the first example we specify 3 arguments. The first one is the\ntarget position, to which the values get copied. The second one is the start of what\nto copy to the target position and the last one is the end of the sequence that will be\ncopied to the target position; this last index is not included. Here we are only going\nto override position 0 with whatever is in position 3:\narr = [\"grapefruit\", 4, \"hello\", 5.6, true];\narr.copyWithin(0, 3, 4);\narr becomes:\n[ 5.6, 4, 'hello', 5.6, true ]\nIf we specify a range with length 2, the first two elements after the starting position\nget overridden:\narr = [\"grapefruit\", 4, \"hello\", 5.6, true];\narr.copyWithin(0, 3, 5);\n[ 178 ]\nChapter 8\nAnd now arr becomes:\n[ 5.6, true, 'hello', 5.6, true ]\nWe can also not specify an end at all; it will take the range to the end of the string:\nlet arr = [\"grapefruit\", 4, \"hello\", 5.6, true, false];\narr.copyWithin(0, 3);\nconsole.log(arr);\nThis will log:\n[ 5.6, true, false, 5.6, true, false ]\nIt is important to keep in mind that this function changes the content of the original\narray, but will never change the length of the original array.\nMapping the values of an array\nSometimes you'll need to change all the values in an array. With the array map()\nmethod you can do just that. This method will return a new array with all the new\nvalues. You'll have to say how to create these new values. This can be done with the\narrow function. It is going to execute the arrow function for every element in the\narray, so for example:\nlet arr = [1, 2, 3, 4];\nlet mapped_arr = arr.map(x => x + 1);\nconsole.log(mapped_arr);\nThis is what the console output with the new mapped array looks like:\n[ 2, 3, 4, 5 ]\nUsing the arrow function, the map() method has created a new array, in which each\nof the original array values has been increased by 1.\nFinding the last occurrence in an array\nWe can find occurrences with indexOf() as we have seen already. To find the last\noccurrence, we can use the lastIndexOf() method on an array, just as we did for\nstring.\n[ 179 ]\nBuilt-In JavaScript Methods\nIt will return the index of the last element with that value, if it can find it at all:\nlet bb = [\"so\", \"bye\", \"bye\", \"love\"];\nconsole.log(bb.lastIndexOf(\"bye\"));\nThis will log 2, because the index 2 holds the last bye variable. What do you think\nyou'll get when you ask for the last index of something that's not there?\nlet bb = [\"so\", \"bye\", \"bye\", \"love\"];\nconsole.log(bb.lastIndexOf(\"hi\"));\nThat's right (hopefully)! It's -1.\nPractice exercise 8.2\nRemove duplicates from the array using filter() and indexOf(). The starting array\nis:\n[\"Laurence\", \"Mike\", \"Larry\", \"Kim\", \"Joanne\", \"Laurence\", \"Mike\",\n\"Laurence\", \"Mike\", \"Laurence\", \"Mike\"]\nUsing the array filter() method, this will create a new array using the elements that\npass the test condition implemented by the function. The final result will be:\n[ 'Laurence', 'Mike', 'Larry', 'Kim', 'Joanne' ]\nTake the following steps:\n1. Create an array of names of people. Make sure you include duplicates. The\nexercise will remove the duplicate names.\n2. Using the filter() method, assign the results of each item from the array as\narguments within an anonymous function. Using the value, index, and array\narguments, return the filtered result. You can set the return value to true\ntemporarily as this will build the new array with all the results in the original\narray.\n3. Add a console.log call within the function that will output the index value\nof the current item in the array. Also add the value so you can see the results\nof the item value that has the current index number and the first matching\nresult from the array's index value.\n[ 180 ]\nChapter 8\n4. Using indexOf() the current value returns the index value of the item\nand applies the condition to check to see if it matches the original index\nvalue. This condition will only be true on the first result so all subsequent\nduplicates will be false and not get added to the new array. false will not\nreturn the value into the new array. The duplicates will all be false since the\nindexof() only gets the first match in the array.\n5. Output the new, unique value array onto the console.\nPractice exercise 8.3\nUsing the array map() method, update an array's contents. Take the following steps:\n1. Create an array of numbers.\n2. Using the array map method and an anonymous function, return an updated\narray, multiplying all the numbers in the array by 2. Output the result into\nthe console.\n3. As an alternative method, use the arrow function format to multiply each\nelement of the array by 2 with the array map() method in one line of code.\n4. Log the result onto the console.\nString methods\nWe have worked with strings already and chances are that you have run into some\nof the methods on strings by now. There are a few we didn't address specifically just\nyet and we are going to discuss them in this section.\nCombining strings\nWhen you want to concatenate strings, you can use the concat() method. This does\nnot change the original string(s); it returns the combined result as a string. You will\nhave to capture the result in a new variable, else it will get lost:\nlet s1 = \"Hello \";\nlet s2 = \"JavaScript\";\nlet result = s1.concat(s2);\nconsole.log(result);\n[ 181 ]\nBuilt-In JavaScript Methods\nThis will log:\nHello JavaScript\nConverting a string to an array\nWith the split() method we can convert a string to an array. Again, we will have to\ncapture the result; it is not changing the original string. Let's use the previous result\ncontaining Hello JavaScript. We will have to tell the split method on what string it\nshould split. Every time it encounters that string, it will create a new array item:\nlet result = \"Hello JavaScript\";\nlet arr_result = result.split(\" \");\nconsole.log(arr_result);\nThis will log:\n[ 'Hello', 'JavaScript' ]\nAs you can see, it creates an array of all the elements separated by a space. We can\nsplit by any character, for example a comma:\nlet favoriteFruits = \"strawberry,watermelon,grapefruit\";\nlet arr_fruits = favoriteFruits.split(\",\");\nconsole.log(arr_fruits);\nThis will log:\n[ 'strawberry', 'watermelon', 'grapefruit' ]\nIt has now created an array with 3 items. You can split on anything, and the string\nyou are splitting on is left out of the result.\nConverting an array to a string\nWith the join() method you can convert an array to a string. Here is a basic\nexample:\nlet letters = [\"a\", \"b\", \"c\"];\nlet x = letters.join();\nconsole.log(x);\n[ 182 ]\nChapter 8\nThis will log:\na,b,c\nThe type of x is string. If you want something else other than a comma, you can\nspecify that, like this:\nlet letters = [\"a\", \"b\", \"c\"];\nlet x = letters.join('-');\nconsole.log(x);\nThis will use the \u2013 instead of the comma. This is the result:\na-b-c\nThis can be nicely combined with the split() method that we covered in the\nprevious section, which does the reverse and converts a string into an array.\nWorking with index and positions\nBeing able to find out what index a certain substring is at within your string is very\nuseful. For example, when you need to search for a certain word through the user\ninput of a log file and create a substring starting at that index. Here is an example of\nhow to find the index of a string. The indexOf() method returns the index, a single\nnumber, of the first character of the substring:\nlet poem = \"Roses are red, violets are blue, if I can do JS, then you\ncan too!\";\nlet index_re = poem.indexOf(\"re\");\nconsole.log(index_re);\nThis is logging 7 to the console, because the first occurrence of re is in are, and the re\nbegins at index 7. When it can't find an index, it will return -1, like this example:\nlet indexNotFound = poem.indexOf(\"python\");\nconsole.log(indexNotFound);\nIt is logging -1 to indicate that the string we are searching for doesn't occur in the\ntarget string. Often you will write an if check to see whether it's -1 before dealing\nwith the result. For example:\nif(poem.indexOf(\"python\") != -1) {\n// do stuff\n}\n[ 183 ]\nBuilt-In JavaScript Methods\nAn alternative way of searching for a particular substring within a string is to use the\nsearch() method:\nlet searchStr = \"When I see my fellow, I say hello\";\nlet pos = searchStr.search(\"lo\");\nconsole.log(pos);\nThis will log 17, because that is the index of lo in fellow. Much like indexOf(), if it\ncannot find it, it will return -1. This is the case for this example:\nlet notFound = searchStr.search(\"JavaScript\");\nconsole.log(notFound);\nsearch() will accept a regex format as input, whereas indexOf() just takes a string.\nindexOf() is faster than the search() method, so if you just need to look for a string,\nuse indexOf(). If you need to look for a string pattern, you'll have to use the search()\nmethod.\nRegex is a special syntax for defining string patterns, with which\nyou can replace all occurrences, but we'll deal with that in Chapter\n12, Intermediate JavaScript.\nMoving on, the indexOf() method is returning the index of the first occurrence,\nbut similarly, we also have a lastIndexOf() method. It returns the index where the\nargument string occurs last. If it cannot find it, it returns -1. Here is an example:\nlet lastIndex_re = poem.lastIndexOf(\"re\");\nconsole.log(lastIndex_re);\nThis returns 24; this is the last time re appears in our poem. It is the second are.\nSometimes you will have to do the reverse; instead of looking for what index a string\noccurs at, you will want to know what character is at a certain index position. This is\nwhere the charAt(index) method comes in handy, where the specified index position\nis taken as an argument:\nlet pos1 = poem.charAt(10);\nconsole.log(pos1);\nThis is logging r, because the character at index 10 is the r of red. If you are asking\nfor the position of an index that is out of the range of the string, it will return an\nempty string, as is happening in this example:\n[ 184 ]\nChapter 8\nlet pos2 = poem.charAt(1000);\nconsole.log(pos2);\nThis will log an empty line to the screen, and if you ask for the type of pos2, it will\nreturn string.\nCreating substrings\nWith the slice(start, end) method we can create substrings. This does not alter the\noriginal string, but returns a new string with the substring. It takes two parameters,\nthe first is the index at which it starts and the second is the end index. If you leave\nout the second index it will just continue until the end of the string from the start.\nThe end index is not included in the substring. Here is an example:\nlet str = \"Create a substring\";\nlet substr1 = str.slice(5);\nlet substr2 = str.slice(0,3);\nconsole.log(\"1:\", substr1);\nconsole.log(\"2:\", substr2);\nThis will log:\n1: e a substring\n2: Cre\nThe first one only has one argument, so it starts at index 5 (which holds an e) and\ngrabs the rest of the string from there. The second one has two arguments, 0 and 3. C\nis at index 0 and a is at index 3. Since the last index is not included in the substring,\nit will only return Cre.\nReplacing parts of the string\nIf you need to replace a part of the string, you can use the replace(old, new)\nmethod. It takes two arguments, one string to look for in the string and one new\nvalue to replace the old value with. Here is an example:\nlet hi = \"Hi buddy\";\nlet new_hi = hi.replace(\"buddy\", \"Pascal\");\nconsole.log(new_hi);\n[ 185 ]\nBuilt-In JavaScript Methods\nThis will log to the console Hi Pascal. If you don't capture the result, it is gone,\nbecause the original string will not get changed. If the string you are targeting\ndoesn't appear in the original string, the replacement doesn't take place and the\noriginal string will be returned:\nlet new_hi2 = hi.replace(\"not there\", \"never there\");\nconsole.log(new_hi2);\nThis logs Hi buddy.\nOne last note here, it is only changing the first occurrence by default. So this example\nwill only replace the first hello in the new string:\nlet s3 = \"hello hello\";\nlet new_s3 = s3.replace(\"hello\", \"oh\");\nconsole.log(new_s3);\nThis logs oh hello. If we wanted to replace all the occurences, we could use the\nreplaceAll() method. This will replace all occurrences with the specified new string,\nlike this:\nlet s3 = \"hello hello\";\nlet new_s3 = s3.replaceAll(\"hello\", \"oh\");\nconsole.log(new_s3);\nThis logs oh oh.\nUppercase and lowercase\nWe can change the letters of a string with the toUpperCase() and toLowerCase()\nbuilt-in methods on string. Again, this is not changing the original string, so we'll\nhave to capture the result:\nlet low_bye = \"bye!\";\nlet up_bye = low_bye.toUpperCase();\nconsole.log(up_bye);\nThis logs:\nBYE!\n[ 186 ]\nChapter 8\nIt converts all the letters to uppercase. We can do the opposite with toLowerCase():\nlet caps = \"HI HOW ARE YOU?\";\nlet fixed_caps = caps.toLowerCase();\nconsole.log(fixed_caps);\nThis will log:\nhi how are you?\nLet's make it a bit more complicated and say that we'd like the first letter of the\nsentence to be capitalized. We can do this by combining some of the methods we\nhave seen already right now:\nlet caps = \"HI HOW ARE YOU?\";\nlet fixed_caps = caps.toLowerCase();\nlet first_capital = fixed_caps.charAt(0).toUpperCase().concat(fixed_\ncaps.slice(1));\nconsole.log(first_capital);\nWe are chaining the methods here; we first grab the first character of fixed_caps\nwith charAt(0) and then make it uppercase by calling toUpperCase() on it. We then\nneed the rest of the string and we get it by concatenating slice(1).\nThe start and end of a string\nSometimes you would want to check what a string starts or ends with. You've\nguessed it, there are built-in methods for this on string. We can imagine this chapter\nis tough to work through, so here is a little encouragement and an example at the\nsame time:\nlet encouragement = \"You are doing great, keep up the good work!\";\nlet bool_start = encouragement.startsWith(\"You\");\nconsole.log(bool_start);\nThis will log true to the console, because the sentence starts with You. Careful here,\nbecause it is case sensitive. So the following example will log false:\nlet bool_start2 = encouragement.startsWith(\"you\");\nconsole.log(bool_start2);\n[ 187 ]\nBuilt-In JavaScript Methods\nIf you don't care about uppercase or lowercase, you can use the previously discussed\ntoLowerCase() method here, so that it will not take uppercase or lowercase into\naccount:\nlet bool_start3 = encouragement.toLowerCase().startsWith(\"you\");\nconsole.log(bool_start3);\nWe are now converting the string to lowercase first, so we know we are only\nworking with lowercase characters here. However, an important side note here is\nthat this will affect performance for huge strings.\nAgain, a more performance-friendly alternative is to use regex.\nGetting excited for Chapter 12, Intermediate JavaScript, yet?\nTo end this section, we can do the same thing for checking whether a string ends\nwith a certain string. You can see it in action here:\nlet bool_end = encouragement.endsWith(\"Something else\");\nconsole.log(bool_end);\nSince it doesn't end with Something else, it will return false.\nPractice exercise 8.4\nUsing string manipulation, create a function that will return a string with the first\nletter of all the words capitalized and the rest of the letters in lowercase. You should\ntransform the sentence thIs will be capiTalized for each word into This Will Be\nCapitalized For Each Word:\n1. Create a string with several words that have letters with different cases, a\nmix of upper and lowercase words.\n2. Create a function that gets a string as an argument, which will be the value\nthat we will manipulate.\n3. In the function first transform everything to lowercase letters.\n4. Create an empty array that can hold the values of the words when we\ncapitalize them.\n5. Convert the phrase into words in an array using the split() method.\n6. Loop through each one of the words that are now in the new array, so you\ncan select each one independently. You can use forEach() for this.\n[ 188 ]\nChapter 8\n7. Using slice() isolate the first letter in each word, then transform it to\nuppercase. Again using slice(), get the remaining value of the word\nwithout including the first letter. Then concatenate the two together to form\nthe word that is now capitalized.\n8. Add the new capitalized word into the blank array that you created. By the\nend of the loop you should have an array with all the words as separate\nitems in the new array.\n9. Take the array of updated words and using the join() method, transform\nthem back into a string with spaces between each word.\n10. Return the value of the newly updated string with capitalized words that can\nthen be output into the console.\nPractice exercise 8.5\nUsing the replace() string method, complete this vowel replacer exercise by\nreplacing the vowels in a string with numbers. You can start with this string:\nI love JavaScript\nAnd turn it into something like the following:\n2 l3v1 j0v0scr2pt\nTake the following steps:\n1. Create the previously specified string, and convert it to lowercase.\n2. Create an array containing the vowels: a, e, i, o, u.\n3. Loop through each letter you have in the array, and output the current letter\ninto the console so that you can see which letter will be converted.\n4. Within the loop, using replaceAll() update each vowel substring with the\nindex value of the letter from the vowel array.\nUsing replace() will only replace the first occurrence;\nif you use replaceAll() this will update all matching\nresults.\n5. Once the loop completes output the result of the new string into the console.\n[ 189 ]\nBuilt-In JavaScript Methods\nNumber methods\nLet's move on to some built-in methods on the Number object. We have seen a few\nalready, these are so popular that some of them have been made into global methods.\nChecking if something is (not) a number\nThis can be done with isNaN(). We have seen this already when we talked about\nglobal methods, we can use this method without Number in front of it. Often you will\nwant to do the opposite, you can negate the function with an ! in front of it:\nlet x = 34;\nconsole.log(isNaN(x));\nconsole.log(!isNaN(x));\nlet str = \"hi\";\nconsole.log(isNaN(str));\nThis will log to the console:\nfalse\ntrue\ntrue\nSince x is a number, isNaN will be false. But this result negated becomes true, since x\nis a number. The string hi is not a number, so it will become false. And this one?\nlet str1 = \"5\";\nconsole.log(isNaN(str1));\nSome funky stuff is going on here, even though 5 is between quotation marks,\nJavaScript still sees that it's a 5 and it will log false. At this point, I'm sure you'd\nwish your partner, family, and coworkers are as understanding and forgiving as\nJavaScript.\nChecking if something is finite\nBy now you might be able to guess the name of the method on Number that checks\nwhether something is finite. It is a very popular one and has been made into a global\nmethod as well, and its name is isFinite(). It returns false for NaN, Infinity, and\nundefined, and true for all other values:\n[ 190 ]\nChapter 8\nlet x = 3;\nlet str = \"finite\";\nconsole.log(isFinite(x));\nconsole.log(isFinite(str));\nconsole.log(isFinite(Infinity));\nconsole.log(isFinite(10 / 0));\nThis will log:\ntrue\nfalse\nfalse\nfalse\nThe only finite number in this list is x. The others are not finite. A string is a not a\nnumber and is therefore not finite. Infinity is not finite and 10 divided by 0 returns\nInfinity (not an error).\nChecking if something is an integer\nYes, this is done with isInteger(). Unlike isNaN() and isFinite(), isInteger() has\nnot been made global and we will have to refer to the Number object to use it. It really\ndoes what you think it would: it returns true if the value is an integer and false\nwhen it's not:\nlet x = 3;\nlet str = \"integer\";\nconsole.log(Number.isInteger(x));\nconsole.log(Number.isInteger(str));\nconsole.log(Number.isInteger(Infinity));\nconsole.log(Number.isInteger(2.4));\nThis will log:\ntrue\nfalse\nfalse\nfalse\nSince the only integer in the list is x.\n[ 191 ]\nBuilt-In JavaScript Methods\nSpecifying a number of decimals\nWe can tell JavaScript how many decimals to use with the toFixed() method. This\nis different from the rounding methods in Math, since we can specify the number of\ndecimals here. It doesn't change the original value, so we'll have to store the result:\nlet x = 1.23456;\nlet newX = x.toFixed(2);\nThis will only leave two decimals, so the value of newX will be 1.23. It rounds the\nnumber normally; you can see this when we ask for one more decimal:\nlet x = 1.23456;\nlet newX = x.toFixed(3);\nconsole.log(x, newX);\nThis logs 1.23456 1.235 as output.\nSpecifying precision\nThere is also a method to specify precision. Again this is different from the rounding\nmethods in the Math class, since we can specify the total number of numbers to look\nat. This comes down to JavaScript looking at the total number of numbers. It is also\ncounting the ones before the dot:\nlet x = 1.23456;\nlet newX = x.toPrecision(2);\nSo the value of newX will be 1.2 here. And also here, it is rounding the numbers:\nlet x = 1.23456;\nlet newX = x.toPrecision(4);\nconsole.log(newX);\nThis will log 1.235.\nNow, let's move on and talk about some related mathematical methods!\nMath methods\nThe Math object has many methods that we can use to do calculations and operations\non numbers. We will go over the most important ones here. You can see all\nthe available ones when you use an editor that shows suggestions and options\nduring typing.\n[ 192 ]\nChapter 8\nFinding the highest and lowest number\nThere is a built-in method max() to find the highest number among the arguments.\nYou can see it here:\nlet highest = Math.max(2, 56, 12, 1, 233, 4);\nconsole.log(highest);\nIt logs 233, because that's the highest number. In a similar way, we can find the\nlowest number:\nlet lowest = Math.min(2, 56, 12, 1, 233, 4);\nconsole.log(lowest);\nThis will log 1, because that is the lowest number. If you try to do this with non-\nnumeric arguments, you will get NaN as a result:\nlet highestOfWords = Math.max(\"hi\", 3, \"bye\");\nconsole.log(highestOfWords);\nIt is not giving 3 as output, because it is not ignoring the text but concluding that\nit cannot determine whether hi should be higher or lower than 3. So it returns NaN\ninstead.\nSquare root and raising to the power of\nThe method sqrt() is used to calculate the square root of a certain number. Here you\ncan see it in action:\nlet result = Math.sqrt(64);\nconsole.log(result);\nThis will log 8, because the square root of 64 is 8. This method works just like the\nmathematics you learned in school. In order to raise a number to a certain power\n(baseexponent, for example 23), we can use the pow(base, exponent) function. Like this:\nlet result2 = Math.pow(5, 3);\nconsole.log(result2);\nWe are raising 5 to the power of 3 here (53), so the result will be 125, which is the\nresult of 5*5*5.\n[ 193 ]\nBuilt-In JavaScript Methods\nTurning decimals into integers\nThere are different ways to turn decimals into integers. Sometimes you will want to\nround a number. This you can do with the round() method:\nlet x = 6.78;\nlet y = 5.34;\nconsole.log(\"X:\", x, \"becomes\", Math.round(x));\nconsole.log(\"Y:\", y, \"becomes\", Math.round(y));\nThis will log:\nX: 6.78 becomes 7\nY: 5.34 becomes 5\nAs you can see it is using normal rounding here. It is also possible that you don't\nwant to round down, but up. For example, if you need to calculate how many wood\nboards you need and you conclude that you need 1.1, 1 is not going to be enough\nto do the job. You'll need 2. In this case, you can use the ceil() method (referring to\nceiling):\nconsole.log(\"X:\", x, \"becomes\", Math.ceil(x));\nconsole.log(\"Y:\", y, \"becomes\", Math.ceil(y));\nThis will log:\nX: 6.78 becomes 7\nY: 5.34 becomes 6\nThe ceil() method is always rounding up to the first integer it encounters. We have\nused this before when we were generating random numbers! Careful with negative\nnumbers here, because -5 is higher than -6. This is how it works, as you can see in\nthis example:\nlet negativeX = -x;\nlet negativeY = -y;\nconsole.log(\"negativeX:\", negativeX, \"becomes\", Math.ceil(negativeX));\nconsole.log(\"negativeY:\", negativeY, \"becomes\", Math.ceil(negativeY));\n[ 194 ]\nChapter 8\nThis will log:\nnegativeX: -6.78 becomes -6\nnegativeY: -5.34 becomes -5\nThe floor() method is doing the exact opposite of the ceil() method. It rounds\ndown to the nearest integer number, as you can see here:\nconsole.log(\"X:\", x, \"becomes\", Math.floor(x));\nconsole.log(\"Y:\", y, \"becomes\", Math.floor(y));\nThis will log:\nX: 6.78 becomes 6\nY: 5.34 becomes 5\nAgain, careful with negative numbers here, because it can feel counterintuitive:\nconsole.log(\"negativeX:\", negativeX, \"becomes\", Math.floor(negativeX));\nconsole.log(\"negativeY:\", negativeY, \"becomes\", Math.floor(negativeY));\nThis logs:\nnegativeX: -6.78 becomes -7\nnegativeY: -5.34 becomes -6\nAnd then one last method, trunc(). This gives the exact same result as floor() for\npositive numbers, but it gets to these results differently. It is not rounding down, it is\nsimply only returning the integer part:\nconsole.log(\"X:\", x, \"becomes\", Math.trunc(x));\nconsole.log(\"Y:\", y, \"becomes\", Math.trunc(y));\nThis will log:\nX: 6.78 becomes 6\nY: 5.34 becomes 5\nWhen we use negative numbers for trunc() we can see the difference:\nnegativeX: -6.78 becomes -6\nnegativeY: -5.34 becomes \u20135\nSo whenever you need to round down, you'll have to use floor(), if you need the\ninteger part of the number, you'll need trunc().\n[ 195 ]\nBuilt-In JavaScript Methods\nExponent and logarithm\nThe exponent is the number to which a base is being raised. We use e (Euler's\nnumber) a lot in mathematics, this is what the exp() method in JavaScript does. It\nreturns the number to which e must be raised to get the input. We can use the exp()\nbuilt-in method of Math to calculate the exponent, and the log() method to calculate\nthe natural logarithm. You can see an example here:\nlet x = 2;\nlet exp = Math.exp(x);\nconsole.log(\"Exp:\", exp);\nlet log = Math.log(exp);\nconsole.log(\"Log:\", log);\nThis will log:\nExp: 7.38905609893065\nLog: 2\nDon't worry if you can't follow along mathematically at this point. You'll figure this\nout whenever you'll need it for your programming.\nPractice exercise 8.6\nExperiment with the Math object with these steps:\n1. Output the value of PI into the console using Math.\n2. Using Math get the ceil() value of 5.7, get the floor() value of 5.7, get the\nround value of 5.7, and output it into the console.\n3. Output a random value into the console.\n4. Use Math.floor() and Math.random() to get a number from 0 to 10.\n5. Use Math.floor() and Math.random() to get a number from 1 to 10.\n6. Use Math.floor() and Math.random() to get a number from 1 to 100.\n7. Create a function to generate a random number using the parameters of min\nand max. Run that function 100 times, returning into the console a random\nnumber from 1 to 100 each time.\nDate methods\nIn order to work with dates in JavaScript we use the built-in Date object. This object\ncontains a lot of built-in functions to work with dates.\n[ 196 ]\nChapter 8\nCreating dates\nThere are different ways to create a date. One way to create dates is by using the\ndifferent constructors. You can see some examples here:\nlet currentDateTime = new Date();\nconsole.log(currentDateTime);\nThis will log the current date and time, in this case:\n2021-06-05T14:21:45.625Z\nBut, this way we are not using the built-in method, but the constructor. There is a\nbuilt-in method, now(), that returns the current date and time, similar to what the no\nargument constructor does:\nlet now2 = Date.now();\nconsole.log(now2);\nThis will log the current time, represented in seconds since January 1st 1970. This is\nan arbitrary date representing the Unix epoch. In this case:\n1622902938507\nWe can add 1,000 milliseconds to the Unix epoch time:\nlet milliDate = new Date(1000);\nconsole.log(milliDate);\nIt will log:\n1970-01-01T00:00:01.000Z\nJavaScript can also convert many string formats to a date. Always mind the order in\nwhich days and months of dates are presented in the date format and the interpreter\nof JavaScript. This can vary depending on the region:\nlet stringDate = new Date(\"Sat Jun 05 2021 12:40:12 GMT+0200\");\nconsole.log(stringDate);\nThis will log:\n2021-06-05T10:40:12.000Z\n[ 197 ]\nBuilt-In JavaScript Methods\nAnd lastly, you can also specify a certain date using the constructor:\nlet specificDate = new Date(2022, 1, 10, 12, 10, 15, 100);\nconsole.log(specificDate);\nThis will log:\n2022-02-10T12:10:15.100Z\nPlease mind this very important detail here, the second parameter is the month. 0 is\nfor January and 11 is for December.\nMethods to get and set the elements of a date\nNow we have seen how to create dates, we'll learn how to get certain parts of dates.\nThis can be done with one of the many get methods. Which you will use depends on\nthe part you need:\nlet d = new Date();\nconsole.log(\"Day of week:\", d.getDay());\nconsole.log(\"Day of month:\", d.getDate());\nconsole.log(\"Month:\", d.getMonth());\nconsole.log(\"Year:\", d.getFullYear());\nconsole.log(\"Seconds:\", d.getSeconds());\nconsole.log(\"Milliseconds:\", d.getMilliseconds());\nconsole.log(\"Time:\", d.getTime());\nThis will log right now:\nDay of week: 6\nDay of month: 5\nMonth: 5\nYear: 2021\nSeconds: 24\nMilliseconds: 171\nTime: 1622903604171\nThe time is so high because it's the number of milliseconds since January 1st 1970.\nYou can change the date in a similar way with a set method. Important to note here\nis that the original date object gets changed with these set methods:\nd.setFullYear(2010);\nconsole.log(d);\n[ 198 ]\nChapter 8\nWe have changed the year of our date object to 2010. This will output:\n2010-06-05T14:29:51.481Z\nWe can also change the month. Let's add the below snippet to our change of the year\ncode. This will change it to October. Please mind that while I'm doing this, I run\nthe code again and again, so the minutes and smaller units of time will vary in the\nexamples when I haven't set these yet:\nd.setMonth(9);\nconsole.log(d);\nIt will log:\n2010-10-05T14:30:39.501Z\nThis is a weird one, in order to change the day, we have to call the setDate() method\nand not the setDay() method. There is no setDay() method, since the day of the\nweek is deducted from the specific date. We cannot change that September 5th 2021 is\na Sunday. We can change the number of days of the month though:\nd.setDate(10);\nconsole.log(d);\nThis will log:\n2010-10-10T14:34:25.271Z\nWe can also change the hours:\nd.setHours(10);\nconsole.log(d);\nNow it will log:\n2010-10-10T10:34:54.518Z\nRemember how JavaScript doesn't like to crash? If you call setHours() with a\nnumber higher than 24, it will roll over to the next date (1 per 24 hours) and after\nusing the modulo operator, whatever is left over from hours % 24 will be the hours.\nThe same process applies for minutes, seconds, and milliseconds.\n[ 199 ]\nBuilt-In JavaScript Methods\nThe setTime() actually overrides the complete date with the inserted epoch time:\nd.setTime(1622889770682);\nconsole.log(d);\nThis will log:\n2021-06-05T10:42:50.682Z\nParsing dates\nWith the built-in parse() method we can parse epoch dates from strings. It accepts\nmany formats, but again you will have to be careful with the order of days and\nmonths:\nlet d1 = Date.parse(\"June 5, 2021\");\nconsole.log(d1);\nThis will log:\n1622851200000\nAs you can see it ends with many zeros, because no time or seconds are specified in\nour string. And here is another example of a completely different format:\nlet d2 = Date.parse(\"6/5/2021\");\nconsole.log(d2);\nThis will also log:\n1622851200000\nThe input for the parse is ISO formats of dates. Quite a few formats can be parsed\nto string, but you'll have to be careful. The result might depend on the exact\nimplementation. Make sure that you know what the format of the incoming string\nis, so that you don't confuse months and days, and make sure that you know the\nbehavior of the implementations. This can only be done reliably if you know what\nthe string format is. So for example when you need to convert data coming from\nyour own database or website's date picker.\nConverting a date to a string\nWe can also convert dates back to strings. For example with these methods:\nconsole.log(d.toDateString());\n[ 200 ]\nChapter 8\nThis will log the day in written format:\nSat Jun 05 2021\nThis is another method that converts it differently:\nconsole.log(d.toLocaleDateString());\nIt will log:\n6/5/2021\nPractice exercise 8.7\nOutput the date with the full month name into the console. When converting to or\nfrom arrays, remember that they are zero-based:\n1. Set up a date object, which can be any date in the future or past. Log the date\nout into the console to see how it is typically output as a date object.\n2. Set up an array with all the named months of the year. Keep them in\nsequential order so that they will match the date month output.\n3. Get the day from the date object value, using getDate().\n4. Get the year from the date object value, using getFullYear().\n5. Get the month of the date object value, using getMonth().\n6. Set up a variable to hold the date of the date object and output the month\nusing the numeric value as the index for the array month name. Due to\narrays being zero-based and the month returning a value of 1-12, the result\nneeds to be subtracted by one.\n7. Output the result into the console.\nChapter projects\nWord scrambler\nCreate a function that returns a value of a word and scrambles the letter order with\nMath.random():\n1. Create a string that will hold a word value of your choice.\n2. Create a function that can intake a parameter of the string word value.\n[ 201 ]\nBuilt-In JavaScript Methods\n3. Just like an array, strings also have a length by default. You can use this\nlength to set the loop maximum value. You will need to create a separate\nvariable to hold this value as the length of the string will be decreasing as the\nloop continues.\n4. Create an empty temporary string variable that you can use to hold the new\nscrambled word value.\n5. Create a for loop that will iterate the number of letters within the string\nparameter starting at 0 and iterating until the original length value of the\nstring is reached.\n6. Create a variable that will randomly select one letter using its index value,\nwith Math.floor() and Math.random() multiplied by the current length of the\nstring.\n7. Add the new letter to the new string and remove it from the original string.\n8. Using console.log() output the newly constructed string from the random\nletters and output to the console both the original string and the new one as\nthe loop continues.\n9. Update the original string by selecting the substring from the index value\nand adding it to the remaining string value from the index plus one onward.\nOutput the new original string value with the removed characters.\n10. As you loop through the content you will see a countdown of the remaining\nletters, the new scrambled version of the word as it is built, and the\ndecreasing letters in the original word.\n11. Return the final result and invoke the function with the original string word\nas an argument. Output this to the console.\nCountdown timer\nCreate code for a countdown timer that can be executed in the console window, and\nwill show the total milliseconds, days, hours, minutes, and seconds remaining until a\ntarget date is reached:\n1. Create an end date that you want to count down to. Format it in a date type\nformat within a string.\n2. Create a countdown function that will parse the endDate() and subtract the\ncurrent date from that end date. This will show the total in milliseconds.\nUsing Date.parse() you can convert a string representation of a date to a\nnumeric value as a number of milliseconds since January 1, 1970, 00:00:00\nUTC.\n[ 202 ]\nChapter 8\n3. Once you have the total milliseconds, to get the days, hours, minutes, and\nseconds you can take the following steps:\n\u2022 To get days you can divide the number of milliseconds in a date,\nremoving the remainder with Math.floor().\n\u2022 To get hours you can use modulus to capture just the remainder once\nthe total days are removed.\n\u2022 To get minutes you can use the value of milliseconds in a minute and\nusing the modulus capture the remainder.\n\u2022 Do the same for seconds by dividing the number by seconds in\nmilliseconds and getting the remainder. If you use Math.floor() you\ncan round down removing any remaining decimal places that will be\nshown in the lower values.\n4. Return all the values within an object with property names indicating what\nthe unit of time the values refer to.\n5. Create a function to use a setTimeout() to run the update() function every\nsecond (1,000 milliseconds). The update() function will create a variable that\ncan temporarily hold the object return values of countdown(), and create an\nempty variable that will be used to create the output values.\n6. Within the same function, using the for loop get all the properties and values\nof the temp object variable. As you iterate through the object update the\noutput string to contain the property name and property value.\n7. Using console.log(), print the output result string into the console.\nSelf-check quiz\n1. Which method will decode the following?\nvar c = \"http://www.google.com?id=1000&n=500\";\nvar e = encodeURIComponent(c);\na. decodeURIComponent(e)\nb. e.decodeUriComponent()\nc. decoderURIComponent(c)\nd. decoderURIComponent(e)\n2. What will be output into the console from the following syntax?\nconst arr = [\"hi\",\"world\",\"hello\",\"hii\",\"hi\",\"hi World\",\"Hi\"];\nconsole.log(arr.lastIndexOf(\"hi\"));\n[ 203 ]\nBuilt-In JavaScript Methods\n3. What is the result of the below code in the console?\nconst arr = [\"Hi\",\"world\",\"hello\",\"Hii\",\"hi\",\"hi World\",\"Hi\"];\narr.copyWithin(0, 3, 5);\nconsole.log(arr);\n4. What is the result of the below code in the console?\nconst arr = [\"Hi\",\"world\",\"hello\",\"Hii\",\"hi\",\"hi World\",\"Hi\"];\nconst arr2 = arr.filter((element,index)=>{\nconst ele2 = element.substring(0, 2);\nreturn (ele2 == \"hi\");\n});\nconsole.log(arr2);\nSummary\nIn this chapter we have dealt with many built-in methods. These are methods that\nare handed to us by JavaScript and that we can use for things that we'll often need.\nWe went over the most used global built-in methods, which are so common they can\nbe used without being prepended by the object they belong to.\nWe also discussed array methods, string methods, number methods, math methods,\nand date methods. You'll find yourself using these methods a lot and chaining them\n(whenever they return a result) when you get more comfortable with JavaScript.\nNow we've become familiar with many of JavaScript's core features, we'll spend the\nnext couple of chapters diving into how it works alongside HTML and the browser\nto bring web pages to life!\n[ 204 ]\n9\nThe Document Object Model\nThe Document Object Model (DOM) is a lot more exciting than it may sound\nat first. In this chapter, we will introduce you to the DOM. This is a fundamental\nconcept you will need to understand before working with JavaScript on web pages. It\ngrabs an HTML page and turns it into a logical tree. If you do not know any HTML,\nno worries. We start with an HTML crash course section that you can skip if you are\nfamiliar with HTML.\nOnce we are sure that we are on the same page with HTML knowledge, we will\nintroduce you to the Browser Object Model (BOM). The BOM holds all the methods\nand properties for JavaScript to interact with the browser. This is information related\nto previous pages visited, the size of the window of the browser, and also the DOM.\nThe DOM contains the HTML elements on the web page. With JavaScript, we can\nselect and manipulate parts of the DOM. This leads to interactive web pages instead\nof static ones. So, long story short, being able to work with the DOM means you're\nable to create interactive web pages!\nWe will cover the following topics:\n\u2022 HTML crash course\n\u2022 Introducing the BOM\n\u2022 Introducing the DOM\n\u2022 Types of DOM elements\n\u2022 Selecting page elements\nWe can imagine you cannot wait to get started, so let's dive into it.\n[ 205 ]\nThe Document Object Model\nNote: exercise, project and self-check quiz answers can be found in\nthe Appendix.\nHTML crash course\nHyper-Text Markup Language (HTML) is the language that shapes the content of\nweb pages. Web browsers understand HTML code and represent it in the format we\nare used to seeing: web pages. Here is a little very basic HTML example:\n<!DOCTYPE html>\n<html>\n<head>\n<title>Tab in the browser</title>\n</head>\n<body>\n<p>Hello web!</p>\n</body>\n</html>\nThis is what this basic web page looks like:\nFigure 9.1: Basic website\nHTML code consists of elements. These elements contain a tag and attributes. We\nwill explain these fundamental concepts in the coming sections.\nHTML elements\nAs you can see, HTML consists of words between <angle brackets>, or elements.\nAny element that gets opened needs to be closed. We open with <elementname> and\nwe close with </elementname>.\n[ 206 ]\nChapter 9\nEverything in between that is part of the element. There are a few exceptions with\nregards to the closing, but you will run into them at your own pace. In the previous\nexample we had multiple elements, including these two. It is an element with the tag\nbody and an inner element with the tag p:\n<body>\n<p>Hello web!</p>\n</body>\nSo elements can contain inner elements. Elements can only be closed if all inner\nelements have been closed. Here is an example to demonstrate that. Here is the right\nway:\n<outer>\n<sub>\n<inner>\n</inner>\n</sub>\n</outer>\nAnd here is the wrong way:\n<outer>\n<sub>\n<inner>\n</sub>\n</inner>\n</outer>\nPlease note, these are just made-up element names. In the last example, we close\nsub before we have closed the inner element. This is wrong; you must always close\nthe inner elements before closing the outer element. We call inner elements child\nelements, and outer elements parent elements. Here is some correct HTML:\n<body>\n<div>\n<p>\n</p>\n</div>\n</body>\n[ 207 ]\nThe Document Object Model\nThis isn't correct HTML, because the div is closed before its inner element p:\n<body>\n<div>\n<p>\n</div>\n</p>\n</body>\nThe different elements represent different pieces of layout. The p we just saw\nrepresents paragraphs. And another common one is h1, which represents a big\ntitle. What is more important is to know the three major building elements of every\nHTML page. The HTML element, the head element, and the body element.\nIn the HTML element, all the HTML takes place. You can only have one of these in\nyour HTML page. It is the outer element, and all other elements are housed in it. It\ncontains the other two top-level elements: head and body. If you are ever confused\nabout the order of head and body, just think of a human; the head is on top of the\nbody.\nIn the head element, we arrange a lot of things that are meant for the browser and not\nfor the user. You can think of certain metadata, such as which JavaScript scripts and\nwhich stylesheets need to be included, and what the searching engine should use\nas a description on the search result page. We will not really be doing a lot with the\nhead element as JavaScript developers, other than including scripts.\nHere's an example of a basic head element:\n<head>\n<title>This is the title of the browser tab</title>\n<meta name=\"description\" content=\"This is the preview in google\">\n<script src=\"included.js\"></script>\n</head>\nThe body element is mostly the content that will appear on the web page. There can\nonly be one body element in the HTML element. Titles, paragraphs, images, lists,\nlinks, buttons, and many more are all elements that we can come across in the body.\nThey have their own tag, so for example, img for image and a for a link. Here is a\ntable including common tags for in the body. It is definitely not an exhaustive list.\n[ 208 ]\nChapter 9\nTag to open Tag to end Description\n<p> </p> Used to create a paragraph.\n<h1> </h1> Used to create a header; smaller headers are h2 to h6.\nGeneric inline container for content that needs to be separated,\n<span> </span>\nfor example, for layout purposes.\n<a> </a> Used for hyperlinks.\n<button> </button> Used for buttons.\n<table> </table> Creates a table.\n<tr> </tr> Creates a table row, must be used inside a table.\n<td> </td> Creates a table data cell inside a row.\n<ul> </ul> Unordered lists, with bullet points, for example.\n<ol> </ol> Ordered lists with numbers.\n<li> </li> List items for inside ordered and unordered lists.\nSection inside the HTML page. It is often used as a container\n<div> </div> for other styles or sections and can easily be used for special\nlayouts.\n<form> <form> Creates an HTML form.\nCreates an input field in which the user can enter information.\n<input> </input> These can be textboxes, checkboxes, buttons, passwords,\nnumbers, dropdowns, radio buttons, and much more.\nSame as input, but written without a closing tag, the / at\n<input /> None the end makes it self-closing. This is only possible for a few\nelements.\nUsed to make a line break (go to a new line). It does not need\n<br> None\nan end tag and is therefore an exception.\nCan you figure out what this HTML example does:\n<html>\n<head>\n<title>Awesome</title>\n</head>\n<body>\n<h1>Language and awesomeness</h1>\n<table>\n[ 209 ]\nThe Document Object Model\n<tr>\n<th>Language</th>\n<th>Awesomeness</th>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>100</td>\n</tr>\n<tr>\n<td>HTML</td>\n<td>100</td>\n</tr>\n</table>\n</body>\n</html>\nIt creates a web page, with Awesome in the tab title. And on the page, it has a big\nheader saying Language and awesomeness. Then there is a table with three rows and\ntwo columns. The first row contains the headers Language and Awesomeness. The\nsecond row holds the values JavaScript and 100, and the third row holds the values\nHTML and 100.\nHTML attributes\nThe last part of HTML that we will discuss in this crash course is HTML attributes.\nAttributes influence the element they are specified on. They exist inside the element\nthey are specified on and are assigned a value using an equal sign. For example, the\nattribute of a (which indicates a hyperlink) is the href. This specifies where the link is\nredirecting to:\n<a href=\"https://google.com\">Ask Google</a>\nThis displays a link with the text Ask Google. And when you click it, you will be sent\nto Google, which can be told by the value of the href attribute. This modifies the a\nelement. There are many attributes out there, but for now you just need to know that\nthey modify the element they are specified on.\nHere is a table with an overview of the most important attributes to get started with\nHTML and JavaScript. Why these are important will unfold somewhere in the next\nchapter.\n[ 210 ]\nChapter 9\nAttribute name Description Can be used on which element?\nGives an element a unique ID, such as\nid All of them\nage.\nUsed to give a custom name to an input, button, form, and quite\nname\nelement. a few we haven't seen yet\nSpecial metadata that can be added to\nclass an element. This can result in a certain Almost all of them inside body\nlayout or JavaScript manipulation.\nSets the initial value of the element it is button, input, li, and a few we\nvalue\nadded to. haven't seen yet\nGives a specified layout to the HTML\nstyle All of them\nelement it is added to.\nWe will introduce you to other attributes when you will need them for practicing\nyour JavaScript magic.\nOkay, this has been one of the more brief HTML crash courses out there. There are\nmany great resources to find more information. If you need more information or\nexplanation at this point, create and open an HTML file like the following and take it\nfrom there!\n<!DOCTYPE html >\n<html>\n<body>\n<a href=\"https://google.com\">Ask google</a>\n</body>\n</html>\nWe will now go ahead and have a look at the BOM and the different parts of the\nBOM.\nThe BOM\nThe BOM, sometimes also called the window browser object, is the amazing \"magic\"\nelement that makes it possible for your JavaScript code to communicate with the\nbrowser.\n[ 211 ]\nThe Document Object Model\nThe window object contains all the properties required to represent the window of\nthe browser, so for example, the size of the window and the history of previously\nvisited web pages. The window object has global variables and functions, and these\ncan all be seen when we explore the window object. The exact implementation of the\nBOM depends on the browser and the version of the browser. This is important to\nkeep in mind while working your way through these sections.\nSome of the most important objects of the BOM we will look into in this chapter are:\n\u2022 History\n\u2022 Navigator\n\u2022 Location\nAs well as the preceding useful objects, we will also consider the DOM in more\ndetail. But first, we can explore the BOM and see the objects of it with the command\nconsole.dir(window). We will enter this in the console of our browser. Let's discuss\nhow to get there first.\nWe can access the HTML elements and the JavaScript if we go to the inspection panel\nof our browser. It differs a bit in how you get there, but often the F12 button while in\nthe browser will do the trick, or else a right-click on the website you want to see the\nconsole for and clicking on Inspect element or Inspect on a macOS device.\nYou should see a side panel (or if you have changed your settings, a separate\nwindow) pop up.\nFigure 9.2: Inspecting a page in the browser\n[ 212 ]\nChapter 9\nNavigate to the Console tab, which is next to the Elements tab in the image above.\nYou can type the following command and press Enter to get information about the\nwindow object:\nconsole.dir(window);\nThis command will produce a view like the following:\nFigure 9.3: Part of the output of console.dir(window) showing the window browser object\nThe console.dir() method shows a list of all the properties of the specified object.\nYou can click on the little triangles to open the objects and inspect them even more.\nThe BOM contains many other objects. We can access these like we saw when\nwe dealt with objects, so for example, we can get the length of the history (in my\nbrowser) accessing the history object of the window and then the length of the\nhistory object, like this:\nwindow.history.length;\nAfter the exercise, we will learn more about the history object.\n[ 213 ]\nThe Document Object Model\nPractice exercise 9.1\n1. Go back to the website you were just viewing and execute the command\nconsole.dir(window).\n2. Can you find the document object that is nested within the window object?\nUnder the root of the window object in the console, you can navigate down to\nthe object that is named document.\n3. Can you find the height and width (in pixels) of your window? You can\nreturn the inner and outer window.\nWindow history object\nThe window browser object also contains a history object. This object can actually\nbe written without the prefix of window because it has been made globally available,\nso we can get the exact same object by using the console.dir(window.history) or\nsimply the console.dir(history) command in the console:\nFigure 9.4: History object\n[ 214 ]\nChapter 9\nThis object is actually what you can use to go back to a previous page. It has a built-\nin function for that called go. What happens when you execute this command?\nwindow.history.go(-1);\nGo ahead and try it for yourself in the console of your browser (make sure that you\ndid visit multiple pages in that tab).\nWindow navigator object\nIn the window object that we just saw, there is a navigator property. This property\nis particularly interesting because it contains information about the browser we are\nusing, such as what browser it is and what version we are using, and what operating\nsystem the browser is running on.\nThis can be handy for customizing the website for certain operating systems. Imagine\na download button that will be different for Windows, Linux, and macOS.\nYou can explore it using this command in the console:\nconsole.dir(window.navigator);\nAs you can see, we start with accessing the window, because navigator is an object\nof the window object. So it is a property of the window object, which we specify with\nthe dot in between. In other words, we access these window objects in the same way\nwe do any other object. But, in this case, as navigator is also globally available, we\ncan also access this without window in front of it with this command:\nconsole.dir(navigator);\n[ 215 ]\nThe Document Object Model\nHere is what the navigator object might look like:\nFigure 9.5: The navigator object\nWindow location object\nAnother rather interesting and unique property of window is the location object.\nThis contains the URL of the current web page. If you override (parts of) that\nproperty, you force the browser to go to a new page! How to do this exactly differs\nper browser, but the next exercise will guide you through this.\n[ 216 ]\nChapter 9\nThe location object consists of a few properties. You can see them by using the\ncommand console.dir(window.location) or console.dir(location) in the console.\nHere is what the output will look like:\nFigure 9.6: The location object\nThere are many objects on the location object, just as with the others we have seen.\nWe can access the nested objects and properties using dot notation (like for other\nobjects we have seen). So, for example, in this browser I can enter the following:\nlocation.ancestorOrigins.length;\nThis will get the length of the ancestorOrigins object, which represents how many\nbrowsing contexts our page is associated with. This can be useful to determine\nwhether the web page is framed in an unexpected context. Not all browsers have this\nobject though; again, this BOM and all the elements of it vary per browser.\nFollow the steps in the practice exercise to do such magic yourself.\nPractice exercise 9.2\nTravel through the window object to get to the location object, then output the values\nof the protocol and href properties of the current file, into the console.\nThe DOM\nThe DOM is actually not very complicated to understand. It is a way of displaying\nthe structure of an HTML document as a logical tree. This is possible because of the\nvery important rule that inner elements need to be closed before outer elements get\nclosed.\n[ 217 ]\nThe Document Object Model\nHere is an HTML snippet:\n<html>\n<head>\n<title>Tab in the browser</title>\n</head>\n<body>\n<h1>DOM</h1>\n<div>\n<p>Hello web!</p>\n<a href=\"https://google.com\">Here's a link!</a>\n</div>\n</body>\n</html>\nAnd here is how we can translate it to a tree:\nFigure 9.7: Tree structure of the DOM of a very basic web page\nAs you can see, the most outer element, html, is at the top of the tree. The next\nlevels, head and body, are its children. head has only one child: title. body has two\nchildren: h1 and div. And div has two children: p and a. These are typically used\nfor paragraphs and links (or buttons). Clearly, complex web pages have complicated\ntrees. This logical tree and a bunch of extra properties make up a web page's DOM.\n[ 218 ]\nChapter 9\nThe DOM of a real web page wouldn't fit on a page in this book. But if you can draw\ntrees like these in your head, it will be of great help soon.\nAdditional DOM properties\nWe can inspect the DOM in a similar fashion as we did the others. We execute\nthe following command in the console of our website (again, the document object\nis globally accessible, so accessing it through the window object is possible but not\nnecessary):\nconsole.dir(document);\nIn this case, we want to see the document object, which represents the DOM:\nFigure 9.8: The DOM\nYou really do not need to understand everything you are seeing here, but it is\nshowing many things, among which are the HTML elements and JavaScript code.\nGreat, right now you have got the basics of the BOM down, and its child object that\nis most relevant to us right now, the DOM. We saw many properties of the DOM\nearlier already. For us, it is most relevant to look at the HTML elements in the DOM.\nThe DOM contains all the HTML elements of a web page.\nThese basics of DOM elements, combined with some knowledge of manipulating\nand exploring the DOM, will open up so many possibilities.\n[ 219 ]\nThe Document Object Model\nIn the next chapter, we will focus on traversing the DOM, finding elements in the\nDOM, and manipulating the DOM. The code we will be writing there will really start\nto look like proper projects.\nSelecting page elements\nThe document object contains many properties and methods. In order to work with\nelements on the page, you'll first have to find them. If you need to change the value\nof a certain paragraph, you'll have to grab this paragraph first. We call this selecting\nthe paragraph. After selecting, we can start changing it.\nTo select page elements to use within your JavaScript code and in order to\nmanipulate elements, you can use either the querySelector() or querySelectorAll()\nmethod. Both of these can be used to select page elements either by tag name, ID, or\nclass.\nThe document.querySelector() method will return the first element within the\ndocument that matches the specified selectors. If no matching page elements are\nfound, the result null is returned. To return multiple matching elements, you can\nuse the method document.querySelectorAll().\nThe querySelectorAll() method will return a static NodeList, which represents a\nlist of the document's elements that match the specified group of selectors. We will\ndemonstrate the usage of both querySelector() and querySelectorAll() with the\nfollowing HTML snippet:\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n</head>\n<body>\n<h1 class=\"output\">Hello World</h1>\n<div class=\"output\">Test</div>\n</body>\n</html>\nWe are going to select the h1 element with querySelector(). Therefore, if there is\nmore than one, it will just grab the first:\nconst ele1 = document.querySelector(\"h1\");\nconsole.dir(ele1);\n[ 220 ]\nChapter 9\nIf you want to select multiple elements, you can use querySelectorAll(). This\nmethod is going to return all the elements that match the selector in an array. In this\nexample, we are going to look for instances of the output class, which is done by\nprepending the class name with a dot.\nconst eles = document.querySelectorAll(\".output\");\nconsole.log(eles);\nAfter selecting, you can start using the dynamic features of the DOM: you can\nmanipulate the elements using JavaScript. Content can be changed in the same way\na variable's contents can be, elements can be removed or added, and styles can be\nadjusted. This can all be done with JavaScript and the way the user interacts with\nthe page can affect this. We have seen the two most common methods to select in the\nDOM here, querySelector() and querySelectorAll(). You can actually select any\nelement you might need with these. There are lots more, which you'll encounter in\nthe next chapter, along with many of the ways the DOM can be manipulated.\nPractice exercise 9.3\nSelect a page element and update the content, change the style, and add attributes.\nCreate an HTML file containing a page element with a class of output using the\nfollowing code template:\n<!DOCTYPE html >\n<html>\n<div class=\"output\"></div>\n<script>\n</script>\n</html>\nWithin the script tags, make the following changes to the output element:\n1. Select the page element as a JavaScript object.\n2. Update the textContent property of the selected page element.\n3. Using the classList.add object method, add a class of red to the element.\n4. Update the id property of the element to tester.\n5. Through the style object, add a backgroundColor property of red to the page\nelement.\n[ 221 ]\nThe Document Object Model\n6. Get the document URL via document.URL and update the text of the output\nelement to contain the value of the document URL. You can log it in the\nconsole first to ensure you have the correct value.\nChapter project\nManipulating HTML elements with JavaScript\nTake the HTML code below:\n<div class=\"output\">\n<h1>Hello</h1>\n<div>Test</div>\n<ul>\n<li id=\"one\">One</li>\n<li class=\"red\">Two</li>\n</ul>\n<div>Test</div>\n</div>\nTake the following steps (and experiment further) to understand how HTML\nelements can be manipulated with JavaScript code.\n1. Select the element with the class output.\n2. Create another JavaScript object called mainList and select only the ul tag\nthat is within the output element. Update the ID of that ul tag to mainList.\n3. Search for the tagName of each div, and output them into the console as an\narray.\n4. Using a for loop, set the ID of each of the div tags to id with a numeric value\nof the order they appear within output. Still within the loop, alternate the\ncolor of the contents of each element in output to be red or blue.\nSelf-check quiz\n1. Go to your favorite website and open the browser console. Type document.\nbody. What do you see in the console?\n2. As we know, with objects, we can write to the property value and assign a\nnew value with the assignment operator. Update the textContent property\nof the document.body object on a web page of your choosing to contain the\nstring Hello World.\n[ 222 ]\nChapter 9\n3. Use what we learned about objects to list out BOM object properties and\nvalues. Try it on the document object.\n4. Now do the same for the window object.\n5. Create an HTML file with an h1 tag. Use JavaScript and select the page\nelement with the h1 tag and assign the element into a variable. Update the\ntextContent property of the variable to Hello World.\nSummary\nWe started this chapter with the basics of HTML. We learned that HTML consists\nof elements and that these elements can contain other elements. Elements have a\ntag that specifies the type of element they are and they can have attributes that alter\nthe element or add some metadata to the element. These attributes can be used by\nJavaScript.\nWe then had a look at the BOM, which represents the window of the browser that\nis being used for the web page and contains other objects, such as the history,\nlocation, navigator, and document objects. The document object is referred to as the\nDOM, which is what you are most likely to be working with. The document contains\nthe HTML elements of the web page.\nWe also started to consider how we can select document elements and use these to\nmanipulate the web page. This is what we'll continue exploring in the next chapter!\n[ 223 ]\n10\nDynamic Element\nManipulation Using the DOM\nLearning the difficult concepts of the previous chapter will be rewarded in this\nchapter. We will take our DOM knowledge one step further and learn how to\nmanipulate the DOM elements on the page with JavaScript. First, we need to learn\nhow to navigate the DOM and select the elements we want. We will learn how we can\nadd and change attributes and values, and how to add new elements to the DOM.\nYou will also learn how to add style to elements, which can be used to make items\nappear and disappear. Then we will introduce you to events and event listeners.\nWe will start easy, but by the end of this chapter you will be able to manipulate\nweb pages in many ways, and you will have the knowledge to create basic web apps.\nThe sky is the limit after getting this skill down.\nAlong the way, we will cover the following topics:\n\u2022 Basic DOM traversing\n\u2022 Accessing elements in the DOM\n\u2022 Element click handler\n\u2022 This and the DOM\n\u2022 Manipulating element style\n\u2022 Changing the classes of an element\n\u2022 Manipulating attributes\n\u2022 Event listeners on elements\n\u2022 Creating new elements\n[ 225 ]\nDynamic Element Manipulation Using the DOM\nNote: exercise, project and self-check quiz answers can be found in\nthe Appendix.\nWe have learned a lot about the DOM already. In order to interact with our web page\nand create a dynamic web page, we have to connect our JavaScript skills to the DOM.\nBasic DOM traversing\nWe can traverse the DOM using the document object that we saw in the previous\nchapter. This document object contains all the HTML and is a representation of the\nweb page. Traversing over these elements can get you to the element you need in\norder to manipulate it.\nThis is not the most common way to do it, but this will help understand how\nit works later. And sometimes, you might actually find yourself needing these\ntechniques as well. Just don't panic: there are other ways to do it, and they will be\nrevealed in this chapter!\nEven for a simple HTML piece there are already multiple ways to traverse the DOM.\nLet's go hunting for treasure in our DOM. We start with this little HTML snippet:\n<!DOCTYPE html>\n<html>\n<body>\n<h1>Let's find the treasure</h1>\n<div id=\"forest\">\n<div id=\"tree1\">\n<div id=\"squirrel\"></div>\n<div id=\"flower\"></div>\n</div>\n<div id=\"tree2\">\n<div id=\"shrubbery\">\n<div id=\"treasure\"></div>\n</div>\n<div id=\"mushroom\">\n<div id=\"bug\"></div>\n</div>\n</div>\n</div>\n</body>\n</html>\n[ 226 ]\nChapter 10\nWe now want to traverse the DOM of this snippet to find the treasure. We can\ndo this by stepping into the document object and navigating our way from there\nonwards. It is easiest to do this exercise in the console in the browser, because that\nway you'll get direct feedback about where in the DOM you are.\nWe can start by using the body property from the document. This contains everything\nthat's inside the body element. In the console, we'll type:\nconsole.dir(document.body);\nWe should get a really long object. There are a few ways from this object to get to our\ntreasure. To do so, let's discuss the children and childNodes property.\nchildNodes is more a complete term than children. Children\njust contain all the HTML elements, so are really the nodes.\nchildNodes also contain text nodes and comments. With children,\nhowever, you can use the ID, and therefore they are easier to use.\nTo get to the treasure using children you would have to use:\nconsole.dir(document.body.children.forest.children.tree2.children.\nshrubbery.children.treasure);\nAs you can see, on every element we select, we have to select the children again. So,\nfirst, we grab the children from the body, then we select forest from these children.\nThen from forest, we want to grab its children again, and from these children we\nwant to select tree2. From tree2 we want to grab the children again, from these\nchildren we need shrubbery. And then finally, we can grab the children from\nshrubbery and select treasure.\nTo get to the treasure using childNodes you would have to use your console a lot\nbecause text and comment nodes are also in there. childNodes is an array, so you will\nhave to select the right index to select the right child. There is one advantage here: it\nis a lot shorter because you won't need to select the name separately.\nconsole.dir(document.body.childNodes[3].childNodes[3].childNodes[1].\nchildNodes[1]);\nYou could also combine them:\nconsole.dir(document.body.childNodes[3].childNodes[3].childNodes[1].\nchildren.treasure);\n[ 227 ]\nDynamic Element Manipulation Using the DOM\nThere are many ways to traverse the document. Depending on what you need, you\nmight have to use one specific way. For tasks that require DOM traversing, it is\nusually the case that if it is works, it is a good solution.\nSo far, we have seen how we can move down the DOM, but we can also move up.\nEvery element knows its parent. We can use the parentElement property to move\nback up. For example, if we use the treasure HTML sample and type this into the\nconsole:\ndocument.body.children.forest.children.tree2.parentElement;\nWe are back at forest, since that is the parent element of tree2. This can be very\nuseful, in particular when combined with functions such as getElementById(),\nwhich we will see later in more detail.\nNot only can we move up and down, we can also move sideways. For example, if\nwe select tree2 like this:\ndocument.body.children.forest.children.tree2;\nWe can get to tree1 using:\ndocument.body.children.forest.children.tree2.previousElementSibling;\nAnd from tree1 we can get to tree2 using:\ndocument.body.children.forest.children.tree1.nextElementSibling;\nAs an alternative to nextElementSibling, which returns the next node that is an\nelement, you could use nextSibling, which will return the next node of any type.\nPractice exercise 10.1\nIn this exercise, experiment with traversing the DOM hierarchy. You can use this\nsample HTML website:\n<!doctype html>\n<html><head><title>Sample Webpage</title></head>\n<body>\n<div class=\"main\">\n<div>\n<ul >\n<li>One</li>\n<li>Two</li>\n[ 228 ]\nChapter 10\n<li>Three</li>\n</ul>\n</div>\n<div>blue</div>\n<div>green</div>\n<div>yellow</div>\n<div>Purple</div>\n</div>\n</body>\n</html>\nTake the following steps:\n1. Create and open the above sample web page, or visit your favorite website,\nand open the document body in the console with console.dir(document).\n2. In the body.children property, select some of the child elements. View how\nthey match the page content.\n3. Navigate to and output the next nodes or elements into the console.\nSelecting elements as objects\nNow we know how to traverse the DOM, we can make changes to the elements.\nInstead of using console.dir(), we can just type in the path to the element we want\nto change. We now have the element as a JavaScript object, and we can make changes\nto all its properties. Let's use a simpler HTML page for this one.\n<!DOCTYPE html>\n<html>\n<body>\n<h1>Welcome page</h1>\n<p id=\"greeting\">\nHi!\n</p>\n</body>\n</html>\nWe can traverse to the p element, for example, by using this code:\ndocument.body.children.greeting;\nThis gives us the power to manipulate the properties of the element, and the element\nitself, directly! Let's execute this newly gained power in the next section.\n[ 229 ]\nDynamic Element Manipulation Using the DOM\nChanging innerText\nThe innerText property focuses on the text between the opening and closing of the\nelement, like so:\n<element>here</element>\nThe retrieved value would be here as plain text. For example, if we go to the console\nand we type:\ndocument.body.children.greeting.innerText = \"Bye!\";\nThe message that is displayed on the page changes from Hi! to Bye! immediately.\ninnerText returns the content of the element as plain text, which is not a problem in\nthis case because there is only text in there. However, if there is any HTML inside\nthe element you need to select, or if you want to add HTML, you cannot use this\nmethod. It will interpret the HTML as text and just output it on the screen. So if we\nexecuted this:\ndocument.body.children.greeting.innerText = \"<p>Bye!</p>\";\nIt will output to the screen <p>Bye!</p>, with the HTML around it, as if it was\nintended as a text string. To get around this, you need to use innerHTML.\nChanging innerHTML\nIf you did not only want to work with plain text, or perhaps specify some HTML\nformatting with your value, you could use the innerHTML property instead. This\nproperty doesn't just process be plain text, it can also be inner HTML elements:\ndocument.body.children.greeting.innerHTML = \"<b>Bye!</b>\";\nThis will display Bye! in bold on the screen, having taken the b element into account\nrather than just printing it as if it were a single string value.\nYou were already promised that you could access elements in a more convenient\nway than traversing the DOM. Let's see how exactly in the next section.\nAccessing elements in the DOM\nThere are multiple methods to select elements from the DOM. After getting the\nelements, we are able to modify them. In the following sections, we will discuss how\nto get elements by their ID, tag name, and class name, and by CSS selector.\n[ 230 ]\nChapter 10\nInstead of traversing it step by step as we just did, we are going to use built-in\nmethods that can go through the DOM and return the elements that match the\nspecifications.\nWe are going to use the following HTML snippet as an example:\n<!DOCTYPE html>\n<html>\n<body>\n<h1>Just an example</h1>\n<div id=\"one\" class=\"example\">Hi!</div>\n<div id=\"two\" class=\"example\">Hi!</div>\n<div id=\"three\" class=\"something\">Hi!</div>\n</body>\n</html>\nLet's start by accessing elements by ID.\nAccessing elements by ID\nWe can grab elements by ID with the getElementById() method. This returns one\nelement with the specified ID. IDs should be unique, as only one result will be\nreturned from the HTML document. There are not a lot of rules for valid IDs; they\ncannot contain spaces and must be at least one character. As with the conventions\nfor naming variables, it is a best practice to make it descriptive and avoid special\ncharacters.\nIf we want to select the element with an ID of two right away, we could use:\ndocument.getElementById(\"two\");\nThis would return the full HTML element:\n<div id=\"two\" class=\"example\">Hi!</div>\nTo reiterate, if you have more than one element with the same ID, it will just give\nyou back the first one it encounters. You should avoid this situation in your code\nthough.\nThis is what the full file looks like with the JavaScript inside the HTML page, instead\nof simply querying the browser console:\n<html>\n<body>\n[ 231 ]\nDynamic Element Manipulation Using the DOM\n<h1 style=\"color:pink;\">Just an example</h1>\n<div id=\"one\" class=\"example\">Hi!</div>\n<div id=\"two\" class=\"example\">Hi!</div>\n<div id=\"three\" class=\"something\">Hi!</div>\n</body>\n<script>\nconsole.log(document.getElementById(\"two\"));\n</script>\n</html>\nIn this case, it would log the full HTML div with id=\"two\" to the console.\nPractice exercise 10.2\nTry experimenting with getting elements by their IDs:\n1. Create an HTML element and assign an ID in the element attribute.\n2. Select the page element using its ID.\n3. Output the selected page element into the console.\nAccessing elements by tag name\nIf we ask for elements by tag name, we get an array as a result. This is because there\ncould be more than one element with the same tag name. It will be a collection of\nHTML elements, or HTMLCollection, which is a special JavaScript object. It's basically\njust a list of nodes. Execute the following command in the console:\ndocument.getElementsByTagName(\"div\");\nIt will give back:\nHTMLCollection(3) [div#one.example, div#two.example, div#three.\nsomething, one: div#one.example, two: div#two.example, three:\ndiv#three.something]\nAs you can see, all the elements in the DOM with the div tag are returned. You\ncan read what the ID is and what the class is from the syntax. The first ones in the\ncollection are the objects: div is the name, # specifies the ID, and . specifies the class.\nIf there are multiple dots, there are multiple classes. Then you can see the elements\nagain (namedItems), this time as key-value pairs with their ID as the key.\n[ 232 ]\nChapter 10\nWe can access them using the item() method to access them by index, like this:\ndocument.getElementsByTagName(\"div\").item(1);\nThis will return:\n<div id=\"two\" class=\"example\">Hi!</div>\nWe can also access them by name, using the namedItem() method, like this:\ndocument.getElementsByTagName(\"div\").namedItem(\"one\");\nAnd this will return:\n<div id=\"one\" class=\"example\">Hi!</div>\nWhen there is only one match, it will still return an HTMLCollection. There is only\none h1 tag, so let's demonstrate this behavior:\ndocument.getElementsByTagName(\"h1\");\nThis will output:\nHTMLCollection [h1]\nSince h1 doesn't have an ID or class, it is only h1. And since it doesn't have an ID, it\nis not a namedItem and is only in there once.\nPractice exercise 10.3\nUse JavaScript to select page elements via their tag name:\n1. Start by creating a simple HTML file.\n2. Create three HTML elements using the same tag.\n3. Add some content within each element so you can distinguish between them\n4. Add a script element to your HTML file, and within it select the page\nelements by tag name and store them in a variable as an array\n5. Using the index value, select the middle element and output it into the\nconsole.\n[ 233 ]\nDynamic Element Manipulation Using the DOM\nAccessing elements by class name\nWe can do something very similar for class names. In our example HTML, we have\ntwo different class names: example and something. If you get elements by class name,\nit gives back an HTMLCollection containing the results. The following will get all\nthe elements with the class example:\ndocument.getElementsByClassName(\"example\");\nThis returns:\nHTMLCollection(2) [div#one.example, div#two.example, one: div#one.\nexample, two: div#two.example]\nAs you can see, it only returned the div tags with the example class. It left out the div\nwith the something class.\nPractice exercise 10.4\nSelect all matching page elements using the class name of the element.\n1. Create a simple HTML file to work on.\n2. Add three HTML elements adding the same class to each. You can use\ndifferent tags as long as the same element class is included. Add some\ncontent within each element so you can distinguish between them.\n3. Add a script element to your file, and within it select the page elements by\nclass name. Assign the resulting HTMLCollection values to a variable.\n4. You can use an index value to select the individual HTMLCollection items,\njust as you would for array items. Starting with an index of 0, select one\nof the page elements with the class name and output the element into the\nconsole.\nAccessing elements with a CSS selector\nWe can also access elements using a CSS selector. We do this with querySelector()\nand querySelectorAll(). We then give the CSS selector as an argument, and this\nwill filter the items in the HTML document and only return the ones that satisfy the\nCSS selector.\nThe CSS selector might look a bit different than you might think at first. Instead of\nlooking for a certain layout, we use the same syntax as we use when we want to\nspecify a layout for certain elements. We haven't discussed this yet, so we will cover\nit here briefly.\n[ 234 ]\nChapter 10\nIf we state p as a CSS selector, it means all the elements with tag p. This would look\nlike this:\ndocument.querySelectorAll(\"p\");\nIf we say p.example, it means all the p tag elements with example as the class. They\ncan also have other classes; as long as example is in there, it will match. We can also\nsay #one, which means select all with an ID of one.\nThis method is the same result as getElementById(). Which one to use is a matter\nof taste when all you really need to do is select by ID\u2014this is great input for a\ndiscussion with another developer. querySelector() allows for more complicated\nqueries, and some developers will state that getElementById() is more readable.\nOthers will claim that you might as well use querySelector() everywhere for\nconsistency. It doesn't really matter at this point, but try to be consistent.\nDon't worry too much about all these options for now; there are many, and you'll\nfigure them out when you need them. This is how you can use the CSS selectors in\nJavaScript.\nUsing querySelector()\nThis first option will select the first element that matches the query. So, enter the\nfollowing in the console, still using the HTML snippet introduced at the start of the\nsection:\ndocument.querySelector(\"div\");\nIt should return:\n<div id=\"one\" class=\"example\">Hi!</div>\nIt only returns the first div, because that's the first one it encounters. We could also\nask for an element with the class .something. If you recall, we select classes using dot\nnotation like this:\ndocument.querySelector(\".something\");\nThis returns:\n<div id=\"three\" class=\"something\">Hi!</div>\nWith this method, you can only use valid CSS selectors: elements, classes, and IDs.\n[ 235 ]\nDynamic Element Manipulation Using the DOM\nPractice exercise 10.5\nUse querySelector() to enable single element selection:\n1. Create another simple HTML file.\n2. Create four HTML elements adding the same class to each. They can be\ndifferent tag names as long as they have the class within the element\nattribute.\n3. Add some content within each element so you can distinguish between them.\n4. Within a script element, use querySelector() to select the first occurrence\nof the elements with that class and store it in a variable. If there is more than\none matching result in querySelector(), it will return the first one.\n5. Output the element into the console.\nUsing querySelectorAll()\nSometimes it is not enough to return only the first instance, but you want to select all\nthe elements that match the query. For example when you need to get all the input\nboxes and empty them. This can be done with querySelectorAll():\ndocument.querySelectorAll(\"div\");\nThis returns:\nNodeList(3) [div#one.example, div#two.example, div#three.something]\nAs you can see, it is of object type NodeList. It contains all the nodes that match the\nCSS selector. With the item() method we can get them by index, just as we did for\nthe HTMLCollection.\nPractice exercise 10.6\nUse querySelectorAll() to select all matching elements in an HTML file:\n1. Create an HTML file and add four HTML elements, adding the same class to\neach one.\n2. Add some content within each element so you can distinguish between them.\n3. Within a script element, use QuerySelectorAll() to select all the matching\noccurrences of the elements with that class and store them in a variable.\n4. Output all the elements into the console, first as an array and then looping\nthrough them to output them one by one.\n[ 236 ]\nChapter 10\nElement click handler\nHTML elements can do something when they are clicked. This is because a\nJavaScript function can be connected to an HTML element. Here is one snippet in\nwhich the JavaScript function associated with the element is specified in the HTML:\n<!DOCTYPE html>\n<html>\n<body>\n<div id=\"one\" onclick=\"alert('Ouch! Stop it!')\">Don't click here!\n</div>\n</body>\n</html>\nWhenever the text in the div gets clicked, a pop up with the text Ouch! Stop\nit! opens. Here, the JavaScript is specified directly after onclick, but if there is\nJavaScript on the page, you can also refer to a function that's in that JavaScript like\nthis:\n<!DOCTYPE html>\n<html>\n<body>\n<script>\nfunction stop(){\nalert(\"Ouch! Stop it!\");\n}\n</script>\n<div id=\"one\" onclick=\"stop()\">Don't click here!</div>\n</body>\n</html>\nThis code is doing the exact same thing. As you can imagine, with bigger functions\nthis would be a better practice. The HTML can also refer to scripts that get loaded\ninto the page.\nThere is also a way to add a click handler using JavaScript. We select the HTML\nelement we want to add the click handler to, and we specify the onclick property.\nHere is a HTML snippet:\n<!DOCTYPE html>\n<html>\n<body>\n[ 237 ]\nDynamic Element Manipulation Using the DOM\n<div id=\"one\">Don't click here!</div>\n</body>\n</html>\nThis code is at the moment not doing anything if you click it. If we want to\ndynamically add a click handler to the div element, we can select it and specify the\nproperty via the console:\ndocument.getElementById(\"one\").onclick = function () {\nalert(\"Auch! Stop!\");\n}\nAs it's been added in the console, this functionality will be gone when you refresh\nthe page.\nThis and the DOM\nThe this keyword always has a relative meaning; it depends on the exact context\nit is in. In the DOM, the special this keyword refers to the element of the DOM it\nbelongs to. If we specify an onclick to send this in as an argument, it will send in\nthe element the onclick is in.\nHere is a little HTML snippet with JavaScript in the script tag:\n<!DOCTYPE html>\n<html>\n<body>\n<script>\nfunction reveal(el){\nconsole.log(el);\n}\n</script>\n<button onclick=\"reveal(this)\">Click here!</button>\n</body>\n</html>\nAnd this is what it will log:\n<button onclick=\"reveal(this)\">Click here!</button>\nAs you can see, it is logging the element it is in, the button element.\n[ 238 ]\nChapter 10\nWe can access the parent of this with a function like this:\nfunction reveal(el){\nconsole.log(el.parentElement);\n}\nIn the above example, the body is the parent of the button. So if we click the button\nwith the new function, it will output:\n<body>\n<script>\nfunction reveal(el.parentElement){\nconsole.log(el);\n}\n</script>\n<button onclick=\"reveal(this)\">Click here!</button>\n</body>\nWe could output any other property of the element the same way; for example,\nconsole.log(el.innerText); would print the inner text value as we saw in the\nChanging innerText section.\nSo, the this keyword is referring to the element, and from this element we can\ntraverse the DOM like we just learned. This can be very useful, for example, when\nyou need to get the value of an input box. If you send this, then you can read and\nmodify the properties of the element that triggered the function.\nPractice exercise 10.7\nCreate a button within a basic HTML document and add the onclick attribute. The\nexample will demonstrate how you can reference object data with this:\n1. Create a function to handle a click within your JavaScript code. You can\nname the function message.\n2. Add this to the onclick function parameters sending the current element\nobject data using this.\n3. Within the message function, use console.dir() to output in the console the\nelement object data that was sent to the function using onclick and this.\n4. Add a second button to the page also invoking the same function on the click.\n[ 239 ]\nDynamic Element Manipulation Using the DOM\n5. When the button is clicked, you should see the element that triggered the\nclick in the console, like so:\nFigure 10.1: Implementing the onclick attribute\nManipulating element style\nAfter selecting the right element from the DOM, we can change the CSS style that\napplies to it. We can do this using the style property. This is how to do it:\n1. Select the right element from the DOM.\n2. Change the right property of the style property of this element.\nWe are going to make a button that will toggle the appearing and disappearing of\na line of text. To hide something using CSS, we can set the display property of the\nelement to none, like this for a p (paragraph) element:\np {\ndisplay: none;\n}\nAnd we can toggle it back to visible using:\np {\ndisplay: block;\n}\nWe can add this style using JavaScript as well. Here is a little HTML and JavaScript\nsnippet that will toggle the displaying of a piece of text:\n<!DOCTYPE html>\n<html>\n[ 240 ]\nChapter 10\n<body>\n<script>\nfunction toggleDisplay(){\nlet p = document.getElementById(\"magic\");\nif(p.style.display === \"none\") {\np.style.display = \"block\";\n} else {\np.style.display = \"none\";\n}\n}\n</script>\n<p id=\"magic\">I might disappear and appear.</p>\n<button onclick=\"toggleDisplay()\">Magic!</button>\n</body>\n</html>\nAs you can see, in the if statement we are checking for whether it is currently\nhiding, if it is hiding, we show it. Otherwise, we hide it. If you click the button and it\nis currently visible, it will disappear. If you click the button when the text is gone, it\nwill appear.\nYou can do all sorts of fun things using this style element. What do you think this\ndoes when you click the button?\n<!DOCTYPE html>\n<html>\n<body>\n<script>\nfunction rainbowify(){\nlet divs = document.getElementsByTagName(\"div\");\nfor(let i = 0; i < divs.length; i++) {\ndivs[i].style.backgroundColor = divs[i].id;\n}\n}\n</script>\n<style>\ndiv {\nheight: 30px;\nwidth: 30px;\nbackground-color: white;\n}\n</style>\n[ 241 ]\nDynamic Element Manipulation Using the DOM\n<div id=\"red\"></div>\n<div id=\"orange\"></div>\n<div id=\"yellow\"></div>\n<div id=\"green\"></div>\n<div id=\"blue\"></div>\n<div id=\"indigo\"></div>\n<div id=\"violet\"></div>\n<button onclick=\"rainbowify()\">Make me a rainbow</button>\n</body>\n</html>\nThis is what you see when you first open the page:\nFigure 10.2: A button that will do wonderful things when it is clicked\nAnd when you click the button:\nFigure 10.3: Beautiful rainbow made by JavaScript at the click of a button\n[ 242 ]\nChapter 10\nLet's go over this script to see how works. First of all, there are a few div tags in\nthe HTML that all have the ID of a certain color. There is a style tag specified in\nHTML, which gives a default layout to these div tags of 30px by 30px and a white\nbackground.\nWhen you click the button, the rainbowify() JavaScript function is executed. In this\nfunction the following things are happening:\n1. All the div elements get selected and stored in an array, divs.\n2. We loop over this divs array.\n3. For every element in the divs array, we are setting the backgroundColor\nproperty of style to the ID of the element. Since all the IDs represent a color,\nwe see a rainbow appear.\nAs you can imagine, you can really have a lot of fun playing around with this. With\njust a few lines of code, you can make all sorts of things appear on the screen.\nChanging the classes of an element\nHTML elements can have classes, and as we have seen, we can select elements by the\nname of the class. As you may remember, classes are used a lot for giving elements a\ncertain layout using CSS.\nWith JavaScript, we can change the classes of HTML elements, and this might trigger\na certain layout that is associated with that class in CSS. We are going to have a look\nat adding classes, removing classes, and toggling classes.\nAdding classes to elements\nThis might sound a bit vague, so let's have a look at an example where we are going\nto add a class to an element, which in this case will add a layout and make the\nelement disappear.\n<!DOCTYPE html>\n<html>\n<body>\n<script>\nfunction disappear(){\ndocument.getElementById(\"shape\").classList.add(\"hide\");\n}\n</script>\n[ 243 ]\nDynamic Element Manipulation Using the DOM\n<style>\n.hide {\ndisplay: none;\n}\n.square {\nheight: 100px;\nwidth: 100px;\nbackground-color: yellow;\n}\n.square.blue {\nbackground-color: blue;\n}\n</style>\n<div id=\"shape\" class=\"square blue\"></div>\n<button onclick=\"disappear()\">Disappear!</button>\n</body>\n</html>\nIn this example, we have some CSS specified in the style tag. Elements with the hide\nclass have a display: none style, meaning they are hidden. Elements with the square\nclass are 100 by 100 pixels and are yellow. But when they have both the square and\nblue class, they are blue.\nWhen we click on the Disappear! button, the disappear() function gets called. This\none is specified in the script tag. The disappear() function changes the classes by\ngetting the classList property of the element with the ID shape, which is the square\nwe are seeing. We are adding the hide class to the classList and because of this, the\nelements get the display: none layout and we can no longer see it.\nRemoving classes from elements\nWe can also remove a class. If we remove the hide class from the classList, for\nexample, we could see our element again because the display: none layout no\nlonger applies.\nIn this example, we are removing another class. Can you figure out what will happen\nif you press the button by looking at the code?\n[ 244 ]\nChapter 10\n<!DOCTYPE html>\n<html>\n<body>\n<script>\nfunction change(){\ndocument.getElementById(\"shape\").classList.remove(\"blue\");\n}\n</script>\n<style>\n.square {\nheight: 100px;\nwidth: 100px;\nbackground-color: yellow;\n}\n.square.blue {\nbackground-color: blue;\n}\n</style>\n<div id=\"shape\" class=\"square blue\"></div>\n<button onclick=\"change()\">Change!</button>\n</body>\n</html>\nWhen the button gets pressed, the change function gets triggered. This function\nremoves the blue class, which removes the blue background color from the layout,\nleaving us with the yellow background color and the square will turn yellow.\nYou may wonder why the square was blue in the first place since it had two layouts\nfor background-color assigned to it with the CSS. This happens with a points system.\nWhen a styling is more specific, it gets more points. So, specifying two classes with\nno space in between means that it applies to elements with these two classes. This is\nmore specific than pointing at one class.\nReferring to an ID in CSS, #nameId, gets even more points and\nwould be prioritized over class-based layouts. This layering allows\nfor less duplicate code, but it can become messy, so always make\nsure to combine the CSS and the HTML well to get the desired\nlayout.\n[ 245 ]\nDynamic Element Manipulation Using the DOM\nToggling classes\nIn some cases, you would want to add a class when it doesn't already have that\nparticular class, but remove it when it does. This is called toggling. There is a special\nmethod to toggle classes. Let's change our first example to toggle the hide class so the\nclass will appear when we press the button the second time, disappear the third time,\nand so on. The blue class was removed to make it shorter; it's not doing anything in\nthis example other than making the square blue.\n<!DOCTYPE html>\n<html>\n<body>\n<script>\nfunction changeVisibility(){\ndocument.getElementById(\"shape\").classList.toggle(\"hide\");\n}\n</script>\n<style>\n.hide {\ndisplay: none;\n}\n.square {\nheight: 100px;\nwidth: 100px;\nbackground-color: yellow;\n}\n</style>\n<div id=\"shape\" class=\"square\"></div>\n<button onclick=\"changeVisibility()\">Magic!</button>\n</body>\n</html>\nPressing the Magic! button will add the class to the classList when it isn't there and\nremove it when it is there. This means that you can see the result every time you\npress the button. The square keeps appearing and disappearing.\n[ 246 ]\nChapter 10\nManipulating attributes\nWe have seen already that we can change the class and style attributes, but there is a\nmore general method that can be used to change any attribute. Just a quick reminder,\nattributes are the parts in HTML elements that are followed by equals signs. For\nexample, this HTML link to Google:\n<a id=\"friend\" class=\"fancy boxed\" href=\"https://www.google.com\">Ask my\nfriend here.</a>\nThe attributes in this example are id, class, and href. Other common attributes are\nsrc and style, but there are many others out there.\nWith the setAttribute() method, we can add or change attributes on an element.\nThis will change the HTML of the page. If you inspect the HTML in the browser you\nwill see that the changed attributes are visible. You can do this from the console and\nsee the result easily, or write another HTML file with this built in as a function. In\nthis HTML snippet, you will see it in action:\n<!DOCTYPE html>\n<html>\n<body>\n<script>\nfunction changeAttr(){\nlet el = document.getElementById(\"shape\");\nel.setAttribute(\"style\", \"background-color:red;border:1px solid\nblack\");\nel.setAttribute(\"id\", \"new\");\nel.setAttribute(\"class\", \"circle\");\n}\n</script>\n<style>\ndiv {\nheight: 100px;\nwidth: 100px;\nbackground-color: yellow;\n}\n[ 247 ]\nDynamic Element Manipulation Using the DOM\n.circle {\nborder-radius: 50%;\n}\n</style>\n<div id=\"shape\" class=\"square\"></div>\n<button onclick=\"changeAttr()\">Change attributes...</button>\n</body>\n</html>\nThis is the page before clicking the button:\nFigure 10.4: Page with a yellow square div\nAfter clicking the button, the HTML of the div becomes:\n<div id=\"new\" class=\"circle\" style=\"background-color:red;border:1px\nsolid black\"></div>\nAs you can see, the attributes are changed. The id has changed from shape to new.\nThe class has changed from square to circle and a style has been added. It will\nlook like this:\nFigure 10.5: Page with a red circle with a black line around it\nThis is a very powerful tool that can be used to interact with the DOM in very\nmany ways. Think, for example, of a tool that can be used to create images, or even\npostcards. Beneath the surface, there is a lot of manipulating going on.\n[ 248 ]\nChapter 10\nIt is important to note here that JavaScript interacts with the DOM\nand not with the HTML file\u2014therefore, the DOM is the one that\ngets changed. If you click the button again, you'll get an error\nmessage in the console because no element with id=\"shape\" is\nfound in the DOM, and as a result we try to call a method on a null\nvalue.\nPractice exercise 10.8\nCreating custom attributes: using an array of names, the following code will update\nthe element's HTML, adding HTML code using the data from the array. The items\nwithin the array will be output to the page as HTML code. The user will be able to\nclick the page elements and they will display the page element attribute values.\nFigure 10.6: Creating custom attributes with an array of names\nAs the HTML will start getting more complex from now on, and we're only trying to\ntest your JavaScript, we will provide HTML templates to use where needed. You can\nuse the following HTML template and provide your answer as the completed script\nelement:\n<!DOCTYPE html>\n<html>\n<head>\n<title>Complete JavaScript Course</title>\n</head>\n<body>\n[ 249 ]\nDynamic Element Manipulation Using the DOM\n<div id=\"message\"></div>\n<div id=\"output\"></div>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. Create an array of names. You can add as many as you want\u2014all the string\nvalues will be output onto the page within a table.\n2. Select the page elements as JavaScript objects.\n3. Add a function and also invoke that function within the JavaScript code. The\nfunction can be called build() as it will be building the page content. Within\nthe build function, you will be setting up the HTML in a table.\n4. Create a table named html, and within the tags, loop through the contents of\nthe array and output the results into the html table.\n5. Add a class called box to one of the cells that has the index value of the item\nfrom the array, adding the same class to the elements for each additional\nrow.\n6. As you create the HTML for the elements within the tr element, create an\nattribute called data-row in the main row element that includes the index\nvalue of the item from the array. In addition, add another attribute within the\nelement called data-name that will contain the text output.\n7. Within the attribute of the same tr element, also add onclick to invoke a\nfunction named getData passing the current element object as this into the\nfunction parameter.\n8. Add the table of HTML code to the page.\n9. Create a function named getData that will be invoked once the HTML tr\nelements are clicked. Once the tr element is clicked, use getAttribute to get\nthe attribute values of the row value and the contents of the text output and\nstore them in different variables.\n10. Using the values in the attributes stored in the preceding step, output the\nvalues into the message element on the page.\n11. Once the user clicks the element on the page, it will display the details\ncoming from the element attributes within the element with the id of\nmessage.\n[ 250 ]\nChapter 10\nEvent listeners on elements\nEvents are things that happen on a web page, like clicking on something, moving the\nmouse over an element, changing an element, and there are many more. We have\nseen how to add an onclick event handler already. In the same way, you can add an\nonchange handler, or an onmouseover handler. There is one special condition, though;\none element can only have one event handler as an HTML attribute. So, if it has an\nonclick handler, it cannot have an onmouseover handler as well. At this point, we\nhave only seen how to add event listeners using HTML attributes like this:\n<button onclick=\"addRandomNumber()\">Add a number</button>\nThere is a way to register event handlers using JavaScript as well. We call these event\nlisteners. Using event listeners, we can add multiple events to one element. This way,\nJavaScript is constantly checking, or listening, for certain events to the elements on\nthe page. Adding event listeners is a two-step process:\n1. Select the element you want to add an event to\n2. Use the addEventListener(\"event\", function) syntax to add the event\nEven though it is two steps, it can be done in one line of code:\ndocument.getElementById(\"square\").addEventListener(\"click\",\nchangeColor);\nThis is getting the element with the ID square and adding the changeColor function\nas the event for whenever it gets clicked. Note that when using event listeners, we\nremove the on prefix from the event type. For example, click here references the\nsame event type as onclick, but we have removed the on prefix.\nLet's consider another way to add an event listener (don't worry, we will review\nthese methods in detail in Chapter 11, Interactive Content and Event Listeners) by\nsetting the event property of a certain object to a function.\nThere is a fun fact here\u2014event listeners often get added during\nother events!\n[ 251 ]\nDynamic Element Manipulation Using the DOM\nWe could reuse our trusty onclick listener in this context, but another common one\nis when the web page is done loading with onload:\nwindow.onload = function() {\n// whatever needs to happen after loading\n// for example adding event listeners to elements\n}\nThis function will then be executed. This is common for window.onload, but less\ncommon for many others, such as onclick on a div (it is possible though). Let's look\nat an example of the first event listener we looked at on a web page. Can you figure\nout what it will be doing when you click on the square?\n<!DOCTYPE html>\n<html>\n<body>\n<script>\nwindow.onload = function() {\ndocument.getElementById(\"square\").addEventListener(\"click\",\nchangeColor);\n}\nfunction changeColor(){\nlet red = Math.floor(Math.random() * 256);\nlet green = Math.floor(Math.random() * 256);\nlet blue = Math.floor(Math.random() * 256);\nthis.style.backgroundColor = `rgb(${red}, ${green}, ${blue})`;\n}\n</script>\n<div id=\"square\" style=\"width:100px;height:100px;background-\ncolor:grey;\">Click for magic</div>\n</body>\n</html>\nThe web page starts with a gray square with the text Click for magic in it. After\nthe web page is done loading, an event gets added for this square. Whenever it\ngets clicked, the changeColor function will be executed. This function uses random\nvariables to change the color using RGB colors. Whenever you click the square, the\ncolor gets updated with random values.\nYou can add events to all sorts of elements. We have only used the click event so\nfar, but there are many more. For example, focus, blur, focusin, focusout, mouseout,\nmouseover, keydown, keypress, and keyup. These will be covered in the next chapter,\nso keep going!\n[ 252 ]\nChapter 10\nPractice exercise 10.9\nTry an alternative way to implement similar logic to Practice exercise 10.7. Use the\nfollowing HTML code as a template for this exercise, and add the contents of the\nscript element:\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n</head>\n<body>\n<div>\n<button>Button 1</button>\n<button>Button 2</button>\n<button>Button 3</button>\n</div>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. Select all the page buttons into a JavaScript object.\n2. Loop through each button, and create a function within the button scope\ncalled output.\n3. Within the output() function, add a console.log() method that outputs\nthe current object's textContent. You can reference the current parent object\nusing the this keyword.\n4. As you loop through the buttons attach an event listener that when clicked\ninvokes the output() function.\nCreating new elements\nIn this chapter, you have seen so many cool ways to manipulate the DOM already.\nThere is still an important one missing, the creation of new elements and adding\nthem to the DOM. This consists of two steps, first creating new elements and second\nadding them to the DOM.\n[ 253 ]\nDynamic Element Manipulation Using the DOM\nThis is not as hard as it may seem. The following JavaScript does just that:\nlet el = document.createElement(\"p\");\nel.innerText = Math.floor(Math.random() * 100);\ndocument.body.appendChild(el);\nIt creates an element of type p (paragraph). This is a createElement() function that\nis on the document object. Upon creation, you need to specify what type of HTML\nelement you would want to create, which in this case is a p, so something like this:\n<p>innertext here</p>\nAnd as innerText, it is adding a random number. Next, it is adding the element as\na new last child of the body. You could also add it to another element; just select the\nelement you want to add it to and use the appendChild() method.\nHere, you can see it incorporated in a HTML page. This page has a button, and\nwhenever it gets pressed, the p gets added.\n<!DOCTYPE html>\n<html>\n<body>\n<script>\nfunction addRandomNumber(){\nlet el = document.createElement(\"p\");\nel.innerText = Math.floor(Math.random() * 100);\ndocument.body.appendChild(el);\n}\n</script>\n<button onclick=\"addRandomNumber()\">Add a number</button>\n</body>\n</html>\nHere is a screenshot of this page after having pressed the button five times.\n[ 254 ]\nChapter 10\nFigure 10.7: Random numbers after pressing the button five times\nOnce we refresh the page, it's empty again. The file with the source code doesn't\nchange and we're not storing it anywhere.\nPractice exercise 10.10\nShopping list: Using the following HTML template, update the code to add new\nitems to the list of items on the page. Once the button is clicked, it will add a new\nitem to the list of items:\n<!DOCTYPE html>\n<html>\n<head>\n<title>Complete JavaScript Course</title>\n<style>\n</style>\n</head>\n<body>\n<div id=\"message\">Complete JavaScript Course</div>\n<div>\n<input type=\"text\" id=\"addItem\">\n<input type=\"button\" id=\"addNew\" value=\"Add to List\"> </div>\n[ 255 ]\nDynamic Element Manipulation Using the DOM\n<div id=\"output\">\n<h1>Shopping List</h1>\n<ol id=\"sList\"> </ol>\n</div>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. Select the page elements as JavaScript objects.\n2. Add an onclick event listener to the add button. Once the button is clicked,\nit should add the contents of the input field to the end of the list. You can call\nthe function addOne().\n3. Within addOne(), create li elements to append to the main list on the page.\nAdd the input value to the list item text content.\n4. Within the addOne() function, get the current value of the addItem input field.\nUse that value to create a textNode with that value, adding it to the list item.\nAppend the textNode to the list item.\nChapter projects\nCollapsible accordion component\nBuild a collapsing and expanding accordion component that will open page\nelements, hiding and showing content when the title tab is clicked. Using the\nfollowing HTML as a template, add the completed script element and create the\ndesired functionality with JavaScript:\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n<style>\n.active {\ndisplay: block !important;\n}\n[ 256 ]\nChapter 10\n.myText {\ndisplay: none;\n}\n.title {\nfont-size: 1.5em;\nbackground-color: #ddd;\n}\n</style>\n</head>\n<body>\n<div class=\"container\">\n<div class=\"title\">Title #1</div>\n<div class=\"myText\">Just some text #1</div>\n<div class=\"title\">Title #2</div>\n<div class=\"myText\">Just some text #2</div>\n<div class=\"title\">Title #3</div>\n<div class=\"myText\">Just some text #3</div>\n</div>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. Using querySelectorAll(), select all the elements with a class of title.\n2. Using querySelectorAll(), select all the elements with a class of myText.\nThis should be the same number of elements as the title elements.\n3. Iterate through all the title elements and add event listeners that, once\nclicked, will select the next element siblings.\n4. Select the element on the click action and toggle the classlist of the\nelement with the class of active. This will allow the user to click the element\nand hide and show the below content.\n5. Add a function that will be invoked each time the elements are clicked that\nwill remove the class of active from all the elements. This will hide all the\nelements with myText.\n[ 257 ]\nDynamic Element Manipulation Using the DOM\nInteractive voting system\nThe below code will create a dynamic list of people that can be clicked, and it will\nupdate the corresponding value with the number of times that name was clicked. It\nalso includes an input field that will allow you to add more users to the list, each of\nwhich will create another item in the list that can be interacted with the same as the\ndefault list items.\nFigure 10.8: Creating an interactive voting system\nUse the following HTML code as a template to add JavaScript to, and provide your\nanswer as the completed script element.\n<!DOCTYPE html>\n<html>\n<head>\n<title>Complete JavaScript Course</title>\n</head>\n<body>\n<div id=\"message\">Complete JavaScript Course</div>\n<div>\n<input type=\"text\" id=\"addFriend\">\n<input type=\"button\" id=\"addNew\" value=\"Add Friend\">\n</div>\n<table id=\"output\"></table>\n<script>\n</script>\n</body>\n</html>\n[ 258 ]\nChapter 10\nTake the following steps:\n1. Create an array of people's names called myArray. This will be the default\noriginal list of names.\n2. Select the page elements as JavaScript objects so they can easily be selected\nwithin the code.\n3. Add event listener to the Add Friend button. Once clicked, this will get the\nvalue from the input field and pass the values to a function that will add\nthe friend list to the page. Additionally, add the new friend's name into the\npeople's names array you created. Get the current value in the input field and\npush that value into the array so the array matches the values on the page.\n4. Run a function to build the content on the page, using the forEach() loop get\nall the items within the array and add them to the page. Include 0 as a default\nfor the vote count, as all individuals should start on zero votes.\n5. Create a main function that will create the page elements, starting with the\nparent table row, tr. Then create three table cell, td, elements. Add content to\nthe table cells, including the vote count in the last column, the person name\nin the middle, and the index plus 1 in the first column.\n6. Append the table cells to the table row and append the table row to the\noutput area on the page.\n7. Add an event listener that will increase the vote counter for that row when\nthe user clicks.\n8. Get the text content from the last column in the row. It should be the value\nof the current counter. Increment the counter by one and make sure the\ndatatype is a number so you can add to it.\n9. Update the last column with the new click counter.\nHangman game\nCreate a Hangman game using arrays and page elements. You can use the following\nHTML template:\n<!doctype html>\n<html><head>\n<title>Hangman Game</title>\n<style>\n.gameArea {\n[ 259 ]\nDynamic Element Manipulation Using the DOM\ntext-align: center;\nfont-size: 2em;\n}\n.box,\n.boxD {\ndisplay: inline-block;\npadding: 5px;\n}\n.boxE {\ndisplay: inline-block;\nwidth: 40px;\nborder: 1px solid #ccc;\nborder-radius: 5px;\nfont-size: 1.5em;\n}\n</style>\n</head>\n<body>\n<div class=\"gameArea\">\n<div class=\"score\"> </div>\n<div class=\"puzzle\"></div>\n<div class=\"letters\"></div>\n<button>Start Game</button>\n</div>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. Set up an array that contains some words or phrases that you want to use in\nthe game.\n2. In JavaScript, create a main game object containing a property to contain the\ncurrent word solution, and another property to contain the array of letters\nof the solution. It should also create an array to contain the page elements\nand correspond with the values of the index values of each letter from the\nsolution, and finally add a property to count the number of letters left to\nsolve and end the game when needed.\n3. Select all the page elements into variables so they are easier to access in the\ncode.\n[ 260 ]\nChapter 10\n4. Add an event listener to the Start Game button, making it clickable, and\nwhen it gets clicked it should launch a function called startGame().\n5. Within startGame(), check if the words array has any words left. If it does,\nthen hide the button by setting the .display object to none. Clear the game\ncontents and set the total to 0. Within the current word in the game object,\nassign a value, which should be the response of shift() from the array\ncontaining the in-game words.\n6. In the game solution, convert the string into an array of all the characters in\nthe word solution using split().\n7. Create a function called builder() that can be used to build the game board.\nInvoke the function within the startGame() function once all the game values\nare cleared and set.\n8. Create a separate function that you can use to generate page elements. In the\nparameters, get the type of element, the parent that the new element will be\nappended to, the output content for the new element, and a class to add to\nthe new element. Using a temporary variable, create the element, add the\nclass, append to the parent, set the textContent, and return the element.\n9. In the builder() function, which will also get invoked once startGame() is\nrun, clear the innerHTML from the letters and puzzle page elements.\n10. Iterate through the game solution array, getting each letter of the solution.\nUse the builder() function to generate page elements, add an output value\nof -, set a class, and append it to the main puzzle page element.\n11. Check if the value is blank, and if it is, clear textContent and update the\nborder to white. If it's not blank, increment the total so that it reflects the total\nnumber of letters that must be guessed. Push the new element into the game\npuzzle array.\n12. Create a new function to update the score so that you can output the current\nnumber of letters left. Add it to the builder() function.\n13. Create a loop to represent the 26 letters of the alphabet. You can generate\nthe letter by using an array containing all the letters. The string method\nfromCharCode() will return the character from the numeric representation.\n14. Create elements for each letter, adding a class of box and appending it to the\nletters page element. As each element gets created, add an event listener\nthat runs a function called checker().\n15. Once the letter gets clicked, we need to invoke the checker() function, which\nwill remove the main class, add another class, remove the event listener, and\nupdate the background color. Also invoke a function called checkLetter(),\npassing the value of the clicked letter into the argument.\n[ 261 ]\nDynamic Element Manipulation Using the DOM\n16. The checkLetter() function will loop through all the solution letters. Add a\ncondition to check if the solution letter is equal to the letter selected by the\nplayer. Make sure to convert the inputted letter to uppercase so that you can\nmatch the letters accurately. Update the matching letters in the puzzle using\nthe game puzzle array and the index from the letter in the solution. The index\nvalues will be the same on each, which provides an easy way to match the\nvisual representation with what is in the array.\n17. Subtract one from the game global object that tracks the total letters left to be\nsolved, invoke the updatescore() function to check if the game is over, and\nupdate the score. Set the textContent of the puzzle to the letter removing the\noriginal dash.\n18. In the updatescore() function, set the score to the number of letters left. If the\ntotal left is less than or equal to zero, the game is over. Show the button so\nthat the player has an option for the next phrase.\nSelf-check quiz\n1. What output will the following code produce?\n<div id=\"output\">Complete JavaScript Course </div>\n<script>\nvar output = document.getElementById('output');\noutput.innerText = \"Hello <br> World\";\n</script>\n2. What output will be seen within the browser page?\n<div id=\"output\">Complete JavaScript Course </div>\n<script>\ndocument.getElementById('output').innerHTML = \"Hello\n<br> World\";\n</script>\n3. What will be seen in the input field from the following code?\n<div id=\"output\">Hello World</div>\n<input type=\"text\" id=\"val\" value=\"JavaScript\">\n<script>\ndocument.getElementById('val').value = document.\ngetElementById('output').innerHTML;\n</script>\n[ 262 ]\nChapter 10\n4. In the following code, what is output into the console when the element with\nthe word three gets clicked? What is the output when the element with the\nword one gets clicked?\n<div class=\"holder\">\n<div onclick=\"output('three')\">Three\n<div onclick=\"output('two')\">Two\n<div onclick=\"output('one')\">One</div>\n</div>\n</div>\n</div>\n<script>\nfunction\noutput(val) {\nconsole.log(val);\n}\n</script>\n5. What line of code needs to be added to remove the event listener when the\nbutton is clicked in the following code?\n<div class=\"btn\">Click Me</div>\n<script>\nconst btn = document.querySelector(\".btn\");\nbtn.addEventListener(\"click\", myFun);\nfunction myFun() {\nconsole.log(\"clicked\");\n}\n</script>\nSummary\nIn this chapter, we really took our web skills to the next level. Manipulating the\nDOM allows all kinds of interactions with the web page, meaning that the web page\nis no longer a static event.\nWe started off by explaining the dynamic web and how to traverse the DOM. After\nhaving walked over the elements manually, we learned that there's an easier way\nto select elements in the DOM with the getElementBy\u2026() and the querySelector()\nmethods. After having selected them, we had the power to modify them, add new\nelements to them, and do all sorts of things using the elements we selected. We\nstarted with some more basic HTML handlers, and we could assign a function to,\nfor example, the onclick attribute of the HTML element.\n[ 263 ]\nDynamic Element Manipulation Using the DOM\nWe also accessed the clicked element using the this argument that was sent in as a\nparameter, and we could modify it in different ways, for example, by changing the\nstyle property. We also saw how to add classes to an element, create new elements,\nand add them to the DOM. And finally, we worked with event listeners on elements\nthat really took our dynamic web pages to the next level. With event listeners, we can\nspecify more than one event handler for a certain element. All these new skills allow\nus to create amazing things in the web browser. You can actually create complete\ngames now!\nThe next chapter will take your event handler skills to the next level and will\nenhance your ability to create interactive web pages even further (and make it a bit\neasier as well!).\n[ 264 ]\n11\nInteractive Content and\nEvent Listeners\nYou are now familiar with the basic manipulation of the Document Object Model\n(DOM). In the last chapter, we had a look at events, and we saw that event listeners\nare constantly monitoring for whether a certain event is taking place; when it does\noccur, the specified event (a function) gets invoked.\nIn this chapter, we are going to take this knowledge one step further and use event\nlisteners to create interactive web content. This chapter is really going to complete\nyour DOM knowledge. We are going to cover the following topics:\n\u2022 Interactive content\n\u2022 Specifying events\n\u2022 The onload event handler\n\u2022 The mouse event handler\n\u2022 The event target property\n\u2022 DOM event flow\n\u2022 onchange and onblur\n\u2022 The key event handler\n\u2022 Drag and drop elements\n\u2022 Form submission\n\u2022 Animating elements\n[ 265 ]\nInteractive Content and Event Listeners\nNote: exercise, project and self-check quiz answers can be found in\nthe Appendix.\nIntroducing interactive content\nInteractive content is content that responds to the actions of a user. Think, for\nexample, of a web app in which you can create postcards dynamically, or play a\ngame on a website in a web browser.\nThis interactive content is made possible by changing the DOM based on user\ninteractions. These interactions could be anything: entering text in an input field,\nclicking somewhere on the page, hovering over a certain element with the mouse, or\na certain input with the keyboard. All these are called events. We have seen events\nalready. But there is actually more to it!\nSpecifying events\nThere are three ways to specify events. We have seen each of these in the previous\nchapter, but let's run through them again now. One is HTML-based and the other\ntwo are JavaScript-based. For this example, we are going to use the click event as\nan example.\nSpecifying events with HTML\nFirst, the HTML way:\n<p id=\"unique\" onclick=\"magic()\">Click here for magic!</p>\nThe great thing about specifying events this way is that it's quite easy to read this\ncode and predict what it is going to do. As soon as you click on the paragraph, the\nfunction magic() will be triggered. There are some downsides too: you can only\nspecify one event this way, and you cannot change the event dynamically either.\nSpecifying events with JavaScript\nHere is the first way to do it using JavaScript.\ndocument.getElementById(\"unique\").onclick = function() { magic(); };\n[ 266 ]\nChapter 11\nWhat is happening here is that we are getting the property that represents the\nselected event and assigning our function to it. So, in this case, we are selecting the\np shown in the previous section by its attribute value unique, grabbing the onclick\nproperty, and assigning the magic() function to it by wrapping it in an anonymous\nfunction. We could also specify the exact function on the spot here. We can overwrite\nthis with another function anytime, making the event that can be fired more\ndynamic.\nWe can also specify different events now, which we cannot do with HTML. So\nwe could also give it a keyup, keydown, or mouseover event, for example\u2014we will\nconsider each of these event types in this chapter.\nIf we wanted to specify event triggers for all the elements of the\npage, we could do so in a loop for a cleaner coding style.\nPractice exercise 11.1\nPersonalize your web pages. Allow users to change the theme of the page display\nbetween regular mode and dark mode.\n1. Within a simple HTML document, set up a Boolean value variable to use that\nwill toggle the color modes.\n2. Use window.onclick to set up a function that outputs a message in the\nconsole when clicked. You can use the value of the Boolean variable.\n3. Within the function, add a condition that checks whether the darkMode\nvariable is true or false.\n4. If false, then update the page style to a background color of black and a font\ncolor of white.\n5. Add an else response that changes the color of the background to white and\nthe color of the text to black. Also, update the value of the darkMode variable\naccordingly.\nSpecifying events with event listeners\nThe last method is using the addEventListener() method to add an event to an\nelement. With this, we can specify multiple functions for the same event, for\nexample, when an element gets clicked.\n[ 267 ]\nInteractive Content and Event Listeners\nWhat is striking for both methods we have looked at\u2014using HTML events and\nassigning to properties\u2014is that the event gets prefixed with on. For example,\nonclick, onload, onfocus, onblur, onchange, etc. This is not the case when we use\nthe addEventListener() method, where we specify the event type within the event\nlistener without the on prefix, as here, with an alternative to onclick:\ndocument.getElementById(\"unique\").addEventListener(\"click\", magic);\nPlease note that we are leaving out the parentheses behind the magic function here.\nWe cannot send in parameters like this. If that is something you have to do, you'd\nhave to wrap the functionality in an anonymous function, like this:\ndocument.getElementById(\"unique\").addEventListener(\"click\", function()\n{ magic(arg1, arg2) });\nIn this chapter, we may use any of these ways to specify an event. We will mostly\nbe using one of the JavaScript options, though.\nPractice exercise 11.2\nCreate several divs with color names in textContent. Add JavaScript to add\nclick event listeners to each element, and as each element is clicked, update the\nbackground color of the body to match the color name in the div.\nThe onload event handler\nWe briefly saw this event handler in the previous chapter. The onload event gets\nfired after a certain element is loaded. This can be useful for a number of reasons. For\nexample, if you want to select an element using getElementById, you'll have to be\nsure this element is loaded in the DOM already. This event is most commonly used\non the window object, but it can be used on any element. When you use it on window,\nthis event gets started when the window object is done loading. Here is how to use it:\nwindow.onload = function() {\n// whatever needs to happen after the page loads goes here\n}\nonload is similar, but it's different for the window and document objects. The\ndifference depends on the web browser you are using. The load event fires at the\nend of the document loading process. Therefore, you will find that all the objects\nin the document are in the DOM and the assets have finished loading.\n[ 268 ]\nChapter 11\nYou can also use the addEventListener() method on any element to handle any\nevent. And it can also be used for the event that all the content in the DOM is loaded.\nThere is a special built-in event for this: DOMContentLoaded(). This event can be used\nto handle the event of the DOM loading, which will get fired immediately after the\nDOM for the page has been constructed when the event is set. Here is how to set it:\ndocument.addEventListener(\"DOMContentLoaded\", (e) => {\nconsole.log(e);\n});\nThis will log to the console when all the DOM content has been loaded. As an\nalternative, you will also often see it in the body tag, like this:\n<body onload=\"unique()\"></body>\nThis is assigning a function called unique() to the body, and it will fire off when\nthe body is done loading. You cannot combine addEventListener() and the HTML\nby using them together. One will overwrite the other, depending on the order of\nthe web page. If you need two events to happen when the DOM is loaded, you will\nneed two addEventListener() calls in your JavaScript.\nPractice exercise 11.3\nUsing a basic HTML file, the below exercise will demonstrate the order of loading for\nthe window object and the document object using DOMContentLoaded, which is an event\nthat fires once the document object content is loaded in the browser. The window\nobject will load afterward, even if the window.onload statement comes first.\n1. Within a basic HTML file, create a function named message that requires two\nparameters, the first one being a string value for the message and the second\nan event object. Within the function, output into the console using console.\nlog the event and the message.\n2. Using the window object, attach an onload function to the event object. Invoke\nthe function, passing a string value of Window Ready and the event object to\nthe message function for output.\n3. Create a second function to capture the DOM content loading, and add an\nevent listener listening for DOMContentLoaded to the document object. Once\nthat event is triggered, pass the event object and a string value of Document\nReady to the message output function.\n4. Change the order of the event listeners, placing the document event statement\nprior to the window onload: does it make a difference in the output?\n[ 269 ]\nInteractive Content and Event Listeners\n5. Using the document object, add the DOMContentLoaded event listener, which\nwill send to the function the arguments of Document Ready and the event\nobject that was triggered.\n6. Run the script and see which event is triggered first; change the order of the\nevents to see if the output sequence changes.\nMouse event handlers\nThere are different mouse event handlers. Mouse events are actions of the mouse.\nThese are the ones we have:\n\u2022 ondblclick: when the mouse is double-clicked\n\u2022 onmousedown: when the mouse clicks on top of an element without the click\nbeing released\n\u2022 onmouseup: when the mouse click on top of an element is released\n\u2022 onmouseenter: when the mouse moves onto an element\n\u2022 onmouseleave: when the mouse leaves an element and all of its children\n\u2022 onmousemove: when the mouse moves over an element\n\u2022 onmouseout: when the mouse leaves an individual element\n\u2022 onmouseover: when the mouse hovers over an element\nLet's have a look at one of these in practice. What do you think this does?\n<!doctype html>\n<html>\n<body>\n<div id=\"divvy\" onmouseover=\"changeColor()\" style=\"width: 100px;\nheight: 100px; background-color: pink;\">\n<script>\nfunction changeColor() {\ndocument.getElementById(\"divvy\").style.backgroundColor =\n\"blue\";\n}\n</script>\n</body>\n</html>\nIf you go with your mouse over the pink square (the div with id divvy), it turns blue\nimmediately. This is because onmouseover is added in the HTML and points to the\nJavaScript function that changes the color of the square.\n[ 270 ]\nChapter 11\nLet's look at a similar slightly more complicated example.\n<!doctype html>\n<html>\n<body>\n<div id=\"divvy\" style=\"width: 100px; height: 100px; background-\ncolor: pink;\">\n<script>\nwindow.onload = function donenow() {\nconsole.log(\"hi\");\ndocument.getElementById(\"divvy\").addEventListener(\"mousedown\",\nfunction() { changeColor(this, \"green\"); });\ndocument.getElementById(\"divvy\").addEventListener(\"mouseup\",\nfunction() { changeColor(this, \"yellow\"); });\ndocument.getElementById(\"divvy\").addEventListener(\"dblclick\",\nfunction() { changeColor(this, \"black\"); });\ndocument.getElementById(\"divvy\").addEventListener(\"mouseout\",\nfunction() { changeColor(this, \"blue\"); });\n}\nconsole.log(\"hi2\");\nfunction changeColor(el, color) {\nel.style.backgroundColor = color;\n}\n</script>\n</body>\n</html>\nWe are still starting with the pink square. There are four event listeners connected to\nthis div:\n\u2022 mousedown: when the button is pressed on the mouse but is not yet released,\nthe square will turn green.\n\u2022 mouseup: as soon as the mouse button gets released, the square will turn\nyellow.\n\u2022 dblclick: this is a favorite. What do you think will happen upon a double-\nclick? A double-click contains two mousedown events and two mouseup events.\nBefore the second mouseup, it is not a double-click. So, the square will get the\ncolors green, yellow, green, black (and then stay black until another event is\nfired).\n\u2022 mouseout: when the mouse leaves the square, it turns blue and stays blue\nuntil one of the three above events is fired again.\n[ 271 ]\nInteractive Content and Event Listeners\nThis allows for a lot of interaction. You can do so many things with this. Just to\ngive you an example of a thing you can do, say you want to have a very dynamic,\nmouseover-driven, product-help decision tool. It will consist of four columns, and\nthe content of the last three columns (from the right) is dynamic content. The first\ncolumn is for categories. The second column contains some more specific product\ncategories for each category. The third column consists of individual products, and\nthe fourth column shows product information. This requires a lot of event listeners,\nand lots of deletion and addition of listeners.\nPractice exercise 11.4\nOur aim is to change the background color of the element on the page as the various\nmouse events occur. On mousedown over the element, the element will turn green.\nWhen the mouse is over the element, it will turn red. As the mouse moves out of the\nelement boundaries, the color will turn yellow. When the mouse is clicked, the color\nwill go green, and when the mouse is released, it will change to blue. The actions also\nbe logged in the console.\n1. Create a blank element on the page and assign a class to it.\n2. Select the element using its class name.\n3. Assign a variable to the element object from the page.\n4. Update the content of the element to say hello world.\n5. Using the style properties of the element, update the height and width, then\nadd a default background color to it.\n6. Create a function to handle two arguments, the first being a color value as a\nstring and the second being the event object of the trigger.\n7. In the function, output the color value to the console, and for the event,\noutput the event type to the console.\n8. Add event listeners to the element: mousedown, mouseover, mouseout, and\nmouseup. For each of these events, send two arguments to the function that\nyou created: a color value and the event object.\n9. Run the code and try it in your browser.\nThe event target property\nWhenever an event gets fired, an event variable becomes available. It has many\nproperties, and you can check it out by using this command in the function that\ngets fired for the event:\nconsole.dir(event);\n[ 272 ]\nChapter 11\nThis will show many properties. One of the most interesting properties for now is the\ntarget property. The target is the HTML element that fired the event. So, we can use\nit to get information from a web page. Let's look at a simple example.\n<!doctype html>\n<html>\n<body>\n<button type=\"button\" onclick=\"triggerSomething()\">Click</button>\n<script>\nfunction triggerSomething() {\nconsole.dir(event.target);\n}\n</script>\n</body>\n</html>\nIn this case, event.target is the button element. In the console, the button element\nand all its properties will be logged, including potential siblings and parents.\nA use case where parent properties can come in handy is in the case of HTML forms,\nwhere there are multiple input fields and a button. A button in a form would often\nhave the form as its direct parent. Via this parent, data from the input fields can be\nfetched. This is demonstrated in the following example:\n<!doctype html>\n<html>\n<body>\n<div id=\"welcome\">Hi there!</div>\n<form>\n<input type=\"text\" name=\"firstname\" placeholder=\"First name\" />\n<input type=\"text\" name=\"lastname\" placeholder=\"Last name\" />\n<input type=\"button\" onclick=\"sendInfo()\" value=\"Submit\" />\n</form>\n<script>\nfunction sendInfo() {\nlet p = event.target.parentElement;\nmessage(\"Welcome \" + p.firstname.value + \" \" + p.lastname.\nvalue);\n}\nfunction message(m) {\ndocument.getElementById(\"welcome\").innerHTML = m;\n}\n[ 273 ]\nInteractive Content and Event Listeners\n</script>\n</body>\n</html>\nThis results in a little form, like this:\nFigure 11.1: Basic HTML form\nAnd once you enter data in the fields and hit Submit, this is what it looks like:\nFigure 11.2: Data entered in the basic HTML form with a dynamic welcome message\nWith this command, event.target[CIT] is the HTML button:\nlet p = event.target.parentElement;\nThe parent element of the button, the form in this case, gets stored in the p variable. p\nis the parent and it represents the form element. So, this command will get the value\nof the input box:\np.firstname.value;\nSimilarly, p.lastname.value gets the last name. We haven't seen this yet, but with\nthe value property, you can get the values of input elements.\nNext, both input values are combined and sent to the message() function. This\nfunction changes the inner HTML of the div to a personalized welcome message,\nwhich is why Hi there! changes to Welcome Maaike van Putten.\nPractice exercise 11.5\nChange the text in a div element on the page. This exercise will demonstrate how\nyou can get the value from an input field and place it within a page element. It also\ncovers tracking button clicks and details about the event target. You can use the\nfollowing HTML document as a template, to which you can add JavaScript:\n<!doctype html>\n<html>\n<head>\n[ 274 ]\nChapter 11\n<title>JS Tester</title>\n</head>\n<body>\n<div class=\"output\"></div>\n<input type=\"text\" name=\"message\" placeholder=\"Your Message\">\n<button class=\"btn1\">Button 1</button>\n<button class=\"btn2\">Button 2</button>\n<div>\n<button class=\"btn3\">Log</button>\n</div>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. Using the above HTML as a template, add the JavaScript code, selecting each\npage element, including the div, the input field, and the button element.\nAssign these element objects to variables in your code.\n2. Create an empty array called log, which will be used to track and log all the\nevents.\n3. Create a function that will capture the event object details in an object,\nadding it to the log array. Get the event target and create an object, adding it\nto the array that stores the input value at the time, the type of event, the class\nname of the target element, and the tag name of the target element.\n4. Within the logging function, get the value of the content within the input and\nassign that value to the textContent of the div.\n5. Clear the div content after the information is added to the log array.\n6. Add an event listener to both of the first two buttons that sends the event\nobject to the tracking function created in the earlier steps.\n7. Attach an event listener to the third button that outputs the log content to the\nconsole.\nDOM event flow\nLet's go over what happens when you click on an element that has multiple elements\nassociated with it.\n[ 275 ]\nInteractive Content and Event Listeners\nWe are going to create nested div elements. In order to illustrate this, there is a style\nadded to the body. It is actually better to add this style in a head tag, and even better\nto have a separate CSS file, but this is a bit shorter to read. This is what the nested div\nelements will look like:\nFigure 11.3: Event bubbling in web page\nAnd below is the code associated with it. The script is on the bottom and will be\nexecuted when the parts on top are done. It is going to add event listeners to every\ndiv, and what it will do is log the innerText. For the outermost element of the nested\ndiv elements, this would be 12345, with a new number on every line.\nSo the question here is, how will it trigger the events? Say we click on the 5, what\nwill be executed? The event of all of the nested div elements, or only the one from 5?\nAnd if it is going to execute all of them, will it execute them from inner to outer event\nor the other way around?\n<!DOCTYPE html>\n<html>\n<body>\n<style>\ndiv {\nborder: 1px solid black;\nmargin-left: 5px;\n}\n</style>\n<div id=\"message\">Bubbling events</div>\n<div id=\"output\">\n1\n<div>\n2\n<div>\n3\n<div>\n4\n[ 276 ]\nChapter 11\n<div>5</div>\n</div>\n</div>\n</div>\n</div>\n<script>\nfunction bubble() {\nconsole.log(this.innerText);\n}\nlet divs = document.getElementsByTagName(\"div\");\nfor (let i = 0; i < divs.length; i++) {\ndivs[i].addEventListener(\"click\", bubble);\n}\n</script>\n</body>\n</html>\nIn this case, it has the default behavior. It will execute all five events, so each one\nof every nested div. And it will execute them inside out. So it will start with the\ninnerText of only 5, then 45, until the last one, 12345:\nFigure 11.4: Console output event bubbling\n[ 277 ]\nInteractive Content and Event Listeners\nThis is called event bubbling. It's what happens when you trigger the handlers on an\nelement. It runs its own events first, then its parents, and so on. It is called bubbling\nbecause it goes up from the inner event to the outer, like water bubbles going up.\nYou can alter this behavior by adding true as a third argument when you add the\nevent listener like this:\ndivs[i].addEventListener(\"click\", bubble, true);\nThis would be the result:\nFigure 11.5: Console output event capturing\nThis moving from the outer element to the inner element is called event capturing. It\nis not used a lot anymore nowadays, but if you do need to implement it, you can use\nthe useCapture argument of addEventListener() (the third argument) and set it to\ntrue. It is false by default.\nThe event capturing and bubbling allows us to apply a principle called event\ndelegation. Event delegation is the concept where instead of adding event handlers\nto every element in a certain block of HTML, we define a wrapper and add the event\nto this wrapper element, and it then applies to all the child elements as well. You'll\napply this principle in the next exercise.\nPractice exercise 11.6\nThis example will demonstrate event capturing and the delegation of page elements.\nBy adding event listeners to the parent and children within the main element, this\nexample will order the console messages according to the event capture properties.\n[ 278 ]\nChapter 11\nAll of the div elements with a class of box will have the same event object. We can\nadd the event target, textcontent, as well into the console so that we can tell which\nelement was clicked.\nUse the following template:\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n<style>\n.box {\nwidth: 200px;\nheight: 100px;\nborder: 1px solid black\n}\n</style>\n</head>\n<body>\n<div class=\"container\">\n<div class=\"box\" id=\"box0\">Box #1</div>\n<div class=\"box\" id=\"box1\">Box #2</div>\n<div class=\"box\" id=\"box2\">Box #3</div>\n<div class=\"box\" id=\"box3\">Box #4</div>\n</div>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. In the JavaScript code, select all the elements with the classes, and separately\nselect the main container element.\n2. Add event listeners to the main container, outputting to the console value\nof 4 for the useCapture argument set to false, and 1 for the useCapture\nargument set to true.\n3. For each of the nested elements, add click event listeners with a console.\nlog() value of 3 for the useCapture argument set to false, and 2 for\nuseCapture set to true.\n[ 279 ]\nInteractive Content and Event Listeners\n4. Click the page elements to see the event delegation and order of output on\nthe page.\n5. Within the box elements on both click events, add to the console an output\nfor the event target's textContent value.\nonchange and onblur\nTwo other events that are often combined with input boxes are onchange and onblur.\nonchange gets triggered when an element changes, for example, when the value of\nan input box changes. onblur gets triggered when an object goes out of focus; for\nexample, when you have the cursor in one input box and the cursor goes to another\ninput box, the onblur event of the first input box will get triggered.\nHere is an example of both in practice; it's an HTML snippet of the body of a web\npage. The inputs contain onblur and onchange, and there is an extra function.\n<!DOCTYPE html>\n<html>\n<body>\n<div id=\"welcome\">Hi there!</div>\n<form>\n<input type=\"text\" name=\"firstname\" placeholder=\"First name\"\nonchange=\"logEvent()\" />\n<input type=\"text\" name=\"lastname\" placeholder=\"Last name\"\nonblur=\"logEvent()\" />\n<input type=\"button\" onclick=\"sendInfo()\" value=\"Submit\" />\n</form>\n<script>\nfunction logEvent() {\nlet p = event.target;\nif (p.name == \"firstname\") {\nmessage(\"First Name Changed to \" + p.value);\n} else {\nmessage(\"Last Name Changed to \" + p.value);\n}\n}\nfunction sendInfo() {\nlet p = event.target.parentElement;\nmessage(\"Welcome \" + p.firstname.value + \" \" + p.lastname.\nvalue);\n}\n[ 280 ]\nChapter 11\nfunction message(m) {\ndocument.getElementById(\"welcome\").innerHTML = m;\n}\n</script>\n</body>\n</html>\nThe firstname input box has an onchange event. If the value of the data in the input\nbox gets changed, this event gets triggered as soon as the input box loses focus.\nIf the input box loses focus when the value has not changed, nothing happens for\nonchange. This is not true for onblur, which is assigned to the lastname input box.\nEven when the value hasn't changed, the event will get triggered.\nAnother event that is often used with input boxes is onfocus, or simply focus when\nused in combination with an event listener. This event is associated with the cursor\nentering the input box, and it gets fired when the input box gets focused on by the\ncursor and input can be entered.\nPractice exercise 11.7\nWith two input fields on the page, JavaScript will listen for changes to the content\nin the input field. Once the input field is not in focus, if the value has been changed,\nthe change event will be invoked. blur and focus are also added to the input fields\nand will get logged to the console as those events occur. Both input elements will\nhave the same event listeners, and as you change the content of the input fields and\nremove focus, the output text content will update using the values of the input field\nthat triggered the event.\nUse the following HTML template:\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n</head>\n<body>\n<div class=\"output1\">\n</div>\n<input type=\"text\" placeholder=\"First Name\" name=\"first\"><br>\n<input type=\"text\" placeholder=\"Last Name\" name=\"last\"><br>\n<script>\n[ 281 ]\nInteractive Content and Event Listeners\n</script>\n</body>\n</html>\nNow take the following steps:\n1. Within the JavaScript code, put the HTML output element into a variable\nobject that you can use to display content on the page.\n2. Select both input fields. You can use querySelector() and\n\"input[name='first']\", which will allow you to make your selection using\nthe input field name.\n3. Add an event listener to the first input and the second input. The event\nlistener should be a change event to track changed values. This will only be\ninvoked if the value in the field is changed and you click off the input field.\n4. Create a separate function to handle the output of the content to the page,\nupdating the textContent of the output element.\n5. Send the values of the input fields as they get changed to the output element\ntextContent.\n6. Add four additional event listeners and listen for blur and focus on each\ninput. Once the event gets triggered, output in the console the value of the\nevent type.\nKey event handler\nThere are several key events. One of them is onkeypress. onkeypress gets triggered,\nwell, you may have guessed this, whenever a key gets pressed. Pressing means here\nwhen the button is pressed and released. If you want an event to happen as soon as\nthe button is pressed (so before releasing), you can use the onkeydown event. If you\nwant the event to happen on release, you can use the onkeyup event.\nThere are many things we can do with key events. For example, we can restrict what\ncharacters can be entered in an input box. Every time a key gets pressed, we can\ncheck the character and decide whether it gets to stay.\nWe can get the key that triggered the event using:\nevent.key;\n[ 282 ]\nChapter 11\nThe following HTML code has two input boxes. Can you see what is happening\nhere?\n<!doctype html>\n<html>\n<body>\n<body>\n<div id=\"wrapper\">JavaScript is fun!</div>\n<input type=\"text\" name=\"myNum1\" onkeypress=\"numCheck()\">\n<input type=\"text\" name=\"myNum2\" onkeypress=\"numCheck2()\">\n<script>\nfunction numCheck() {\nmessage(\"Number: \" + !isNaN(event.key));\nreturn !isNaN(event.key);\n}\nfunction numCheck2() {\nmessage(\"Not a number: \" + isNaN(event.key));\nreturn isNaN(event.key);\n}\nfunction message(m) {\ndocument.getElementById('wrapper').innerHTML = m;\n}\n</script>\n</body>\n</html>\nThe first one checks if a value is a number, and if it is a number, it will write\nNumber: true at the top; else, it will write Number: false at the top. The second one\nis checking for if a value is not a number; if it is not a number, it will write Not a\nnumber: true; else, it will write Not a number: false.\nSo this is one way of using the onkeypress event, but we can do even more. We can\nadd a return statement to our onkeypress event, like this:\nonkeypress=\"return numCheck2()\";\nIf true is returned, the key value gets added to the input box; if false is returned,\nthe key value is not added.\n[ 283 ]\nInteractive Content and Event Listeners\nThe following code snippet only allows numbers to be entered in the input box.\nWhenever the user tries to type something else, the function restricts it.\n<!doctype html>\n<html>\n<body>\n<body>\n<div id=\"wrapper\">JavaScript is fun!</div>\n<input type=\"text\" name=\"myNum1\" onkeypress=\"return numCheck()\"\nonpaste=\"return false\">\n<input type=\"text\" name=\"myNum2\" onkeypress=\"return numCheck2()\"\nonpaste=\"return false\">\n<script>\nfunction numCheck() {\nmessage(!isNaN(event.key));\nreturn !isNaN(event.key);\n}\nfunction numCheck2() {\nmessage(isNaN(event.key));\nreturn isNaN(event.key);\n}\nfunction message(m) {\ndocument.getElementById(\"wrapper\").innerHTML = m;\n}\n</script>\n</body>\n</html>\nAs you can see, return gets included in onkeypress to ensure that only numbers can\nbe entered. One other thing might have caught your eye: onpaste=\"return false\".\nThis is to deal with smart people who copy and paste numbers to a non-numeric\nfield or other characters to a numeric field and still manage to get illegal characters\nin there.\nPractice exercise 11.8\nBy recognizing key presses and detecting the values of characters as key presses\noccur with the element in focus, we can also detect if content is pasted into an input\nfield.\n[ 284 ]\nChapter 11\n1. Create two input fields within your HTML. Add an element to output\ncontent too.\n2. Using JavaScript, select the page elements. You can assign a variable called\noutput to the element with a class of output. Create another variable, eles,\nand select all the input fields (using querySelectorAll()) as its value. This\nway, we can loop through the node list and assign the same events to all the\nmatching elements.\n3. Using forEach(), iterate through all the input elements from the page. Add\nthe same event listeners to all of them.\n4. Add a keydown event listener and check if the value is a number. If it is a\nnumber, then add it to the output area.\n5. On keyup, output to the console the value of the key.\n6. Check if there was a paste in the input field; if there was, then you can output\nthe word paste to the console.\nDrag and drop elements\nThere are also special event handlers for dragging and dropping. We need a starting\npoint to be able to drag and drop something. Let's create the CSS and HTML for a\ndragging and dropping area.\n<!doctype>\n<html>\n<head>\n<style>\n.box {\nheight: 200px;\nwidth: 200px;\npadding: 20px;\nmargin: 0 50px;\ndisplay: inline-block;\nborder: 1px solid black;\n}\n#dragme {\nbackground-color: red;\n}\n</style>\n</head>\n[ 285 ]\nInteractive Content and Event Listeners\n<body>\n<div class=\"box\">1</div>\n<div class=\"box\">2</div>\n</body>\n</html>\nNow we are also going to include an element that is going to be dragged and\ndropped. In order to mark an element as something that can be dragged, we need to\nadd the attribute draggable. This is the code we are going to include in our second\ndiv, with the first div around it:\n<div class=\"box\"> 1\n<div id=\"dragme\" draggable=\"true\">\nDrag Me Please!\n</div>\n</div>\nThen we need to decide what we are going to do when we drop the draggable\nelement. We need to specify this within the box it can be dragged to. We are going to\nadd the functionality to both boxes, so it can be dragged over to one and back to the\nother.\n<div class=\"box\" ondrop=\"dDrop()\" ondragover=\"nDrop()\">\n1\n<div id=\"dragme\" ondragstart=\"dStart()\" draggable=\"true\">\nDrag Me Please!\n</div>\n</div>\n<div class=\"box\" ondrop=\"dDrop()\" ondragover=\"nDrop()\">2</div>\nAnd here is the script that will be added to the end of the body:\n<script>\nlet holderItem;\nfunction dStart() {\nholderItem = event.target;\n}\nfunction nDrop() {\nevent.preventDefault();\n}\n[ 286 ]\nChapter 11\nfunction dDrop() {\nevent.preventDefault();\nif (event.target.className == \"box\") {\nevent.target.appendChild(holderItem);\n}\n}\n</script>\nWe start by specifying a variable in the script for the item that we want to hold when\ndragging. When the ondragstart event gets triggered, we are going to store the\nelement that is being dragged in the holderItem variable. Normally, when you drag,\ndropping is not allowed by the design of HTML. In order to allow the drop, you'll\nhave to prevent the default event that means the item you want to drop cannot be\ndropped. You can do this with:\nevent.preventDefault();\nUsually, before you prevent the default behavior, you would do some checks to\nsee whether the element that is being dropped can be accepted at that place. In the\nexample above, we check whether the class name of the element that it is being\ndropped to is box. If that's the case, we append holderItem as a child to the box.\nWe have created a page that allows moving an HTML element from one box to\nanother. If you try to release it anywhere else, the element goes back instead to its\nprevious location.\nPractice exercise 11.9\nThis will be an \"I'm not a robot\" check. Drag and drop can be used to ensure that it's\na live user that is acting on a page rather than a robot. This exercise will demonstrate\nhow to create a visual dragging effect on an active element, in which the user clicks\nthe mouse down to create a drag action, and once the mouse button is released, the\ndrop event occurs. The successful actions are logged to the console.\nYou can use the following template:\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n<style>\n.box {\n[ 287 ]\nInteractive Content and Event Listeners\nwidth: 100px;\nheight: 100px;\nborder: 1px solid black;\nbackground-color: white;\n}\n.red {\nbackground-color: red;\n}\n</style>\n</head>\n<body>\n<div class=\"box\">1\n<div id=\"dragme\" draggable=\"true\">\nDrag Me Please!\n</div>\n</div>\n<div class=\"box\">2</div>\n<script>\n</script>\n</body>\n</html>\nThe preceding HTML creates styles for an element that will be used for dropping,\nand sets a width, height, and border. It creates another class called red and adds a\nred background to the active element so that it shows as active, along with two div\nelements that will have classes of the box element for dropoff. Finally, we create a\ndiv nested in one of the boxes that has an id of dragme and an attribute of draggable\nset to true, with some instructive text added to aid the user. Complete the script by\ntaking the following steps:\n1. Select the draggable element as an object in your JavaScript code.\n2. Add an event listener of dragstart, where it updates the draggable element\nto 0.5 opacity.\n3. Add another event listener of dragend that removes the value for the opacity.\n4. Using querySelectorAll(), select all the dropoff boxes.\n5. Add event listeners to all the dropoff boxes, setting things such that the red\nclass is added to an element whenever the user triggers the dragenter event.\nThis will indicate to the user that the action is taking place.\n6. Set dragover, adding a preventDefault() method to the element to disable\nany actions that might already exist.\n[ 288 ]\nChapter 11\n7. On dragleave, remove the red class.\n8. Adding the event listener of drop to the box, append the draggable element\nto the event target.\n9. To work across all elements in the same way, remove the default action\nof the element. You can use the preventDefault() method to this event to\ndisable any actions that might already exist.\n10. You can add console log messages to any of these events to better track them.\nForm submission\nWhen a form gets submitted, an event can be triggered. This can be achieved in\ndifferent ways, and one of them is to add to the form element the onsubmit attribute.\n<form onsubmit=\"doSomething()\">\nThe function that is listed there will get triggered whenever input of type submit is\nsubmitted.\n<input type=\"submit\" value=\"send\">\nWe can do more with the HTML of the form element; for example, we can redirect to\nanother page. We have to specify the way we want to send the form values using the\nmethod attribute and the location page using the action attribute.\n<form action=\"anotherpage.html\" method=\"get\" onsubmit=\"doStuff()\">\nDon't worry about the get for now; this just means that values get sent via the URL.\nURLs look like this when you use get:\nwww.example.com/anotherpage.html?name=edward\nAfter the question mark, the variables that are sent along are shown in key-value\npairs. This is the form that created the URL when edward was inserted for name.\n<!doctype html>\n<html>\n<body>\n<form action=\"anotherpage.html\" method=\"get\">\n<input type=\"text\" placeholder=\"name\" name=\"name\" />\n<input type=\"submit\" value=\"send\" />\n</form>\n</body>\n</html>\n[ 289 ]\nInteractive Content and Event Listeners\nanotherpage.html can use the variables from the URL. This can be done in the\nJavaScript of anotherpage.html doing something like this:\n<!doctype html>\n<html>\n<body>\n<script>\nlet q = window.location.search;\nlet params = new URLSearchParams(q);\nlet name = params.get(\"name\");\nconsole.log(name);\n</script>\n</body>\n</html>\nSo far we have been submitting forms using the action and onsubmit attributes.\naction redirects to another location. This could be the API endpoint of a different\npage. onsubmit specifies an event that is fired when the form gets submitted.\nThere are more cool things we can do with the onsubmit event of forms. Remember\nthe use of return for onkeypress? We can do something similar here! If we make the\ncalled function return a Boolean, the form will only get submitted when the Boolean\nis true.\nThis comes in very handy if we want to do some form validation before sending it.\nHave a look at this code and see if you can figure out when it can be submitted.\n<!doctype html>\n<html>\n<body>\n<div id=\"wrapper\"></div>\n<form action=\"anotherpage.html\" method=\"get\" onsubmit=\"return\nvalForm()\">\n<input type=\"text\" id=\"firstName\" name=\"firstName\"\nplaceholder=\"First name\" />\n<input type=\"text\" id=\"lastName\" name=\"lastName\"\nplaceholder=\"Last name\" />\n<input type=\"text\" id=\"age\" name=\"age\" placeholder=\"Age\" />\n<input type=\"submit\" value=\"submit\" />\n</form>\n<script>\nfunction valForm() {\nvar p = event.target.children;\n[ 290 ]\nChapter 11\nif (p.firstName.value == \"\") {\nmessage(\"Need a first name!!\");\nreturn false;\n}\nif (p.lastName.value == \"\") {\nmessage(\"Need a last name!!\");\nreturn false;\n}\nif (p.age.value == \"\") {\nmessage(\"Need an age!!\");\nreturn false;\n}\nreturn true;\n}\nfunction message(m) {\ndocument.getElementById(\"wrapper\").innerHTML = m;\n}\n</script>\n</body>\n</html>\nThis form contains three input fields and one input button. The fields are for last\nname, first name, and age. When one of them is missing, the form will not submit,\nbecause the function will return false. A message will also be added to the div\nabove the form, explaining what went wrong.\nPractice exercise 11.10\nThis will be about creating a form validator. In this exercise, you will be checking to\nensure that the desired values are entered into the input fields. The code will check\nthe input values that are entered by the user to match predetermined conditions for\nthose field values.\n1. Set up a form, adding three input fields inside: First, Last, and Age. Add a\nsubmit button.\n2. Within the JavaScript code, select the form as an element object.\n3. Add an submit event listener to the form.\n4. Set up the default value for error as false.\n5. Create a function named checker(), which will check to see the length of a\nstring and output the string length to the console.\n[ 291 ]\nInteractive Content and Event Listeners\n6. Add conditions to each of the field values, first checking if the value is there\nand then returning an error if the response is false, before changing the error\nvariable to true.\n7. Use console.log() to log the details about the error.\n8. For the age input value, check the value to see if the age provided is 19 or\nover, otherwise cause an error.\n9. At the end of the validation, check if error is true; if it is, use\npreventDefault() to stop the form submission. Log the errors to the console.\nAnimating elements\nLastly, we want to show you that you can animate using HTML, CSS, and JavaScript.\nThis allows us to do even cooler things with our web page. For example, we can\ntrigger an animation as an event. This can be used for many different purposes, for\nexample, to illustrate an explanation, to draw the user's eyes to a certain location, or\nto play a game.\nLet's show you a very basic example. We can use the position key and set it to\nabsolute in CSS. This makes the position of the element relative to its nearest\npositioned parent. Here, that would be the body. This is the code for a purple square\nthat moves from left to right when a button is clicked.\n<!doctype html>\n<html>\n<style>\ndiv {\nbackground-color: purple;\nwidth: 100px;\nheight: 100px;\nposition: absolute;\n}\n</style>\n<body>\n<button onclick=\"toTheRight()\">Go right</button>\n<div id=\"block\"></div>\n<script>\nfunction toTheRight() {\nlet b = document.getElementById(\"block\");\nlet x = 0;\nsetInterval(function () {\n[ 292 ]\nChapter 11\nif (x === 600) {\nclearInterval();\n} else {\nx++;\nb.style.left = x + \"px\";\n}\n}, 2);\n}\n</script>\n</body>\n</html>\nWe need to give the div block an absolute position, because we rely on the CSS left\nproperty to make it move. In order to be to the left of something, that something\nneeds to be absolute, else the left property cannot be positioned relative to it. In this\ncase, we need to be a certain number of pixels to the left of the div; this is why we\nneed the position of the div to be absolute, so the position of the moving box can be\nrelative to that of its parent.\nWhen we click the button, the function toTheRight() gets triggered. This function\ngrabs block and stores it in b. It sets x to 0. Then we use a very powerful built-in\nJavaScript function: setInterval(). This function keeps on evaluating an expression\nuntil clearInterval() gets called. This is done when x, the measure of how far we\nare to the left, reaches 600. It repeats it every 2 milliseconds, which gives it the sliding\nlook.\nYou can at the same time also set different positions, like style.top, style.bottom,\nand style.right, or append new elements to create a snow effect, or show constantly\ndriving cars. With this in your toolbox, the sky is the limit.\nPractice exercise 11.11\nHere we will click the purple square and watch it move on the page. This exercise\nwill demonstrate creating the events for a simple interactive element on the page.\nThe purple square will move every time it's clicked; once it reaches the boundaries\nof the page, it will change direction from left to right and right to left, depending on\nwhat side it hits.\n1. Set up styling for an element, setting height and width before setting\nposition to absolute.\n2. Create an element that you want to move on the page.\n[ 293 ]\nInteractive Content and Event Listeners\n3. Select and store the element using JavaScript.\n4. Set up an object with values for speed, direction, and position.\n5. Add an event listener for if the element is clicked on.\n6. Set a default value of 30 for the value of the interval counter.\n7. If the counter is less than 1, then end the interval and clear it.\n8. Once the interval has run 30 times using the value of x, the element will\nstand still and wait to be clicked again.\n9. While in motion, check if the position value is greater than 800 or less than 0,\nwhich means it needs to change direction. The direction value will provide\nthe direction of movement. If the movement takes the box outside the\nboundaries of the container, we need to send it in the other direction. This\ncan be done by multiplying by negative one. If the value is positive, it will\nbecome negative, sending the element to the left. If the value is negative, it\nwill become positive, sending the element to the right.\n10. Update the style.left position value of the element, assigning the value of\nthe position that was updated. Add px, as the assigned value of the style is a\nstring.\n11. Output the result to the console.\nChapter projects\nBuild your own analytics\nFigure out which elements are clicked on in a page and record their IDs, tags, and\nclass name.\n1. Create a main container element within your HTML.\n2. Add four elements inside the main element, each having a class of box and a\nunique ID with unique text content.\n3. Set up your JavaScript code to contain an array that you can use for tracking,\nadding details from each click into it.\n4. Select the main container element as a variable object in your code.\n5. Add an event listener to capture clicks on the element.\n6. Create a function to handle the clicks. Get the target element from the event\nobject.\n[ 294 ]\nChapter 11\n7. Check if the element has an ID, so that you don't track clicks on the main\ncontainer.\n8. Set up an object to track the values; include the element textContent, id,\ntagName, and className.\n9. Add the temporary object to your tracking array.\n10. Output the values captured in your tracking array to your console.\nStar rating system\nCreate a star rating component that is fully interactive and dynamic using JavaScript.\nFigure 11.6: Creating a star rating system\nYou can use the following HTML and CSS as a starting template. Provide the\ncompleted script element as your answer.\n<!DOCTYPE html>\n<html>\n<head>\n<title>Star Rater</title>\n<style>\n.stars ul {\nlist-style-type: none;\npadding: 0;\n}\n.star {\nfont-size: 2em;\ncolor: #ddd;\ndisplay: inline-block;\n}\n.orange {\ncolor: orange;\n}\n.output {\nbackground-color: #ddd;\n}\n[ 295 ]\nInteractive Content and Event Listeners\n</style>\n</head>\n<body>\n<ul class=\"stars\">\n<li class=\"star\">&#10029;</li>\n<li class=\"star\">&#10029;</li>\n<li class=\"star\">&#10029;</li>\n<li class=\"star\">&#10029;</li>\n<li class=\"star\">&#10029;</li>\n</ul>\n<div class=\"output\"></div>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. Select all the stars within the ul that have a class of stars into an object, and\ncreate another object for the output element.\n2. Create another object to contain the results of calling querySelectorAll() on\nelements with a class of star.\n3. Loop through the resulting node list, adding to the element object the value\nof the index plus 1, and adding an event listener listening for a click. Attach a\nfunction called starRate() to the click event of each star element.\n4. Within the starRate() function, add to the output the value of the star using\nthe event target and the element object's star value, which was set in the\nprevious step.\n5. Loop through all the stars using forEach() to check if the index value of\nthe star element is less than the star value; if it is, apply a class of orange.\nOtherwise, remove the class of orange from the classList element.\nMouse position tracker\nTrack your mouse's x and y position within an element. As you move the mouse\nwithin the element, the x position and y position values will update.\n1. Create a page element and add sizing to it, including height and width.\nCreate a class style named active that has a background-color property of\nred. Finally, create an output element that will contain your text.\n[ 296 ]\nChapter 11\n2. Select the main container element and add event listeners to it. Listen for\nmouseover, mouseout, and mousemove.\n3. On mouseover, add the active class, and on mouseout, remove the active\nclass.\n4. On mousemove, call a function that tracks the event element clientX and\nclientY positions, embeds them in a human-readable sentence, and outputs\nit into the output element.\nBox clicker speed test game\nThe objective here is to click on the red box as quickly as possible once it appears.\nThe box will be randomly placed within a container and positioned with random\nvalues. The box will have an event listener that will track the start and click times to\ncalculate the duration of the click events. You can use the following template, as the\nHTML gets a little complex here\u2014just add the <script> element to make the HTML\ninteractive!\n<!DOCTYPE html>\n<html>\n<head>\n<title>Click Me Game</title>\n<style>\n.output {\nwidth: 500px;\nheight: 500px;\nborder: 1px solid black;\nmargin: auto;\ntext-align: center;\n}\n.box {\nwidth: 50px;\nheight: 50px;\nposition: relative;\ntop: 50px;\nleft: 20%;\nbackground-color: red;\n}\n.message {\ntext-align: center;\n[ 297 ]\nInteractive Content and Event Listeners\npadding: 10px;\nfont-size: 1.3em;\n}\n</style>\n</head>\n<body>\n<div class=\"output\"></div>\n<div class=\"message\"></div>\n<script>\n</script>\n</body>\n</html>\nWork with the above HTML code using JavaScript.\n1. There are two div elements, one with a class of output for the gameplay area\nand another with a class of message to provide instructions to the player.\nSelect those main elements as objects using JavaScript.\n2. Using JavaScript, create another element within the output element, and\ncreate a div that will be the main clickable object. Attach a style called box to\nthe new element and append it to the output element.\n3. Using JavaScript, add to the message area instructions for the user: Press\nto Start. They will need to click the newly created div with a class of box to\nstart the game.\n4. Create a global object called game to track the timer and the start time values.\nThis is to be used to calculate the duration in seconds between when the\nelement is shown and when the player clicks it. Set start to null.\n5. Create a function that will generate a random number and return a random\nvalue, with the argument being the maximum value you want to use.\n6. Add an event listener to the box element. Once clicked, this should start the\ngameplay. Set the display of the box element to none. Using the setTimeout()\nmethod, invoke a function called addBox() and set the timeout to a random\nmillisecond value. You can adjust as needed; this will be the time between\nthe click object box being shown and it disappearing. If the start value is\nnull, then add text content to the message area of loading.\n7. If start has a value, then get the Unix time value using getTime() of the\ncurrent date object, subtract the game start time from the current time value\nin milliseconds, and then divide by 1,000 to get the value in seconds. Output\nthe result to the message element for the player to see their score.\n[ 298 ]\nChapter 11\n8. Create a function to handle the clicks, adding the box once the timer is up.\nUpdate the message text content to say Click it\u2026. Set the game start value\nto the current time in milliseconds. Apply the style of block to the element so\nit shows on the page.\n9. From the available space (500 total container width minus the 50 box\nwidth) set a random position above and to the left of the element using the\nMath.random().\n10. Play the game and update the styling as needed.\nSelf-check quiz\n1. Where can you find window.innerHeight and window.innerWidth?\n2. What does preventDefault() do?\nSummary\nIn this chapter, we have dealt with quite a few topics to increase the interactivity\nof web pages. We saw the different ways to specify events and then we dived into\nsome different event handlers in more detail. The onload event handler gets fired\nwhen the element it was specified on, often the document object, is fully loaded.\nThis is great to wrap other functionality in, because it avoids selecting DOM\ncontent that is not there yet.\nWe also saw the mouse event handlers, for responding to all the different things that\ncan be done with a mouse on a web page. The use of all these event handlers is very\nsimilar, but they each enable a different type of interaction with the user. We also\nsaw that we can access the element that fired an event by calling event.target. This\nproperty holds the element that fired an event.\nWe also dived into onchange, onblur, and the key event handlers in more detail.\nAfter that, we saw how to trigger interaction when forms are submitted. We looked\nat the HTML action attribute, which redirects the handling of submission, and the\nonsubmit event, which deals with form submission. We then saw some things that\nwe can do with all these events, such as specifying a drag and drop on a page and\nanimating elements.\nIn the next chapter, we will move on to some more advanced topics that will take\nyour existing JavaScript skills to the next level!\n[ 299 ]\n12\nIntermediate JavaScript\nThe concepts and solution approaches presented up to this point in the book are not\nthe only way to think about solving issues. In this chapter, we will challenge you to\nlook a little deeper, be curious, and practice the good habit of optimizing solutions.\nIn previous chapters, you were promised great things about this chapter because\nthe optimal use of some built-in methods require knowledge of regular expressions,\nwhich we will cover in this chapter. There is a lot more fun to be had though\u2014here is\na list of topics that we'll cover:\n\u2022 Regular expressions\n\u2022 Functions and the arguments object\n\u2022 JavaScript hoisting\n\u2022 Strict mode\n\u2022 Debugging\n\u2022 Using cookies\n\u2022 Local storage\n\u2022 JSON\nAs you can see, a selection of diverse topics, but all advanced and fun. The sections\nin this chapter are not as related to each other as you might have gotten used to\nby now. They are mostly individual topics that can help to really enhance your\nunderstanding and improve your JavaScript knowledge a lot.\n[ 301 ]\nIntermediate JavaScript\nNote: exercise, project and self-check quiz answers can be found in\nthe Appendix.\nRegular expressions\nRegular expressions, also known as regex, are simply ways to describe text patterns.\nYou can consider them next-level strings. There are different regex implementations.\nThis means that depending on the interpreter, regex might differ a bit in the way\nthey're written. However, they are somewhat standardized, so you write them\n(almost) the same for all versions of regex. We are going to use regex for JavaScript.\nRegex can be very useful in many situations, for example when you need to look for\nerrors in a large file or retrieve the browser agent a user is using. They can also be\nused for form validation, as with regex you can specify valid patterns for field entries\nsuch as email addresses or phone numbers.\nRegex is not only useful for finding strings, but can also be used for replacing\nstrings. By now you might think, so regex is amazing, but is there a catch? And yes,\nunfortunately, there is a catch. At first, regex might kind of look like your neighbor's\ncat walked over your keyboard and just typed some random characters by accident.\nThis regex checks for a valid email, for example:\n/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/g\nFear not, after this section, you will be able to decipher the secret patterns within the\nregex. We are not going to go through everything there is to say about regex, but we\nwill establish a solid level of familiarity that will allow you to work with them and\nexpand your knowledge as you go.\nLet's start off easy. The regex pattern is specified between two slashes. This is a valid\nregex expression:\n/JavaScript/\nThe above expression will match if a given string contains the word JavaScript.\nWhen it matches, this means the result is positive. And this can be used to do many\nthings.\nWe can use the JavaScript built-in match() function for this. This function returns the\nregex match on the result (if there is one) in the form of the substring that matched\nthe starting position of this string and the input string.\n[ 302 ]\nChapter 12\nThere are actually other built-in functions that use regex, but we will see them later.\nmatch() is just a convenient function to demonstrate how regex works. You can see it\nin action here:\nlet text = \"I love JavaScript!\";\nconsole.log(text.match(/javascript/));\nThis logs null because it is case-sensitive by default and therefore is not a match. If we\nhad looked for /ava/ or simply /a/, it would have matched because it contains ava and\na. If you want it to be case-insensitive, you can specify this using an i after the slash. In\nthis case-insensitive example, the expression will match the previous string:\nconsole.log(text.match(/javascript/i));\nThis will actually log the result, because it is now case-insensitive, and from that\npoint of view, our string does contain javascript. Here is the result:\n[\n'JavaScript',\nindex: 7,\ninput: 'I love JavaScript!',\ngroups: undefined\n]\nThe result is an object, containing the found match and the index it started on, as\nwell as the input that was looked through. The groups are undefined. You can create\ngroups with round parentheses, as you'll see when we get to the section on groups.\nYou can often find regex in JavaScript in combination with the built-in search and\nreplace method on strings, which we'll cover next.\nSpecifying multiple options for words\nIn order to specify a certain range of options, we can use this syntax:\nlet text = \"I love JavaScript!\";\nconsole.log(text.match(/javascript|nodejs|react/i));\nHere, the expression matches either javascript, nodejs, or react. At this point, we\nare only matching for the first encounter and then we quit. So this is not going to find\ntwo or more matches right now\u2014it will output the same thing as before:\nlet text = \"I love React and JavaScript!\";\nconsole.log(text.match(/javascript|nodejs|react/i));\n[ 303 ]\nIntermediate JavaScript\nIt logs this:\n[\n'React',\nindex: 7,\ninput: 'I love React and JavaScript!',\ngroups: undefined\n]\nIf we wanted to find all matches, we could specify the global modifier, g. It is very\nsimilar to what we did for case-insensitive searches. In this example, we are checking\nfor all matches, and it is case-insensitive. All the modifiers are behind the last slash.\nYou can use multiple modifiers at the same time as we do below, or you could decide\nto only use g:\nlet text = \"I love React and JavaScript!\";\nconsole.log(text.match(/javascript|nodejs|react/gi));\nThis returns both React and JavaScript as a result:\n[ 'React', 'JavaScript' ]\nAs you can see, the result looks very different now. As soon as you specify g, the\nmatch function will just return an array of the matching words. This is not too\nexciting in this case, since these are the words we asked for. But it can be more of a\nsurprise with a more complex pattern. This is exactly what we'll learn next.\nCharacter options\nSo far, our expressions are quite readable, right? The character options are where\nthings start to look, well, intense. Say we want to search for a string of only one\ncharacter equal to a, b, or c. We would write it like this:\nlet text = \"d\";\nconsole.log(text.match(/[abc]/));\nThis will return null because d is not a, b, or c. We can include d like this:\nconsole.log(text.match(/[abcd]/));\nThis will log:\n[ 'd', index: 0, input: 'd', groups: undefined ]\n[ 304 ]\nChapter 12\nSince this is a range of characters, we can write it shorter, like this:\nlet text = \"d\";\nconsole.log(text.match(/[a-d]/));\nAnd if we wanted any letter, lowercase or uppercase, we would write this:\nlet text = \"t\";\nconsole.log(text.match(/[a-zA-Z]/));\nWe could actually also use the case-insensitive modifier to achieve the same thing,\nbut this would apply to the regex pattern as a whole, and you might only need it to\napply for the specific character:\nconsole.log(text.match(/[a-z]/i));\nWe would get a match on both of the preceding options. If we wanted to include\nnumbers as well, we would write:\nconsole.log(text.match(/[a-zA-Z0-9]/));\nAs you can see, we can just concatenate ranges to specify one character, much\nlike we could concatenate possible options for that specific character, like [abc].\nThe example above specifies three possible ranges. It will match any lowercase or\nuppercase letter from a to z and all numeric characters as well.\nIt doesn't mean that it can only match a one-character string by the way; it will just\nmatch the first matching character in this case because we didn't add the global\nmodifier. However, these special characters won't match:\nlet text = \"\u00e4\u00e9!\";\nconsole.log(text.match(/[a-zA-Z0-9]/));\nTo address the difficulty of complex characters not matching an expression, the dot\nfunctions as a special wildcard character in regex that can match any character. So\nwhat do you think this does?\nlet text = \"Just some text.\";\nconsole.log(text.match(/./g));\nSince it has the global modifier, it is going to match any character. This is the result:\n[\n'J', 'u', 's', 't',\n' ', 's', 'o', 'm',\n[ 305 ]\nIntermediate JavaScript\n'e', ' ', 't', 'e',\n'x', 't', '.'\n]\nBut what if you only wanted to find a match for the dot character itself? If you want\na special character (one that is used in regex to specify a pattern) to have a normal\nmeaning, or a normal character to have a special meaning, you can escape it using\nthe backslash:\nlet text = \"Just some text.\";\nconsole.log(text.match(/\\./g));\nIn this example, we escape the dot by adding a preceding backslash. Therefore, it\ndoesn't function as a wildcard and it is going to look for a literal match. This is what\nit will return:\n[ '.' ]\nThere are some normal characters that get a special meaning by adding a backslash\nbefore them. We are not going to cover them in depth, but let's have a look at some\nexamples:\nlet text = \"I'm 29 years old.\";\nconsole.log(text.match(/\\d/g));\nIf we escape the d, \\d, it matches any digit. We are doing a global search so it will\nspecify any digit. This is the result:\n[ '2', '9' ]\nWe can also escape the s, \\s, which matches all whitespace characters:\nlet text = \"Coding is a lot of fun!\";\nconsole.log(text.match(/\\s/g));\nThe above example will just return a few spaces, but tabs and other types of\nwhitespace are also included:\n[ ' ', ' ', ' ', ' ', ' ' ]\nA very useful one is \\b, which matches text only when it's at the beginning of a word.\nSo, in the following example, it is not going to match the instances of in in beginning:\nlet text = \"In the end or at the beginning?\";\nconsole.log(text.match(/\\bin/gi));\n[ 306 ]\nChapter 12\nThis is what it will end up logging:\n[ 'In' ]\nEven though you can check for characters being numbers, the match() method\nbelongs to the string object, so you implement it on numeric variables. For example,\ntry the following:\nlet nr = 357;\nconsole.log(nr.match(/3/g));\nYou should receive a TypeError saying that nr.match() is not a function.\nGroups\nThere are many reasons to group your regex. Whenever you want to match a group\nof characters, you can surround them with parentheses. Have a look at this example:\nlet text = \"I love JavaScript!\";\nconsole.log(text.match(/(love|dislike)\\s(javascript|spiders)/gi));\nHere it is going to look for either love or dislike, followed by a whitespace\ncharacter, followed by javascript or spiders, and it will do so for all occurrences\nwhile ignoring whether they are in uppercase or lowercase. This is what it will log:\n[ 'love JavaScript' ]\nLet's just say we can match on roughly four combinations here. Two of them seem to\nmake more sense to me personally:\n\u2022 Love spiders\n\u2022 Dislike spiders\n\u2022 Love JavaScript\n\u2022 Dislike JavaScript\nGroups are very powerful when we know how to repeat them. Let's see how to\ndo that. Very often, you'll find yourself in need of repeating a certain regex piece.\nWe have several options for this. For example, if we want to match any four\nalphanumeric characters in a sequence, we could just write this:\nlet text = \"I love JavaScript!\";\nconsole.log(text.match(/[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-\n9]/g));\n[ 307 ]\nIntermediate JavaScript\nThis will produce the following as output:\n[ 'love', 'Java', 'Scri' ]\nThis is a terrible way to go about repeating a block: let's look for better options. If we\nonly want it to be present 0 or 1 times, we can use the question mark. So this is for\noptional characters, for example:\nlet text = \"You are doing great!\";\nconsole.log(text.match(/n?g/gi));\nThis looks for a g character that may or not may be preceded by an n. Therefore, this\nwill log:\n[ 'ng', 'g' ]\nArguably, one time is not really an example of repeating. Let's look at getting more\nrepetitions. If you want something at least once, but optionally more often, you can\nuse the plus sign: +. Here is an example:\nlet text = \"123123123\";\nconsole.log(text.match(/(123)+/));\nThis is going to match for the group 123 one or more times. And since this string is\npresent, it will find a match. This is what will be logged:\n[ '123123123', '123', index: 0, input: '123123123', groups: undefined ]\nIt matches the whole string in this case, since it is just 123 repeated. There are also\nsituations where you want to have a certain piece of regex match any number of\ntimes, which can be indicated with the asterisk: *. Here is an example regex pattern:\n/(123)*a/\nIt will match with any a preceded by 123 any number of times. So it will match on\nthe following, for example:\n\u2022 123123123a\n\u2022 123a\n\u2022 a\n\u2022 ba\n[ 308 ]\nChapter 12\nThe last thing to note about repeating is that we can be more specific as well. We do\nthis using this syntax {min, max}. Here is an example:\nlet text = \"abcabcabc\";\nconsole.log(text.match(/(abc){1,2}/));\nThis will log:\n[ 'abcabc', 'abc', index: 0, input: 'abcabcabc', groups: undefined ]\nIt does this because it will match on abc both once and twice. As you can see, we\nhave been using groups, but groups is still undefined in the output. In order to\nspecify groups, we'll have to name them. Here's an example of how to do it:\nlet text = \"I love JavaScript!\";\nconsole.log(text.match(/(?<language>javascript)/i));\nThis will output:\n[\n'JavaScript',\n'JavaScript',\nindex: 7,\ninput: 'I love JavaScript!',\ngroups: [Object: null prototype] { language: 'JavaScript' }\n]\nThere is more to say about regex, but this should already enable you to do quite a lot\nof cool things with it. Let's have a look at some practical examples.\nPractical regex\nRegex can be of great use in many situations\u2014anywhere you need to match certain\nstring patterns, regex will come in handy. We are going to discuss how you can use\nregex in combination with other string methods, and how you can use it to validate\nemail addresses and IPv4 addresses.\n[ 309 ]\nIntermediate JavaScript\nSearching and replacing strings\nIn Chapter 8, Built-In JavaScript Methods, we saw the search and replace methods\non strings. We would have liked our search to be case-insensitive, though. Guess\nwhat\u2014we can use regex for this!\nlet text = \"That's not the case.\";\nconsole.log(text.search(/Case/i));\nAdding the i modifier here ignores the distinction between uppercase and\nlowercase. This code returns 15, which is the starting index position of the match.\nThis cannot be done using the normal string input.\nHow do you think we can alter the behavior of the replace method using regex in\nsuch a way that we can replace all instances rather than the first instance of a string?\nAgain, with a modifier! We use the global modifier (g) for this. To get a feel for the\ndifference, look at this expression without g:\nlet text = \"Coding is fun. Coding opens up a lot of opportunities.\";\nconsole.log(text.replace(\"Coding\", \"JavaScript\"));\nThis is what it outputs:\nJavaScript is fun. Coding opens up a lot of opportunities.\nWithout regex, it only replaces the first encounter. This time, let's see it with the g\nglobal modifier:\nlet text = \"Coding is fun. Coding opens up a lot of opportunities.\";\nconsole.log(text.replace(/Coding/g, \"JavaScript\"));\nThe result is as follows:\nJavaScript is fun. JavaScript opens up a lot of opportunities.\nAs you can see, all occurrences are replaced.\nPractice exercise 12.1\nFind and replace strings. The following exercise involves replacing characters in a\nspecified string value. The first input field will indicate which character string will be\nreplaced, and the second input field will indicate which characters will replace them\nonce the button is clicked.\n[ 310 ]\nChapter 12\nUse the HTML below as a template, and add the JavaScript needed to complete the\ntask:\n<!doctype html>\n<html>\n<head>\n<title>Complete JavaScript Course</title>\n</head>\n<body>\n<div id=\"output\">Complete JavaScript Course</div>\nSearch for:\n<input id=\"sText\" type=\"text\">\n<br> Replace with:\n<input id=\"rText\" type=\"text\">\n<br>\n<button>Replace</button>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. Select each of the three page elements using JavaScript and assign the\nelement objects as variables so that they can be easily referenced in your\ncode.\n2. Add an event listener to the button to invoke a function when clicked.\n3. Create a function named lookup() that will find and replace the text in the\noutput element. Assign the output element's text content to a variable named\ns, and then assign the value of the input we are replacing to another variable\nnamed rt.\n4. Create a new regex with the value of the first input field, which will allow\nyou to replace the text. Using the regex, check for a match with the match()\nmethod. Wrap this with a condition that will execute a block of code if\nmatches are found.\n5. If the match is found, use replace() to set the new value.\n6. Update the output area with the newly created and updated text output.\n[ 311 ]\nIntermediate JavaScript\nEmail validation\nIn order to create a regex pattern, we need to be able to describe the pattern with\nwords first. Email addresses consist of five parts, in the form of [name]@[domain].\n[extension].\nHere are the five parts explained:\n1. name: One or more alphanumerical characters, underscores, dashes, or dots\n2. @: Literal character\n3. domain: One or more alphanumerical characters, underscores, dashes, or dots\n4. .: Literal dot\n5. extension: One or more alphanumerical characters, underscores, dashes, or\ndots\nSo, let's do the steps for regex:\n1. [a-zA-Z0-9._-]+\n2. @\n3. [a-zA-Z0-9._-]+\n4. \\. (remember, the dot is a special character in regex, so we need to escape it)\n5. [a-zA-Z0-9._-]+\nPutting it all together:\n/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/g\nLet's look at this regex in action:\nlet emailPattern = /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-\n]+)/g;\nlet validEmail = \"maaike_1234@email.com\";\nlet invalidEmail = \"maaike@mail@.com\";\nconsole.log(validEmail.match(emailPattern));\nconsole.log(invalidEmail.match(emailPattern));\nWe tested the pattern on both a valid and an invalid email address, and this is the\noutput:\n[ 'maaike_1234@email.com' ]\nnull\n[ 312 ]\nChapter 12\nAs you can see, it returns a result for the valid email and it returns null (no match)\nfor the invalid email.\nPractice exercise 12.2\nCreate an application that uses JavaScript to check whether the string value of an\ninput is a validly formatted email using regex. Look at the following template:\n<!doctype html>\n<html>\n<head>\n<title>JavaScript Course</title>\n</head>\n<body>\n<div class=\"output\"></div>\n<input type=\"text\" placeholder=\"Enter Email\">\n<button>Check</button>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. Use the above template code to start creating your application. Within the\nJavaScript code, select the input, output, and button elements from the page\nas JavaScript objects.\n2. Add an event listener to the button to run a block of code when clicked that\nwill get the current value in the input field. Create a blank response value\nthat will populate the output div element contents.\n3. Add a test with the string value from the input field and the expression for\nemail format. If the test result is false, update the response output to say\nInvalid Email and change the output color to red.\n4. If the condition of the test returns true, add a response that confirms the\nemail format is correct and change the text color of output to green.\n5. Output the response value into the output element.\n[ 313 ]\nIntermediate JavaScript\nFunctions and the arguments object\nJavaScript deals with arguments in functions by adding them to a custom object\ncalled arguments. This object works a lot like an array, and we can use it instead of\nusing the name of the parameter. Consider the following code:\nfunction test(a, b, c) {\nconsole.log(\"first:\", a, arguments[0]);\nconsole.log(\"second:\", b, arguments[1]);\nconsole.log(\"third:\", c, arguments[2]);\n}\ntest(\"fun\", \"js\", \"secrets\");\nThis outputs:\nfirst: fun fun\nsecond: js js\nthird: secrets secrets\nWhen you update one of the parameters, the argument gets changed accordingly.\nThe same goes for the other way around;\nfunction test(a, b, c) {\na = \"nice\";\narguments[1] = \"JavaScript\";\nconsole.log(\"first:\", a, arguments[0]);\nconsole.log(\"second:\", b, arguments[1]);\nconsole.log(\"third:\", c, arguments[2]);\n}\ntest(\"fun\", \"js\", \"secrets\");\nThis is going to change both arguments[0] and b, as they are related to a and\narguments[1], respectively, as you can see in the output:\nfirst: nice nice\nsecond: JavaScript JavaScript\nthird: secrets secrets\nIf the function is called with more arguments than were declared in the function\nsignature, this is the way to access them. However, the modern way is to use the rest\nparameter (\u2026param) instead of the arguments object.\n[ 314 ]\nChapter 12\nIn case you've forgotten what the rest parameter is, you can revisit\nthe rest parameter in Chapter 6, Functions.\nPractice exercise 12.3\nThis exercise will demonstrate using the array-like arguments object and extracting\nvalues from it. Using the arguments length property, we will iterate through the\nitems in the arguments and return the last item in the list:\n1. Create a function without any parameters. Create a loop to iterate through\nthe length of the arguments object. This will allow an iteration of each item of\nthe arguments in the function.\n2. Set up a variable called lastOne with a blank value.\n3. As you loop through the arguments, set lastOne to the current value of the\nargument using the index of i to return the argument value. The argument\nwill have an index value that can be used to reference the value as you iterate\nthrough the arguments object.\n4. Return the value of lastOne, which should only return the last argument\nvalue as the response.\n5. Output the response from the function, pass a number of arguments into the\nfunction, and console log the response result. You should see only the last\nitem in the list. If you want to see each one, you can output them separately\nto the console as you look through the values, or construct an array that can\nthen be returned, adding each one as you go through the arguments.\nJavaScript hoisting\nIn Chapter 6, Functions, we discussed that we have three different variables, const,\nlet, and var, and we highly recommended that you should use let instead of var\nbecause of their different scopes. JavaScript hoisting is why. Hoisting is the principle\nof moving declarations of variables to the top of the scope in which they are defined.\nThis allows you to do things that you cannot do in many other languages, and for\ngood reason by the way. This should look normal:\nvar x;\nx = 5;\nconsole.log(x);\n[ 315 ]\nIntermediate JavaScript\nIt just logs 5. But thanks to hoisting, so does this:\nx = 5;\nconsole.log(x);\nvar x;\nIf you try to do this with let, you'll get a ReferenceError. This is why it is better to\nuse let. Because clearly, this behavior is very hard to read, unpredictable, and you\ndon't really need it.\nThe reason this happens is that the JavaScript interpreter moves all the var\ndeclarations to the top of the file before processing the file. Only the declarations, not\nthe initializations. This is why you get a result of undefined if you use it before having\ninitialized it. And this is why it should be initialized before it has been declared. It\nwas designed this way for memory allocation, but the side effects are undesirable.\nHowever, there is a way to turn this behavior off. Let's see how we can do so in the\nnext section!\nUsing strict mode\nWe can change the understanding and forgiving behavior of JavaScript to some\nextent using strict mode. You can switch on strict mode with the following command\nin your code. This needs to be the first command of your code:\n\"use strict\";\nHere is something that works when we don't use strict mode:\nfunction sayHi() {\ngreeting = \"Hello!\";\nconsole.log(greeting);\n}\nsayHi();\nWe forgot to declare greeting, so JavaScript did it for us by adding a greeting\nvariable to the top level and it will log Hello!. If we enable strict mode, however,\nthis will give an error:\n\"use strict\";\nfunction sayHi() {\n[ 316 ]\nChapter 12\ngreeting = \"Hello!\";\nconsole.log(greeting);\n}\nsayHi();\nThe error:\nReferenceError: greeting is not defined\nYou can also use strict mode only in a particular function: simply add it to the top of\nthe function and it gets enabled for that function only. Strict mode alters a few other\nthings too; for example, when using strict mode, there are fewer words that can be\nused as names for your variables and functions because they are likely to become\nreserved keywords in the future that JavaScript will need for its own language.\nUsing strict mode is a great way of getting used to using JavaScript in the setting of\nframeworks or even for writing TypeScript later. It is typically considered a good\npractice nowadays, so we would encourage you to use this in your own code when\nyou have the chance. This is often not an (easy) option when working with existing\nolder code though.\nNow we have seen strict mode, it's time to dive into a whole different mode:\ndebug mode! Debug mode is for when you are not busy writing or running your\napplication, but are running it in a special way to spot the locations of any errors.\nDebugging\nDebugging is a delicate art. In the beginning, it usually is very hard to spot what's\nwrong with your code. If you are using JavaScript in the browser and it is not\nbehaving as you would expect, step 1 is always to open the console in the browser.\nOften it will contain errors that can help you further.\nIf that doesn't solve it, you can log to the console in every step of your code, and also\nlog the variables. This will give you some insight as to what is going on. It might\njust be that you are relying on a certain variable that happens to be undefined. Or\nperhaps you are expecting a certain value from a mathematical computation, but\nyou've made an error and the result is something completely different from what\nyou thought. Using console.log() during development to see what's happening is\nrather common.\n[ 317 ]\nIntermediate JavaScript\nBreakpoints\nA more professional way to go about debugging is to use breakpoints. This can be\ndone from most browsers and IDEs. You click on the line before your code (in the\nSources panel in Chrome, but this may be different for different browsers), and a dot\nor arrow will appear. When your application is running, it will pause at this point\nto give you the opportunity to inspect the values of variables and walk through the\ncode line by line from there.\nThis way, you will get a good clue of what is going on and how to fix it. Here is how\nto use breakpoints in Chrome, and most other browsers have something like this. In\nChrome, go to the Sources tab of the Inspect panel. Select the file you want to set a\nbreakpoint in. Then you just click on the line number and it sets the breakpoint:\nFigure 12.1: Breakpoints in the browser\n[ 318 ]\nChapter 12\nThen try to trigger the line of code, and when it gets triggered, it pauses. On the very\nright of the screen I can inspect all the variables and values:\nFigure 12.2: Inspecting breakpoint variables\n[ 319 ]\nIntermediate JavaScript\nYou can now go through your code with a fine-toothed comb: with the play icon on\ntop, you can resume script execution (until it hits the next breakpoint or runs in to\nthe same breakpoint again). With the round arrow icon at the top, I can go to the next\nline and inspect the values on the next line again.\nThere are many options with breakpoints that we don't have space\nto cover here. For more detail on how you can debug your code\nwith breakpoints, look in your chosen code editor's documentation\nor check the relevant Google Chrome documentation here:\nhttps://developer.chrome.com/docs/devtools/javascript/\nbreakpoints/.\nPractice exercise 12.4\nVariable values can be tracked in the editor while debugging. The following exercise\nwill demonstrate how to use the editor's breakpoints to check a value of a variable\nat a certain point in the running of the script. This is a simple example, but the same\nprocess can be used to find out information about larger scripts at specific points\nduring execution, or establish where a problem may lie.\nThere are minor differences and nuances in the way breakpoints\noperate in different editors, so please refer to the documentation\nof your environment for more of a detailed walk-through\u2014this\nis intended to give you an idea of what breakpoints offer when it\ncomes to debugging.\nYou can use the following short script as an example:\nlet val = 5;\nval += adder();\nval += adder();\nval += adder();\nconsole.log(val);\nfunction adder(){\nlet counter = val;\nfor(let i=0;i<val;i++){\ncounter++;\n}\nreturn counter ;\n}\n[ 320 ]\nChapter 12\nRemember to add <script> tags and open the script as an HTML\ndocument if you're testing this in your browser console.\nThis exercise has been tested in a desktop editor but it is equally relevant to browser\nconsoles and other environments. Take the following steps:\n1. Open your script in your chosen editor, or the Sources tab of your browser's\nInspect panel. Click to the left of the line of code where you want to add a\nbreakpoint. A dot or other indicator will appear to indicate the breakpoint\nis set:\nFigure 12.3: Setting breakpoints\n[ 321 ]\nIntermediate JavaScript\n2. Run the code with your new breakpoints: I have selected Run | Start\nDebugging, but this will vary depending on your editor. You can simply\nreload the web page if you're using the browser console to rerun the code\nwith your new breakpoints accounted for:\nFigure 12.4: Running code with breakpoints added\n3. You should now see the debugging console. There will be a tab that lists the\nvariables in the code and the current values at the first breakpoint. It's called\nVARIABLES in my editor, but it's the Scope tab in the Chrome browser\nconsole.\n4. You can use the menu options to move to the next breakpoint, stop\ndebugging, or restart the breakpoint sequence. Press the play icon to move to\nthe next breakpoint. It will update to have a value of 5, as specified by line 1,\nand pause at the first breakpoint. Note that the highlighted line has not been\nrun yet:\n[ 322 ]\nChapter 12\nFigure 12.5: Viewing variables in the console\n5. Press the play icon once more, and the script will run until it hits the next\nbreakpoint, at which point the value of the variable will update as a result of\nthe code on line 2:\nFigure 12.6: Progressing through breakpoints in a script\n[ 323 ]\nIntermediate JavaScript\n6. Press play again to move to the next breakpoint, which increases the value of\nval once more:\nFigure 12.7: The final breakpoint\n7. Once the last breakpoint is reached you will only see options to restart or\nstop the debugger. If you press stop, it will end the debugging process:\nFigure 12.8: Breakpoints in the browser\nThe final value of val after the third breakpoint was revealed as 135. Write down\nthe values of val after the first and second calls to the adder() function, which were\nrevealed to you by using breakpoints.\n[ 324 ]\nChapter 12\nThis was a basic exercise, but we invite you to test out using\nbreakpoints on some larger scripts and get more comfortable in\nyour understanding of how your code works during runtime.\nError handling\nWe have seen a lot of errors appear already. Until now, we let the program crash\nwhen it encountered an error. There are other ways to deal with errors. When we are\ndealing with code that depends on some sort of outside input, such as an API, user\ninput, or a file we will need to deal with the errors that this input can cause.\nIf we expect a certain piece of code to throw an error, we can surround this code with\na catch block. The error it might throw will be caught in this block.\nYou have to be careful not to use this too much, and you usually\ndon't want to do this when you can just write better code to avoid\nthe error in the first place.\nHere is an example of a piece of code that throws an error, and is surrounded with\na try and catch block. Let's assume the somethingVeryDangerous() function might\nthrow errors:\ntry {\nsomethingVeryDangerous();\n} catch (e) {\nif (e instanceof TypeError) {\n// deal with TypeError exceptions\n} else if (e instanceof RangeError) {\n// deal with RangeError exceptions\n} else if (e instanceof EvalError) {\n// deal with EvalError exceptions\n} else {\n//deal with all other exceptions\nthrow e; //rethrow\n}\n}\n[ 325 ]\nIntermediate JavaScript\nIf it throws an error, it will end up in the catch block. Since Error could mean\nmany different errors, we are going to check for the exact error we are dealing with\nand write a specific handling of this error. We check the exact error class with the\ninstanceof operator. After the error handling, the rest of the code will continue to\nexecute normally.\nYou can do one more thing with a try catch block, and that is add a finally block.\nThis finally block gets executed irrespective ofwhether errors are thrown. This is\ngreat for cleanup purposes. Here is a simple example:\ntry {\ntrySomething();\n} catch (e) {\nconsole.log(\"Oh oh\");\n} finally {\nconsole.log(\"Error or no error, I will be logged!\");\n}\nWe don't know the output of this code, since trySomething() is not defined. If it were\nto throw an error, it would log Oh oh to the console and then Error or no error, I\nwill be logged!. If trySomething() didn't throw an error, it would only log the last\npart.\nLastly, if, for whatever reason, you need to throw an error, you can do so with the\nthrow keyword, like this:\nfunction somethingVeryDangerous() {\nthrow RangeError();\n}\nThis can be of great use whenever you need to deal with things out of your control,\nsuch as an API response, user input, or input from reading a file. If unexpected\nthings happen, sometimes you'll have to throw an error to deal with it appropriately.\nPractice exercise 12.5\n1. Using throw, try, and catch, check if the value is a number, and if it's not,\nthen create a custom error.\n2. Create a function with one argument called val.\n3. Use try, and within it add a condition that checks whether val is a number\nusing isNaN. If true, then throw an error that states that it is not a number.\nOtherwise, output Got a number to the console.\n[ 326 ]\nChapter 12\n4. Use catch to catch any errors and output the error values to the console.\n5. Add finally to run and output the value, and when the function has\ncompleted, also include the value of val.\n6. Create one request to the function with a string argument and another with a\nnumber. See the results in the console.\nUsing cookies\nCookies are small data files that are stored on your own computer and used by\nwebsites. Cookies were invented to store things about the user of the website.\nCookies are strings with a special pattern. They contain key-value pairs, and these\nkey-value pairs are separated by semi-colons.\nYou can create a cookie and use it again later. Here is how you can create a cookie:\ndocument.cookie = \"name=Maaike;favoriteColor=black\";\nThis does not work in all browsers when you run it on the client side (such as in your\n<script> tag). In Chrome, for example, you cannot set the cookies from the client\nside. You have to run the code from a server. (I have used Safari instead to do this\nhere, but there are no guarantees about future support.) An alternative is the web\nstorage API.\nIt is also possible to start Chrome from the command line with certain settings\nenabled, or to enable the cookies in the settings under privacy preferences. Careful\nto turn this off afterward if you don't want it, though. This is how you can read from\nthe cookie:\nlet cookie = decodeURIComponent(document.cookie);\nlet cookieList = cookie.split(\";\");\nfor (let i = 0; i < cookieList.length; i++) {\nlet c = cookieList[i];\nif (c.charAt(0) == \" \") {\nc = c.trim();\n}\nif (c.startsWith(\"name\")) {\nalert(c.substring(5, c.length));\n}\n}\n[ 327 ]\nIntermediate JavaScript\nThis example gets all the cookies using decodeURIComponent(), and then splits them\non the ;. This leaves us with an array, cookieList, with key-value pairs as strings.\nNext, we loop over all the key-value pairs. Trim them (remove the whitespace in\nfront and at the back), and see whether they start with name. This was the name of\nour cookie key.\nIf we want to get the value, we have to start reading after the key, so at least the\nlength of the key, which is 4 (name) in this case. This brings us to index 3 already.\nWe also want to skip the equal sign on index 4, so we start at index 5. In this case, we\nare adding an alert to the name. Here is an example of a simple website that uses a\ncookie to greet the user:\n<!DOCTYPE html>\n<html>\n<body>\n<input onchange=\"setCookie(this)\" />\n<button onclick=\"sayHi('name')\">Let's talk, cookie!</button>\n<p id=\"hi\"></p>\n<script>\nfunction setCookie(e) {\ndocument.cookie = \"name=\" + e.value + \";\";\n}\nfunction sayHi(key) {\nlet name = getCookie(key);\ndocument.getElementById(\"hi\").innerHTML = \"Hi \" + name;\n}\nfunction getCookie(key) {\nlet cookie = decodeURIComponent(document.cookie);\nlet cookieList = cookie.split(\";\");\nfor (let i = 0; i < cookieList.length; i++) {\nlet c = cookieList[i];\nif (c.charAt(0) == \" \") {\nc = c.trim();\n}\nif (c.startsWith(key)) {\nconsole.log(\"hi\" + c);\nreturn c.substring(key.length + 1, c.length);\n}\n}\n}\n[ 328 ]\nChapter 12\n</script>\n</body>\n</html>\nIf you are writing a new website, you probably should not be using this. However,\nwhenever you need to work with older code, chances are you'll come across this.\nAnd now you know what it means and how to adjust it. Good for you!\nPractice exercise 12.6\nLet's make a cookie builder. Create several functions that will allow you to interact\nwith page cookies, including reading a cookie value by name, creating a new cookie\nusing a name and setting it for a set number of days, and deleting a cookie. You can\nuse the following HTML template to get you started:\n<!doctype html>\n<html>\n<head>\n<title>Complete JavaScript Course</title>\n</head>\n<body>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. Set up your webpage, and in the JavaScript code, output the value of\ndocument.cookie. It should be blank.\n2. Create a function that will take the parameters for cookieName, cookieValue,\nand the number of days you want to set the cookie.\n3. Check if days is valid, and within the block of valid code, get the current\ndate. Set a setTime value for the cookie to expire in milliseconds by\nmultiplying the days into milliseconds.\n4. Change the date object of milliseconds until the cookie expires to a UTC\nstring value.\n5. Set document.cookie to cookieName = cookieValue, plus add the expiry\ndetails and lastly specify path=/.\n[ 329 ]\nIntermediate JavaScript\n6. Create a function to create a test cookie with a value and expiry set after a\nnumber of days. Create a second cookie the same way, and when you refresh\nyour page, you should see at least two cookies in the console.\n7. Create a second function to read a cookie value, set the value as false, and\nthen create an array of the cookies split by semi-colons.\n8. Loop through all the cookies and split again where the equal signs are. This\nwill give you the first item with index 0 as the name of the cookie. Add a\ncondition to check if the name is equal to the name that was requested in the\nfunction parameters. If it matches, assign the value of the second item in the\nindex, which will be the value of the cookie with the selected name. Return\ncookievalue in the function.\n9. Add two console log messages using the function to read both cookies you\nhave set earlier. Output the values of the cookies in the console.\n10. To delete a cookie, you need to set a date prior to the current date. You can\ncreate a cookie with a -1 date and send the cookie with its selected name to\nbe deleted by invoking the cookie creation function.\n11. Try deleting a cookie by name.\nLocal storage\nWe have looked at cookies as a way to save user data, but there is actually a more\nmodern way to do this: local storage. Local storage is an amazing fun topic that\nwill add to your ability to make smart websites. With local storage, we can save\nkey-value pairs in our web browser and use them again in a new session (when the\nbrowser is opened again later). The information is typically stored in a folder on the\ncomputer of the user, but this differs a bit by browser.\nThis allows the website to store some information and retrieve it later, even after\nrefreshing the page or closing the browser. The advantage of local storage over\ncookies is that they don't need to be passed around with every HTTP request, which\nis the case with cookies. Local storage just lives there and waits to be accessed.\nThe localStorage object is a property of the window object that we have seen before.\nThere are a few methods on the localStorage object that we need to know to use\nit effectively. First of all, we need to be able to get and set key-value pairs on local\nstorage. We use setItem() whenever we want to save something and getItem()\nwhenever we want to retrieve the value later. Here is how to do it:\n<!DOCTYPE html>\n<html>\n<body>\n[ 330 ]\nChapter 12\n<div id=\"stored\"></div>\n<script>\nlet message = \"Hello storage!\";\nlocalStorage.setItem(\"example\", message);\nif (localStorage.getItem(\"example\")) {\ndocument.getElementById(\"stored\").innerHTML =\nlocalStorage.getItem(\"example\");\n}\n</script>\n</body>\n</html>\nThis code snippet outputs Hello storage! on the page. You can add items to\nstorage by specifying a key and a value with the setItem method. You can access\nlocalStorage directly or via the window object. Here we specify example as the key\nand Hello storage! as the value and save it to local storage. Then we check whether\nthe example key is set in local storage and output the data by writing it to the\ninnerHTML of the div with the ID stored.\nIf you go back to your code and turn off the setItem() line before loading the page\na second time, it still will output that value, since the information was stored when\nrunning the script the first time and never got deleted. Local storage doesn't expire,\nthough it can be manually deleted.\nWe can also retrieve a key using the index. This is useful whenever we need to loop\nthrough the key-value pairs and we don't know the names of the keys. This is how to\nretrieve a key by index:\nwindow.localStorage.key(0);\nIn this case, the key is name. In order to get the associated value, we can do this:\nwindow.localStorage.getItem(window.localStorage.key(0));\nWe can also remove key-value pairs like this:\nwindow.localStorage.removeItem(\"name\");\nAnd we can remove all the key-value pairs from the local storage in one call:\nwindow.localStorage.clear();\n[ 331 ]\nIntermediate JavaScript\nSo, with local storage you can save values even after closing the browser. This allows\nfor a lot of \"smart\" behavior, since your app is now able to remember things, such as\nwhat you've entered in a form, which settings you've toggled on a website, and what\nyou've looked at previously.\nPlease don't see this as an alternative that you can use to bypass the problems with\ncookies and privacy. Local storage raises the exact same issues as cookies, it's just less\nknown. You will still have to mention on your website that you are tracking users\nand storing information, just like you need to do for cookies.\nPractice exercise 12.7\nLet's create a local storage shopping list that will store values in the browser's local\nstorage. This is an example of using JavaScript to convert from strings to useable\nJavaScript objects and back to strings that can be stored in local storage. You can use\nthe following template:\n<!doctype html>\n<html>\n<head>\n<title>JavaScript</title>\n<style>\n.ready {\nbackground-color: #ddd;\ncolor: red;\ntext-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"main\">\n<input placeholder=\"New Item\" value=\"test item\" maxlength=\"30\">\n<button>Add</button>\n</div>\n<ul class=\"output\">\n</ul>\n<script>\n</script>\n</body>\n</html>\n[ 332 ]\nChapter 12\nTake the following steps:\n1. In the JavaScript code, select all the page elements as JavaScript objects.\n2. Create a tasks array with a value of the local tasklist storage if it exists,\notherwise set the tasks array to an empty array. Using JSON.parse, you can\nconvert the string value to a useable object in JavaScript.\n3. Loop through all the items in the tasklist array; they will be stored as\nobjects, with a name and a Boolean value for their checked status. Create a\nseparate function to build the task item, adding it to the page from the list.\n4. In the task generation function, create a new list item and a textNode.\nAppend textNode to the list item. Append the list item to the page output\narea. If the task is marked complete with a Boolean value of true, then add\nthe style class of ready.\n5. Add an event listener to the list item that will toggle the ready class when\nclicked. Every time there is a change to any list item, you will also need to\nstore that to the local storage. Create a task builder function that will store\nand ensure the visual list is the same as the local storage list. You will need to\nclear the current task list array and rebuild from the visual data, so create a\nfunction to handle the list building.\n6. The task builder function will clear the current tasks array, and select all the\nli elements on the page. Loop through all the list items, getting the text value\nfrom the element, and checking if it contains the class of ready. If it contains\nthe ready class, then mark the checked condition as true. Add the results to\nthe tasks array, and this will rebuild the array to ensure it matches with what\nthe user sees visually. Send to a save tasks function to save the tasks array in\nlocal storage, so if the page is refreshed, you will see the same list.\n7. In the save tasks function, set the localstorage item to the tasks array. You\nwill need to stringify the object so that it can go into the string parameter of\nlocal storage.\n8. Now, when you refresh the page, you will see the list of tasks. They can be\ncrossed out by clicking them and new items can be added in the input field\nby pressing the button to submit new items.\nJSON\nJSON stands for JavaScript Object Notation, which is nothing more than a data\nformat. We saw this notation when we were creating our objects in JavaScript;\nhowever, JSON doesn't mean JavaScript objects, it's just a way of representing data\nusing a similar format as JavaScript objects. It can also be easily converted to a\nJavaScript object.\n[ 333 ]\nIntermediate JavaScript\nJSON is a standard used to communicate with APIs, including APIs that aren't\nwritten in JavaScript! APIs can accept data, for example, the data from a form on\na website, in JSON format. And nowadays, APIs almost always send data back\nin JSON. Sending data from an API happens, for example, when you enter a web\nshop\u2014the products typically come from a call to an API that is connected to a\ndatabase. This data gets converted to JSON and is sent back to the website. Here is an\nexample of JSON:\n{\n\"name\" : \"Malika\",\n\"age\" : 50,\n\"profession\" : \"programmer\",\n\"languages\" : [\"JavaScript\", \"C#\", \"Python\"],\n\"address\" : {\n\"street\" : \"Some street\",\n\"number\" : 123,\n\"zipcode\" : \"3850AA\",\n\"city\" : \"Utrecht\",\n\"country\" : \"The Netherlands\"\n}\n}\nThis is an object that seems to describe a person. It has key-value pairs. The keys\nalways have to be between quotes, but the values only have to be between quotes\nwhen they are strings. So, the first key is name and the first value is Malika.\nLists of values (or JavaScript arrays) are indicated with []. The JSON object contains\na list of languages, which has the square brackets, and another object, address. You\ncan tell this by the curly brackets.\nThere are actually only a few flavours in JSON:\n\u2022 Key-value pairs with values of the following types: string, number, Boolean,\nand null\n\u2022 Key-value pairs with lists, which have [ and ] that contain the items in the\nlist\n\u2022 Key-value pairs with other objects, which have { and } that contain other\nJSON elements\nThese three options can be combined, so an object can contain other objects and a\nlist can contain other lists. We saw this already in the above example. Our object\ncontained a nested address object.\n[ 334 ]\nChapter 12\nBut this can be nested even further. A list can also contain objects, which can contain\nlists with objects, with lists, and so on. This might sound a bit complicated and\nthat's exactly the point. Even though it is very simple, nesting all these options can\nstill complicate JSON a bit. There is a reason we've placed it in our advanced topic\nchapter.\nLet's now have a look at a slightly more complex example:\n{\n\"companies\": [\n{\n\"name\": \"JavaScript Code Dojo\",\n\"addresses\": [\n{\n\"street\": \"123 Main street\",\n\"zipcode\": 12345,\n\"city\" : \"Scott\"\n},\n{\n\"street\": \"123 Side street\",\n\"zipcode\": 35401,\n\"city\" : \"Tuscaloosa\"\n}\n]\n},\n{\n\"name\": \"Python Code Dojo\",\n\"addresses\": [\n{\n\"street\": \"123 Party street\",\n\"zipcode\": 68863,\n\"city\" : \"Nebraska\"\n},\n{\n\"street\": \"123 Monty street\",\n\"zipcode\": 33306,\n\"city\" : \"Florida\"\n}\n]\n}\n]\n}\n[ 335 ]\nIntermediate JavaScript\nThis is a list of companies, with two company objects on it. The companies have two\nkey-value pairs: a name and an address list. Each of the address lists contains two\naddresses, and each address consists of three key-value pairs: street, zipcode and\ncity.\nPractice exercise 12.8\nThis exercise will demonstrate how you can create a valid JSON object that can be\nused as a JavaScript object. You will create a simple list of names and statuses that\ncan be looped through and output the results to the console. You will load JSON data\nto JavaScript and output the results of the object's contents:\n1. Create a JavaScript object that contains JSON formatted data. The object\nshould contain at least two items and each item should be an object with at\nleast two paired values.\n2. Create a function that can be invoked that will loop through each item in the\nJavaScript JSON object and output the result to the console. Output each item\nof data to the console using console.log.\n3. Invoke the function and launch the JavaScript code.\nParsing JSON\nThere are many libraries and tools available for parsing a JSON string into an\nobject. A JavaScript string can be converted to a JSON object using the JSON.parse()\nfunction. Data that is received from another place is always of value string, so in\norder to treat it as an object, it needs to be converted. This is how to do it:\nlet str = \"{\\\"name\\\": \\\"Maaike\\\", \\\"age\\\": 30}\";\nlet obj = JSON.parse(str);\nconsole.log(obj.name, \"is\", obj.age);\nAfter parsing, it can be treated as an object. Therefore it will log Maaike is 30 to the\nconsole.\nThe other way around is also necessary sometimes. Objects can be converted to a\nJSON string using the JSON.stringify() method. It converts the object or value from\nJavaScript to a JSON string. You can see it in action here:\nlet dog = {\n\"name\": \"wiesje\",\n\"breed\": \"dachshund\"\n};\n[ 336 ]\nChapter 12\nlet strdog = JSON.stringify(dog);\nconsole.log(typeof strdog);\nconsole.log(strdog);\nThe type of strdog becomes a string because it is being stringified. And it no longer\nhas the properties name and breed. These will be undefined. This code snippet will\nlog the following to the console:\nstring\n{\"name\":\"wiesje\",\"breed\":\"dachshund\"}\nThis can be useful for storing JSON data directly in a database, for example.\nPractice exercise 12.9\nThis exercise will demonstrate the use of JSON methods to parse JSON and convert\nstring values to JSON. Using JSON methods with JavaScript, convert a JSON\nformatted string value to a JavaScript object and convert a JavaScript object into a\nstring representation of the JSON object:\n1. Create a JSON object with several items and objects. You can use the JSON\nobject from the previous lesson.\n2. Using the JSON stringify() method, convert the JSON JavaScript object into\na string version and assign it to a variable named newStr [{\"name\":\"Learn\nJavaScript\",\"status\":true},{\"name\":\"Try JSON\",\"status\":false}].\n3. Using JSON.parse(), convert the newStr value back into an object and assign\nit to a variable named newObj.\n4. Iterate through the items in the newObj and output the results to the console.\nPractice exercise 12.9 answers\nlet myList = [{\n\"name\": \"Learn JavaScript\",\n\"status\": true\n},\n{\n\"name\": \"Try JSON\",\n\"status\": false\n}\n];\n[ 337 ]\nIntermediate JavaScript\nconst newStr = JSON.stringify(myList);\nconst newObj = JSON.parse(newStr);\nnewObj.forEach((el)=>{\nconsole.log(el);\n});\nChapter projects\nEmail extractor\nUse the following HTML as a starter template and add the JavaScript code to make\nan email extractor function:\n<!doctype html>\n<html>\n<head>\n<title>Complete JavaScript Course</title>\n</head>\n<body>\n<textarea name=\"txtarea\" rows=2 cols=50></textarea> <button>Get\nEmails</button>\n<textarea name=\"txtarea2\" rows=2 cols=50></textarea>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. In JavaScript, select both text areas and the button and set them as JavaScript\nobjects.\n2. Add an event listener to the button that will invoke a function that gets the\ncontent of the first textarea and filters it to only accept email addresses.\n3. Within the extracting function, get the content of the first input field. Using\nmatch(), return an array of the email addresses that were matched from\nwithin the content from the first textarea.\n4. To remove any duplicates, create a separate array that will hold only unique\nvalues.\n[ 338 ]\nChapter 12\n5. Loop through all the email addresses found and check whether each one is\nalready in the holder array, and if not, add it.\n6. Using the join() array method, you can now join together the results of\nthe email addresses found within the content and output it into the second\ntextarea.\nForm validator\nThis project is an example of a typical form structure where you check the values\ninputted into the form and validate them before the content gets submitted. A\nresponse is returned to the user if the values do not meet the validation criteria in the\ncode. Use the following HTML and CSS as a starting template:\n<!doctype html>\n<html>\n<head>\n<title>JavaScript Course</title>\n<style>\n.hide {\ndisplay: none;\n}\n.error {\ncolor: red;\nfont-size: 0.8em;\nfont-family: sans-serif;\nfont-style: italic;\n}\ninput {\nborder-color: #ddd;\nwidth: 400px;\ndisplay: block;\nfont-size: 1.5em;\n}\n</style>\n</head>\n<body>\n<form name=\"myform\"> Email :\n<input type=\"text\" name=\"email\"> <span class=\"error hide\"></\nspan>\n[ 339 ]\nIntermediate JavaScript\n<br> Password :\n<input type=\"password\" name=\"password\"> <span class=\"error\nhide\"></span>\n<br> User Name :\n<input type=\"text\" name=\"userName\"> <span class=\"error hide\"></\nspan>\n<br>\n<input type=\"submit\" value=\"Sign Up\"> </form>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. Using JavaScript, select all the page elements and set them as JavaScript\nobjects so they are easier to select within the code. Also select all the page\nelements that have the error class as an object.\n2. Add an event listener to submit and capture the click, preventing the default\nform action.\n3. Loop through all the page elements that have a class error and add the hide\nclass, which will remove them from view since this is a new submission.\n4. Using the regular expression for valid emails, test the results against the\ninput value of the email field.\n5. Create a function to respond to errors, which removes the hide class from\nthe element next to the element that triggered the event. Apply focus to that\nelement within the function.\n6. If there is an error that an input does not match the desired regex, pass the\nparameters to the error handling function you just created.\n7. Check the password field input value to ensure only letters and numbers\nare used. Also check the length to ensure that it is 3-8 characters. If either are\nfalse, then add the error with the error function and create a message for the\nuser. Set the error Boolean to true.\n8. Add in an object to track the form data creation and add values to the object\nby looping through all the inputs, setting the property name to be the same\nas the input name, and the value the same as the input value.\n9. Before the end of the validation function, check if an error is still present, and\nif it is not, submit the form object.\n[ 340 ]\nChapter 12\nSimple math quiz\nIn this project, we will create a math quiz that will allow the user to respond to math\nquestions. The application will check the responses and score the accuracy of the\nuser's answers to the questions. You can use the following HTML template:\n<!doctype html>\n<html>\n<head>\n<title>Complete JavaScript Course</title>\n</head>\n<body>\n<span class=\"val1\"></span> <span>+</span> <span class=\"val2\"></\nspan> = <span>\n<input type=\"text\" name=\"answer\"></span><button>Check</button>\n<div class=\"output\"></div>\n</body>\n</html>\nTake the following steps:\n1. In JavaScript, wrap the code within a function, app. Within the app function,\ncreate variable objects to contain all the page elements so they can be used in\nthe script, and create a blank object called game.\n2. Add a DOMContentLoaded event listener that invokes the app initialization\nonce the page loads.\n3. Within an init() function, add an event listener to the button, listen for a\nclick, and track the event into a function called checker. Also within the init\nfunction, load another function called loadQuestion().\n4. Create a function to load the questions, and another function that can\ngenerate a random number from min and max values in the arguments.\n5. In the loadQuestion() function, generate two random values and add them\nto the game object. Calculate the result of both values added together and\nassign that value within the game object as well.\n6. Assign and update the textContent of the page elements that require the\ndynamic number values for the calculation question.\n7. When the button is clicked, use a ternary operator to determine whether the\nanswer to the question was correct or incorrect. Set the color to green for\ncorrect, and to red for incorrect.\n[ 341 ]\nIntermediate JavaScript\n8. Create a page element to output all the questions and keep track of the\nresults. Within the checker() function, append a new element to the HTML\nwith a style color to indicate a correct or incorrect response. Display the\nfirst and second values as well as the answer, and show the user's response\nwithin brackets.\n9. Clear the input field and load the next question.\nSelf-check quiz\n1. What will the following regex expression return from the following words?\nExpression / ([a-e])\\w+/g\n\"Hope you enjoy JavaScript\"\n2. Are cookies part of the document object?\n3. What will the following code do to a JavaScript cookie?\nconst mydate = new Date();\nmydate.setTime(mydate.getTime() - 1);\ndocument.cookie = \"username=; expires=\" + mydate.toGMTString();\n4. What is the output in the console from the following code?\nconst a = \"hello world\";\n(function () {\nconst a = \"JavaScript\";\n})();\nconsole.log(a);\n5. What is the output in the console from the following code?\n<script>\n\"use strict\";\nmyFun();\nconsole.log(a);\nfunction myFun() {\na = \"Hello World\";\n}\n</script>\n[ 342 ]\nChapter 12\n6. What is the output of the following code?\nconsole.log(\"a\");\nsetTimeout(() => {\nconsole.log(\"b\");\n}, 0);\nconsole.log(\"c\");\nSummary\nIn this chapter, we had some important, more advanced topics that we still had\nto cover, but that you were probably not ready for earlier in the book. After this\nchapter, you should have deepened your understanding of JavaScript in several\nareas, first and foremost, regular expressions. With regex, we can specify patterns of\nstrings and we can use these to search other strings for matches to our patterns.\nWe also considered functions and the arguments object, with which we can access\narguments by their index. We continued with a look at JavaScript hoisting and strict\nmode, which enables us to use JavaScript with a few more rules. Getting used to\nJavaScript in strict mode is generally a good practice and is great preparation for\nworking with JavaScript frameworks.\nDebugging and tweaking were also discussed: we can use breakpoints or log our\noutput to the console to get an idea of what is going on. Handling errors well can\nprevent unnecessary crashes of our program. Finally, we looked at JavaScript\ncookie creation and the use of local storage, along with the use of JSON, a syntax for\nsending data around. We saw the different types of key-value pairs and how to parse\nJSON. We also saw how to store key-value pairs in the localStorage object of window.\nThis chapter has deepened our understanding of JavaScript, and we learned some\nnew things we need to know for modern JavaScript, but also a lot for when dealing\nwith old (legacy) code. In the next chapter, we'll dive into an even more advanced\ntopic: concurrency. This topic is about multitasking with your JavaScript code.\n[ 343 ]\n13\nConcurrency\nIt's time for a more advanced topic. You're ready! We are going to deal with the topic\nof asynchronous code and some options for multitasking with code. This concept\nis called concurrency. Don't worry if you find this chapter a bit of a struggle; this is\nprogramming in JavaScript at a high level. These are the topics we'll be dealing with:\n\u2022 Concurrency\n\u2022 Callbacks\n\u2022 Promises\n\u2022 async/await\n\u2022 Event loop\nYes, this is tough, but understanding how to leverage concurrency can really\nenhance the performance of your program by speeding up the process, which is\nmore than enough reason to dive into this advanced topic!\nNote: exercise, project, and self-check quiz answers can be found in\nthe Appendix.\n[ 345 ]\nConcurrency\nIntroducing concurrency\nConcurrency is whenever things are happening \"at the same time\" or in parallel. To\ngive a non-code example, let's talk about managing my household. When I come\nhome on a Friday night, I have a series of tasks: the kids need to eat, to shower, and\nto be brought to bed, the laundry needs to be folded and laundry needs to be put in\nthe machine, and to be fair, a lot more, but this is enough to illustrate the example.\nIf I were to do this without being able to do multiple things at once, it would be a\nvery tough night and get very late. I would first make dinner\u2014put a pizza in the\noven and wait next to it\u2014feed the kids, shower them afterward, then bring them to\nbed, and then fold the laundry afterward, turn the machine on again, and wait until\nit's done. Luckily, I can multitask, so it looks more like this: I put the pizza in the\noven, in the meantime, I turn the washing machine on and maybe fold a few pieces\nof laundry, then I feed the kids, do the rest of the laundry while they shower, and\nI'm done a lot quicker.\nThis is the same for your computer and the applications that you use. If it weren't\nable to do multiple things at the same time, you would probably be very annoyed.\nYou wouldn't be able to check your mail while you are writing code, you wouldn't\nbe able to listen to music while writing code, and a lot more. This is your computer\nswitching between different tasks. The same thing can happen at the application\nlevel. For example, we can do a call to some API and not wait for the reply but\ndo something useful in the meantime instead. We can do so using the concept of\nconcurrency.\nThere are three strategies in JavaScript that you'll need to know of when working\nwith concurrency: callbacks, Promises, and the async and await keywords.\nCallbacks\nCallbacks are the first thing we should understand when we are talking about\nconcurrency. The good news is that the callback principle is not too hard to\nunderstand. It is just a function that takes another function as an argument, which is\nthen called when the rest of the initial function has finished. In other words, it's just a\nfunction calling a function, like this:\nfunction doSomething(callback) {\ncallback();\n}\nfunction sayHi() {\n[ 346 ]\nChapter 13\nconsole.log(\"Hi!\");\n}\ndoSomething(sayHi);\nThe doSomething() function, which is created with the parameter callback, is just\ncalling whatever function is being passed in as an argument. We call it using the\nsayHi() function as an argument, so this code snippet is just a very complicated way\nto get Hi! printed to the console.\nHere is an example of the callback principle actually doing something:\nfunction judge(grade) {\nswitch (true) {\ncase grade == \"A\":\nconsole.log(\"You got an\", grade, \": amazing!\");\nbreak;\ncase grade == \"B\":\nconsole.log(\"You got a\", grade, \": well done!\");\nbreak;\ncase grade == \"C\":\nconsole.log(\"You got a\", grade, \": alright.\");\nbreak;\ncase grade == \"D\":\nconsole.log(\"You got a\", grade, \": hmmm...\");\nbreak;\ndefault:\nconsole.log(\"An\", grade, \"! What?!\");\n}\n}\nfunction getGrade(score, callback) {\nlet grade;\nswitch (true) {\ncase score >= 90:\ngrade = \"A\";\nbreak;\ncase score >= 80:\nconsole.log(score);\ngrade = \"B\";\nbreak;\ncase score >= 70:\n[ 347 ]\nConcurrency\ngrade = \"C\";\nbreak;\ncase score >= 60:\ngrade = \"D\";\nbreak;\ndefault:\ngrade = \"F\";\n}\ncallback(grade);\n}\ngetGrade(85, judge);\nThere are two functions here: judge() and getGrade(). We call the function\ngetGrade() with two arguments: 85 and the function judge(). Note that when\ncalling the function as an argument, we do not include the parantheses. The judge()\nfunction gets stored in a callback. After determining the grade, the function that is\nstored in a callback (judge() in this case) gets called with the grade.\nThis could also be another function that does something more useful than judging,\nfor example, sending a certain email based on test results. If we wanted that, we\nactually wouldn't need to change the getGrade() function; we just need to write\na new function to do this and call getGrade() with the new function as a second\nargument.\nYou might be very disappointed right now, because this is not too exciting. Callbacks\nbecome really valuable in an asynchronous context, for example, when one function\nis still waiting for the results of a call to the database before calling the callback\nfunction that is going to process the data.\nSome JavaScript built-in functions work with this callback principle, for example,\nthe setTimeOut() and setInterval() functions. They will take a function that is\nexecuted after a certain time in the case of a timeout and every certain amount of\ntime for the specified interval. We have seen these already, but just as a reminder:\nsetInterval(encourage, 500);\nfunction encourage() {\nconsole.log(\"You're doing great, keep going!\");\n}\nThe functions that are inserted as arguments are called callbacks here.\nUnderstanding concurrency really starts with callbacks, but multiple nested\ncallbacks make code difficult to read.\n[ 348 ]\nChapter 13\nWhen this is all written as one function with anonymous functions inside, this gets\nvery indented as well. We call this callback hell or the Christmas tree problem\n(because the code gets nested so much, it looks like a Christmas tree on its side).\nCallbacks are a great concept, but they can create ugly code very fast. There is often a\nbetter solution, we promise.\nPractice exercise 13.1\nThis exercise will demonstrate how to use a callback function, creating a way to pass\na value from one function to another by invoking a callback function. We will create\na greeting callback using a full name in a string.\n1. Create a function named greet() that takes one argument, fullName. That\nargument should be an array. Output the items of the array into the console\ninterpolated into a greeting message string.\n2. Create a second function that has two arguments: the first one is a string for\nthe user's full name, and the second is the callback function.\n3. Split the string into an array using the split() method.\n4. Send the full-name array to the greet() function created in the first step.\n5. Invoke the process of the callback function.\nPromises\nWith Promises, we can organize the sequence of our code in a slightly easier-to-\nmaintain way. A Promise is a special object that connects code that needs to produce\na result and the code that needs to use this result in the next step.\nWhen we create a Promise, we give it a function. In the following example, we use a\nconvention that we have seen a lot; we are creating a function on the spot. So, inside\nthe argument list we are defining the function, often done using arrow functions as\nwell. This function needs two parameters, and these parameters are callbacks. We\nhave called them resolve and reject here.\nYou can call these parameters anything you want, but resolve or\nres and reject or rej are most common.\n[ 349 ]\nConcurrency\nWhen resolve() is called, the Promise is presumed to be successful and whatever\nis between the arrows is returned and used as input for the then method on the\nPromise object. If reject() is called, the Promise failed and the catch() method\non the Promise object (if present) is executed with the argument of the reject()\nfunction.\nThis is a lot of information that can be hard to understand at first, so here is an\nexample of a Promise to help you:\nlet promise = new Promise(function (resolve, reject) {\n// do something that might take a while\n// let's just set x instead for this example\nlet x = 20;\nif (x > 10) {\nresolve(x); // on success\n} else {\nreject(\"Too low\"); // on error\n}\n});\npromise.then(\nfunction (value) {\nconsole.log(\"Success:\", value);\n},\nfunction (error) {\nconsole.log(\"Error:\", error);\n}\n);\nWe first create a Promise. When creating a Promise, we don't know what the value\nof the Promise is going to be. This value is whatever is sent as an argument to the\nresolve function. It is a sort of placeholder.\nSo when we call then on the Promise, we basically say: figure out what the value\nof the Promise is, and when you know, execute one function if the Promise was\nresolved or a different function if it was rejected. When a Promise is neither resolved\nnor rejected, we say that the Promise is pending.\nthen() is a Promise itself, so when it returns we can use the result for the next then()\ninstance. This means we can chain the then() instances, which can look like this:\nconst promise = new Promise((resolve, reject) => {\nresolve(\"success!\");\n})\n[ 350 ]\nChapter 13\n.then(value => {\nconsole.log(value);\nreturn \"we\";\n})\n.then(value => {\nconsole.log(value);\nreturn \"can\";\n})\n.then(value => {\nconsole.log(value);\nreturn \"chain\";\n})\n.then(value => {\nconsole.log(value);\nreturn \"promises\";\n})\n.then(value => {\nconsole.log(value);\n})\n.catch(value => {\nconsole.log(value);\n})\nThis will log:\nsuccess!\nwe\ncan\nchain\npromises\nThe resolve functions are implemented with an arrow function. The return statement\nis the value input for the next function. You can see that the last block is a catch()\nfunction. If any of the functions were to result in a rejection and the Promise were\ntherefore rejected, this catch() block would be executed and print whatever the\nreject() function sent to the catch() method. For example:\nconst promise = new Promise((resolve, reject) => {\nreject(\"oops... \");\n})\n.then(value => {\nconsole.log(value);\nreturn \"we\";\n})\n[ 351 ]\nConcurrency\n.then(value => {\nconsole.log(value);\nreturn \"can\";\n})\n.then(value => {\nconsole.log(value);\nreturn \"chain\";\n})\n.then(value => {\nconsole.log(value);\nreturn \"promises\";\n})\n.then(value => {\nconsole.log(value);\n})\n.catch(value => {\nconsole.log(value);\n})\nThis will just log oops\u2026 because the first Promise was rejected instead of resolved.\nThis is great for creating asynchronous processes that need to wait till another\nprocess is complete. We can try to do a certain set of actions and when something\ngoes wrong, use a catch() method to deal with it.\nPractice exercise 13.2\nIn this exercise, you will create a counter that will output the values in sequence\nusing Promises.\n1. Set up a Promise that resolves with a value of Start Counting.\n2. Create a function named counter() that has one argument that gets the value\nand outputs it into the console.\n3. Set up the next function in the Promise with four then() instances, which\nshould output a value into the counter function, and return a value which\nwill provide input for the subsequent then() instance. The returned values\nshould be one, then two, then three. The screen output in the console should\nbe the following:\nStart Counting\nOne\nTwo\nThree\n[ 352 ]\nChapter 13\nasync and await\nWe have just seen the Promise syntax. With the async keyword, we can make a\nfunction return a Promise. This makes the Promises nicer to read and look a lot like\nsynchronous (non-concurrent) code. We can use this Promise just like we learned in\nthe previous section, or we can use the more powerful await keyword to wait until\nthe Promise is done. await only works in an asynchronous function.\nIn an asynchronous context, we can await other Promises as well, as can be seen in\nthis example:\nfunction saySomething(x) {\nreturn new Promise(resolve => {\nsetTimeout(() => {\nresolve(\"something\" + x);\n}, 2000);\n});\n}\nasync function talk(x) {\nconst words = await saySomething(x);\nconsole.log(words);\n}\ntalk(2);\ntalk(4);\ntalk(8);\nCan you figure out what this code does? We call the asynchronous function talk()\nthree times in a row with no break. Each of these function calls is awaiting the\nsaySomething() function. The saySomething() function contains a new Promise\nthat is being resolved with a setTimeout() function that waits two seconds before\nresolving with the value of something plus x. So after two seconds, the three\nfunctions are done at the same time (or so it seems to the human eye).\nIf the talk() function were not asynchronous, it would throw a SyntaxError because\nof the await keyword. await is only valid in asynchronous functions, so talk() must\nbe asynchronous. Without the async and the await in this example, it would store the\nresult of the function saySomething(), a pending Promise, in words and log that once\nfor every function call:\nPromise { <pending> }\nPromise { <pending> }\nPromise { <pending> }\n[ 353 ]\nConcurrency\nWe have now seen the basic building blocks of concurrency. This should prepare you\nfor working with concurrency in real life. Concurrency really is an advanced topic;\ndebugging it is troublesome, but it is really worth while in terms of performance\nwhen applied at the right moment.\nPractice exercise 13.3\nThis exercise will demonstrate how to use await to wait on a Promise inside an async\nfunction. Using await and async, create a counter with timeout(), and increment a\nglobal counter value.\n1. Create a global value for a counter.\n2. Create a function that takes one argument. Return the result of a new\nPromise, setting a setTimeout() function that will contain the resolve\ninstance.\n3. Increment the counter within setTimeout(), adding one every second.\nResolve the Promise with the value of the counter and the value of the\nvariable that was in the function argument.\n4. Create an asynchronous function that outputs into the console the value of\nthe global counter and the value of the argument of the function.\n5. Create a variable to capture the returned resolve value from the await\nfunction. Output that result into the console.\n6. Create a loop to iterate 10 times, incrementing the value and invoking the\nasync function, passing the value of the increment variable as the parameter\nin the function.\nThe results should look like the following:\nready 1 counter:0\nready 2 counter:0\nready 3 counter:0\nx value 1 counter:1\nx value 2 counter:2\nx value 3 counter:3\n[ 354 ]\nChapter 13\nEvent loop\nWe would like to end this chapter by explaining how JavaScript handles asynchrony\nand concurrency under the hood. JavaScript is a single-threaded language. A thread\nin this context means a path of execution. If there is only a single path, this means that\ntasks will have to wait for one another and only one thing can happen at a time.\nThis single executor is the event loop. It's a process that executes the actual work.\nYou may wonder about this, because you've just learned about concurrency and\ndoing things asynchronously and at the same time. Well, even though JavaScript\nis single-threaded, it doesn't mean that it cannot outsource some tasks and wait\nfor them to come back. This is exactly how JavaScript manages to do things in a\nmultithreaded manner.\nCall stack and callback queue\nJavaScript works with a call stack, and all the actions that it has to execute are\nqueued up here. The event loop is a process that is constantly monitoring this call\nstack, and whenever there are tasks to do, the event loop does them one by one. The\ntasks on top get executed first.\nHere's a tiny script:\nconsole.log(\"Hi there\");\nadd(4,5);\nfunction add(x, y) {\nreturn x + y;\n}\n[ 355 ]\nConcurrency\nHere's a visualization of the call stack and event loop for this script.\nFigure 13.1: Visualization of the event loop and the call stack\nNo multithreading is going on here. But it is here:\nconsole.log(\"Hi there\");\nsetTimeout(() => console.log(\"Sorry I'm late\"), 1000);\nconsole.log(add(4, 5));\nfunction add(x, y) {\nreturn x + y;\n}\n[ 356 ]\nChapter 13\nThe setTimeout() task gets outsourced to the browser's web API (more on APIs in\nChapter 15, Next Steps). When it's done, this appears in a special place: the callback\nqueue. When the call stack is empty (and only then!), the event loop will check the\ncallback queue for work to do. If there are any callbacks waiting, they'll be executed,\none by one. After every action, the event loop will check the call stack for work first.\nHere's a visualization of the situation with the outsourcing of setTimeout():\nFigure 13.2: Visualization of the setTimeout being outsourced\n[ 357 ]\nConcurrency\nWhen setTimeout() expires, the event loop will have done whatever was on the call\nstack already, and will check the callback queue and execute any tasks on there:\nFigure 13.3: Visualization of the task on the callback queue\nAnd this is what it will output:\nHi there\n9\nSorry I'm late\nLet's see if you read the above text well. What do you think will happen when we set\nthe timer to 0, like here?\nconsole.log(\"Hi there\");\nsetTimeout(() => console.log(\"Sorry I'm late\"), 0);\nconsole.log(add(4,5));\n[ 358 ]\nChapter 13\nfunction add(x, y) {\nreturn x + y;\n}\nThis will output the exact same thing. setTimeout() will also be outsourced when\nthe timer is at 0. The callback is placed in the callback queue right away, but the\nevent loop won't even check the callback queue until the callstack is empty. So it will\nstill print Sorry I'm late after 9, even though the timer is at 0.\nChapter project\nPassword checker\nUsing an array of allowed passwords, this exercise will create an application to check\nif one of these password string values exists in an array that lists all the accepted\npasswords. Set a Promise to check if the password is valid, and upon the result either\nresolve with the status of true or reject with the status of false. Return the check\nresults.\n1. Create an array of allowed passwords.\n2. Create a login function that will check if the argument is a value that is\nincluded in the passwords array. You can use indexof() or the includes()\nmethod to check the array for a value and return a Boolean value of the\nresult.\nThe includes() method is an array method that can\ncheck whether a certain value is included among the items\nin the array. It will return a Boolean value depending on\nthe result.\n3. Add a function that returns a Promise. Using resolve and reject, return a\nJavaScript object with the Boolean of true or false to indicate the password\nvalidity status.\n4. Create a function that checks the password, sending it to the login function,\nand using then() and catch(), outputs the result of either the rejected\npassword or the resolved password.\n5. Send several passwords, some within the array, others not, to the checker\nfunction.\n[ 359 ]\nConcurrency\nSelf-check quiz\n1. Fix the error in the following code to use the callback function:\nfunction addOne(val){\nreturn val + 1;\n}\nfunction total(a, b, callback){\nconst sum = a + b;\nreturn callback(sum);\n}\nconsole.log(total(4, 5, addOne()));\n2. Write down the result of the following code:\nfunction checker(val) {\nreturn new Promise((resolve, reject) => {\nif (val > 5) {\nresolve(\"Ready\");\n} else {\nreject(new Error(\"Oh no\"));\n}\n});\n}\nchecker(5)\n.then((data) => {console.log(data); })\n.catch((err) => {console.error(err); });\n3. What line(s) of code need to be added to the preceding function so that there\nis always a result after the function runs that ensures the word done is output\ninto the console?\n4. Update the below code to make the function return a Promise:\nfunction myFun() {\nreturn \"Hello\";\n}\nmyFun().then(\nfunction(val) { console.log(val); },\nfunction(err) { conole.log(err); }\n);\n[ 360 ]\nChapter 13\nSummary\nIn this chapter, we've discussed concurrency. Concurrency enables our code to do\nmultiple things at the same time and we can determine the order of things using\ncallbacks, Promises, and the async and await keywords. Implementing these in\nyour applications and pages will improve the user experience a lot! Users are quite\ndemanding nowadays; if a website isn't loading fast enough, they bounce (go back\nto, for example, Google). Concurrency helps to deliver results faster.\nThe next two chapters are about using JavaScript for modern web development and\nwill be dealing with HTML5 and JavaScript and modern JavaScript frameworks that\nare real game-changers.\n[ 361 ]\n14\nHTML5, Canvas, and\nJavaScript\nHTML5 was released in 2012 and became standardized in 2014, which caused\nbrowsers to support all sorts of new features. The introduction of HTML5 impacted\nthe realm of possibilities that are available through JavaScript. The options for\ngraphics, videos, interaction with graphics, and a lot more with JavaScript have\nincreased tremendously since the introduction of HTML5, and have been so\nrevolutionary that in fact, they led to the end of support of Flash by web browsers.\nHTML5 allows web page(s) to be better structured by adding new elements, such as\n<header>. And also the DOM has improved quite a bit, which has led to increased\nperformance. There are quite a few other additions and you'll see some of them\nin the chapter. Another fun (and useful) addition worth mentioning here is the\n<canvas> element, which we'll cover in this chapter as well.\nJavaScript gives us a lot of amazing features already, but together with HTML5\nthere is a lot more possible when it comes to creating dynamic interactive web apps.\nThis combination enables us to level up our content presentation game. We can\nwork with files in the browser now, as well as drawing on the HTML5 canvas and\nadding images and text to it.\nIn this chapter, we will be examining some of the amazing things HTML5 has\nbrought us. The topics don't all relate to one another directly, but they have in\ncommon that they were made possible by the powerful team of HTML5 and\nJavaScript, and of course, that they are all fun and useful. They will allow you to\ncreate an even more dynamic and interactive experience for the users of your app.\n[ 363 ]\nHTML5, Canvas, and JavaScript\nThese are the topics that will be covered in this chapter:\n\u2022 Introducing HTML5 with JavaScript\n\u2022 Local file reader\n\u2022 GeoLocation\n\u2022 HTML5 canvas\n\u2022 Dynamic canvas\n\u2022 Drawing on the canvas with the mouse\n\u2022 Saving dynamic images\n\u2022 Media on the page\n\u2022 Digital accessibility\nNote: exercise, project and self-check quiz answers can be found in\nthe Appendix.\nIntroducing HTML5 with JavaScript\nHTML5 is formally a version of HTML. It is a huge step up compared to its\npredecessor and enables us to make full applications in the web browser that are\neven accessible offline. When you read HTML5 in a job description, it often means\nmore than just HTML. Usually, the combination of HTML5 with JavaScript, CSS,\nJSON, and others is included here as well.\nSince HTML5 the structure of our page has improved. We have new elements\nsuch as <header>, <nav>, and <article>. And we can play videos with the <video>\nelement, which means we no longer need Flash since HTML5. And as we already\nmentioned we can work with the <canvas> element to create visuals on the page or to\nrepresent visuals such as animation, graphs, and others. Some things that had to be\ndone with JavaScript in the past can now be done solely with HTML, such as adding\nvideo and audio to a webpage.\nChanges to the DOM also improved the loading time of web page(s). We are going\nto dive into some of the HTML5-specific features in this chapter. Let's start with\naccessing files from the browser.\n[ 364 ]\nChapter 14\nLocal file reader\nSince HTML5 we can finally interact with local files using the JavaScript that runs in\nour browser, which is really an amazing feature. Using this feature, we can upload\nfiles from our device to our web app and read from them in our app. This means that\nwe can attach files to forms for example, which is great in many cases whenever we\nneed to upload some sort of file for whatever purpose, for example, adding a r\u00e9sum\u00e9\nto your online job application.\nLet's first make sure that the browser you are using supports this. We can run a\nsimple script to check whether it does:\n<!DOCTYPE html>\n<html>\n<body>\n<div id=\"message\"></div>\n<script>\nlet message = document.getElementById(\"message\");\nif (window.FileReader) {\nmessage.innerText = \"Good to go!\";\n} else {\nmessage.innerText = \"No FileReader :(\";\n}\n</script>\n</body>\n</html>\nIf you open this file in your browser it should say Good to go! when your browser\nsupports file reading. Try updating your browser or using another one if it says No\nFileReader :(. Browsers that will work are, for example, Chrome and Firefox.\nUploading files\nUploading files is actually easier than you might think. We indicate we want to\nupload a file by adding an input of type file. Here is a basic script that does just that:\n<!DOCTYPE html>\n<!DOCTYPE html>\n<html>\n<body>\n<input type=\"file\" onchange=\"uploadFile(this.files)\" />\n<div id=\"message\"></div>\n[ 365 ]\nHTML5, Canvas, and JavaScript\n<script>\nlet message = document.getElementById(\"message\");\nfunction uploadFile(files) {\nconsole.log(files[0]);\nmessage.innerText = files[0].name;\n}\n</script>\n</body>\n</html>\nIt gives a blank HTML page with a Choose file button and the No file chosen\ncomment behind it. Clicking on the button pops up the filesystem and you can\nselect a file. After selecting the file, the JavaScript gets triggered. And as you can\nsee, we are sending in the property files that are active in our body. This is a list of\nfiles. Therefore, we are grabbing the 0th index, the first element in the list. Files are\nrepresented as objects.\nThe file object gets logged to the console here, which enables you to see all the\nproperties and associated values. Some of the important properties are the name,\nsize, type, and lastModified, but there are many more.\nWe are putting the name of our file in the innerText of our div message. So, on the\nscreen, you will see the name of the file appear in the div. We can do something\nsimilar for multiple files. Here is how to upload multiple files at the same time:\n<html>\n<body>\n<input type=\"file\" multiple onchange=\"uploadFile(this.files)\" />\n<div id=\"message\"></div>\n<script>\nlet message = document.getElementById(\"message\");\nfunction uploadFile(files) {\nfor (let i = 0; i < files.length; i++) {\nmessage.innerHTML += files[i].name + \"<br>\";\n}\n}\n</script>\n</body>\n</html>\n[ 366 ]\nChapter 14\nWe have added the multiple attribute to our input element. This changes the text on\nthe button; instead of Choose file it now says Choose files, and we can select more\nthan one file as a result.\nWe have changed our upload function a bit as well by adding a loop. And instead\nof innerText, we are now using innerHTML, because then we could insert a break\nusing the HTML break. It will output the names of all the selected files below the\ninput box on the screen.\nReading files\nThere is a special JavaScript object for reading files. It has a very suitable name:\nFileReader. Here is how we can use it to read a file.\n<!DOCTYPE html>\n<html>\n<body>\n<input type=\"file\" onchange=\"uploadAndReadFile(this.files)\" />\n<div id=\"message\"></div>\n<script>\nlet message = document.getElementById(\"message\");\nfunction uploadAndReadFile(files) {\nlet fr = new FileReader();\nfr.onload = function (e) {\nmessage.innerHTML = e.target.result;\n};\nfr.readAsText(files[0]);\n}\n</script>\n</body>\n</html>\nAs you can see, we have to specify what needs to happen in order to connect\nour HTML and JavaScript to a file. We do this by adding the onload event as an\nanonymous function that is sending on the event data.\nReading the data can then be done using one of the readAs() methods on the\nFileReader object. We have used readAsText() here, because we are dealing with a\ntext file. This triggers the actual reading and the onload function that comes with it\ngets triggered when it's done, adding the result of the reading to our message. This\naccepts all file types, but not all file types will make sense.\n[ 367 ]\nHTML5, Canvas, and JavaScript\nIn order to see something sensible, we will have to upload something that contains\nplain text, such as .txt, .json, and .xml. With this we can also send a file to the\nserver or process the contents of a log file.\nPractice exercise 14.1\nThis exercise will demonstrate the process of uploading and displaying local image\nfiles in your webpage. Use the following HTML and CSS as a starting template:\n<!doctype html>\n<html>\n<head>\n<title>Complete JavaScript Course</title>\n<style>\n.thumb {\nmax-height: 100px;\n}\n</style>\n</head>\n<body>\n<input type=\"file\" multiple accept=\"image/*\" />\n<div class=\"output\"></div>\n<script>\n</script>\n</body>\n</html>\nTake the following steps to complete the script element:\n1. Select your page elements as values within variable objects in your JavaScript\ncode.\n2. Add an event listener to the input field. The event trigger should be changed\nso that it immediately invokes a reader function.\n3. Create a function to handle the reading of the selected files.\n4. Using the event object, select the target element that triggered the event. Get\nthe files selected within that input and assign them to the files variable.\n5. Loop through all the files that were selected.\n6. Set the files by index within the loop to a variable named file.\n[ 368 ]\nChapter 14\n7. Set the image file as the file within the loop selected from the user input field\nfiles.\n8. Add the newly created img tag to the page, create an area on the page that\nyou can output the content to, and append the new page element to it.\n9. Create a new FileReader object.\n10. Add an onload event listener to the fileReader object to create and invoke an\nanonymous function that sets the source of the image as the result from the\ntarget element. Pass in the image object you just created as an argument into\nthe function.\n11. Using readAsDataURL(), get the current file object and pass it into the file\nreader object so that it can be used once the onload completes and is added to\nthe page.\n12. You can now select multiple image files from your computer and have them\nshow on your webpage.\nGetting position data with GeoLocation\nWe are going to look at the window object navigator now to see whether we can\nlocate the user of the browser. This can be useful for many things, for example,\nsuggesting restaurant locations nearby the user. We can have a look at the\nGeoLocation by inspecting navigator.geolocation. This is one way to do it:\n<!DOCTYPE html>\n<html>\n<body>\n<script>\nwindow.onload = init;\nfunction init() {\nconsole.dir(navigator.geolocation);\n}\n</script>\n</body>\n</html>\n[ 369 ]\nHTML5, Canvas, and JavaScript\nIf you check out the log, you can see what the GeoLocation object contains, and one\nof these methods is to get the current position of the user. Here is how to use it:\n<!DOCTYPE html>\n<html>\n<body>\n<script>\nwindow.onload = init;\nfunction init() {\nnavigator.geolocation.getCurrentPosition(showGeoPosition);\n}\nfunction showGeoPosition(data) {\nconsole.dir(data);\n}\n</script>\n</body>\n</html>\nThis might look a bit more complicated than you'd expect, and this is because\nthe getCurrentPosition() method takes another method as an argument. The\nposition data gets sent to this function and that function will use the data as input.\nTherefore, we will have to wrap console.dir() in an external function (called\nshowGeoPosition()) that takes a parameter and outputs this data so that we can see\nthe data in the console. We can then send this function to the getCurrentPosition()\nfunction and see the data.\nIf you run this, you should get a GeolocationPosition object, with a coords property\ncontaining your latitude and longitude. The browser might prompt whether you're\nokay with sharing your location. And if it doesn't show anything, make sure the\npreferences and settings of your computer allow the browser to use your location.\nUsing this, you can get the location of the user and show personalized content based\non it or gather data about their location for other purposes, such as analyzing where\nvisitors are located or displaying suggestions for the user based on their location.\nHTML5 canvas\nDid we already mention that the <canvas> element is new in HTML5? This is an\namazing tool that will help you create dynamic web apps. Here is how to set up the\ncanvas:\n[ 370 ]\nChapter 14\n<!DOCTYPE html>\n<html>\n<body>\n<canvas id=\"c1\"></canvas>\n<script></script>\n</body>\n</html>\nAnd when you open this page, you will see nothing. Why? Well, the canvas element\nis, by default, a white rectangle that you cannot see against the white background.\nYou could add some CSS to add a border to the canvas or a background color to the\nbody and your canvas will be revealed.\nBut, we probably want to put something on it and we need JavaScript to make that\nhappen. Let's create a \"drawing\" on it using JavaScript:\n<!DOCTYPE html>\n<html>\n<head>\n<style>\ncanvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<canvas id=\"c1\"></canvas>\n<script>\nlet canvas = document.getElementById(\"c1\");\nlet ctx = canvas.getContext(\"2d\");\ncanvas.width = 500; //px\ncanvas.height = 500; //px\nctx.fillRect(20, 40, 100, 100);\n</script>\n</body>\n</html>\nThe context of the canvas is read and stored in the ctx variable (a common shortened\nversion of context). We need this to be able to draw on the canvas. We change the\ndimensions of the canvas to 500 by 500 pixels. This is not the same as using CSS for\nwidth and height; this adds the HTML attributes' width and height.\n[ 371 ]\nHTML5, Canvas, and JavaScript\nWith the fillRect() method on the context of the canvas, we can draw a rectangle\non the canvas. It takes four parameters. The first two are the x and y coordinates\nof where the figure should be added to the canvas. The last two are the width and\nheight of the rectangle. In our case, it's a square. Here is what the result looks like:\nFigure 14.1: Result of the fillRect() method on our 500 px by 500 px canvas\nWe can also change the color we are drawing with. You can get a pink square instead\nby replacing the JavaScript of the previous HTML document with the following:\n<script>\nlet canvas = document.getElementById(\"c1\");\nlet ctx = canvas.getContext(\"2d\");\ncanvas.width = 500; //px\ncanvas.height = 500; //px\nctx.fillStyle = \"pink\";\nctx.fillRect(20, 40, 100, 100);\n</script>\nWe have now just used the word pink, but you can also work with\nhexadecimal color codes for the fillStyle property, which could\nlook like this for pink: #FFC0CB. The first two characters specify the\namount of red (FF here), the third and fourth the amount of green\n(C0), and the last two the amount of blue (CB). The values differ\nfrom 00 to FF (0 to 255 in decimal numbers).\nThere are more things you can do with the canvas than just drawing. Let's have a\nlook at adding text to our canvas.\n[ 372 ]\nChapter 14\nPractice exercise 14.2\nWe will be implementing shapes and using the HTML5 canvas element to draw\non a webpage with JavaScript. Draw a rectangle using JavaScript. The output will\nresemble the following:\nFigure 14.2: Exercise outcome\nTake the following steps:\n1. Add the canvas element to the page.\n2. Set the width and height to 640 px and, using CSS, add a 1 pc border to the\nelement.\n3. Within the JavaScript, select the canvas element and set the Context to 2d.\n4. Set the fill style to red.\n5. Create an output of the shape by using a rectangle.\n6. Set the outline of the rectangle.\n7. Clear the rectangle inside to make it transparent and the color of the\nbackground.\nDynamic canvas\nWe can draw more advanced shapes, add images, and add text. This enables us to\ntake our canvas skills to the next level.\n[ 373 ]\nHTML5, Canvas, and JavaScript\nAdding lines and circles to the canvas\nHere we will see how to draw a line and a circle. Here is a piece of sample code that\ndraws a line:\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n#canvas1 {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<canvas id=\"canvas1\"></canvas>\n<script>\nlet canvas = document.getElementById(\"canvas1\");\nlet ctx = canvas.getContext(\"2d\");\ncanvas.width = 100;\ncanvas.height = 100;\nctx.lineWidth = 2;\nctx.moveTo(0, 20);\nctx.lineTo(50, 100);\nctx.stroke();\n</script>\n</body>\n</html>\nThe line width is set to 2 pixels. This first puts the focus to 0 (x) and 20 (y). This\nmeans it is at the very left edge of the canvas, 20 pixels from the top. This canvas is\nsmaller; it is 100 by 100 pixels. The second point is at 50 (x) and 100 (y). This is what\nthe line looks like:\nFigure 14.3: Outcome of drawing a line to the canvas\n[ 374 ]\nChapter 14\nAnd before we move over to text, here is how to draw a circle.\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n#canvas1 {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<canvas id=\"canvas1\"></canvas>\n<script>\nlet canvas = document.getElementById(\"canvas1\");\nlet ctx = canvas.getContext(\"2d\");\ncanvas.width = 150;\ncanvas.height = 200;\nctx.beginPath();\nctx.arc(75, 100, 50, 0, Math.PI * 2);\nctx.stroke();\n</script>\n</body>\n</html>\nWe use the arc() method to create a curve or a circle. It takes five parameters:\n\u2022 start position x on canvas\n\u2022 start position y on canvas\n\u2022 radius of the circle\n\u2022 starting angle in radians\n\u2022 ending angle in radians\n[ 375 ]\nHTML5, Canvas, and JavaScript\nSo, if we don't want a circle, but a semicircle, for example, we'll have to specify a\ndifferent starting and end angle in radians. This time we used the stroke() method\nto do the actual drawing instead of the fill() method:\nFigure 14.4: Outcome of drawing a circle using the arc() method\nStroke() is only drawing the line, whereas fill() colors the full shape.\nIn the canvas, the shapes and lines will be added on top of each other, based on the\norder in which they're drawn. The first one you draw is underneath the latter ones.\nExactly what happens when you paint on a real canvas. You will be seeing this in the\nnext practice exercise.\nPractice exercise 14.3\nIn this exercise, you will be drawing a stick person using canvas:\nFigure 14.5: Exercise result within the web browser canvas element\n[ 376 ]\nChapter 14\n1. Create the page elements and prepare to draw on the canvas.\n2. Begin the path with an arc roughly at the top center of your canvas object.\n3. Using arc(), set a position for the left eye, roughly at the top left of the center\nof the arc you just drew, then add another arc for the right eye. Create a half\narc for the mouth (the radian angle for a semicircle is pi) and fill all.\n4. Move the draw position to the center and draw a line for the nose.\n5. Draw the body with a line down from the center of the arc, create the left\narm, and then move the draw position to do the right arm, which will be\ntwice the width of the left arm. Move back to the center and continue down\nto draw the left leg, move back to the center, and draw the line for the right\nleg.\n6. Move to the top, set the colour to blue, and draw a triangle for a hat.\nAdding text to the canvas\nWe can add text to the canvas in a similar fashion as well. In this example, we set a\nfont and a font size, and then write our text to the canvas:\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n#canvas1 {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<canvas id=\"canvas1\"></canvas>\n<script>\nlet canvas = document.getElementById(\"canvas1\");\nlet ctx = canvas.getContext(\"2d\");\ncanvas.width = 200;\ncanvas.height = 200;\nctx.font = \"24px Arial\";\nlet txt = \"Hi canvas!\";\nctx.fillText(txt, 10, 35);\n</script>\n</body>\n</html>\n[ 377 ]\nHTML5, Canvas, and JavaScript\nThe fillText() method is used to add text. We have to specify three parameters: the\ntext, the x position, and the y position. Here is the result:\nFigure 14.6: Result of using the fillText() method\nWe have specified 35 px from the top for the text to start. We can specify other\naspects of the text, for example, like this:\nctx.textAlign = \"center\";\nHere, we use the textAlign property on the canvas to specify how the text should\nbe aligned.\nPractice exercise 14.4\nWe will work with text and add text to your canvas element. The following exercise\nwill demonstrate how to dynamically add text and position it within your canvas\nelement. The result from the exercise code will look similar to this diagram:\n[ 378 ]\nChapter 14\nFigure 14.7: Exercise outcome\nTake the following steps:\n1. Create a simple HTML document, and add the canvas element to your page.\nSet the height and width to 640, and add a 1 px border to the element so you\ncan see it on the page.\n2. Select the page elements as values within JavaScript variables.\n3. Create a string variable with the message Hello World.\n4. Set a font style using the font property and a blue fill color using the\nfillStyle property. You can also align the text to the left.\n5. Add the text to the canvas with fillText and set the x and y positions of the\ntext.\n6. Set a new font and color of red.\n7. Create a loop and, using the value of the loop variable, add text to the page\ncanvas element.\n[ 379 ]\nHTML5, Canvas, and JavaScript\nAdding and uploading images to the canvas\nWe can add an image to the canvas. We can simply get an image from our page, and\nadd it to our canvas:\n<!DOCTYPE html>\n<html>\n<head>\n<style>\ncanvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<canvas id=\"c1\"></canvas>\n<img id=\"flower\" src=\"flower.jpg\" />\n<script>\nwindow.onload = function () {\nlet canvas = document.getElementById(\"c1\");\ncanvas.height = 300;\ncanvas.width = 300;\nlet ctx = canvas.getContext(\"2d\");\nlet myImage = document.getElementById(\"flower\");\nctx.drawImage(myImage, 10, 10);\n};\n</script>\n</body>\n</html>\nWe wrap it all in an onload event listener here because we want to be sure that\nthe image is loaded before getting it from the DOM, else the canvas will remain\nempty. We use the drawImage() method to add an image to the canvas. It takes three\narguments: the image, the x position, and the y position.\nWe can use one canvas inside another canvas as well. We do this exactly like we did\nwhen we were using the image. This is a very powerful feature, because it enables\nus to use a part of the drawing from the user input, for example. Let's look at an\nexample of how to do this:\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n[ 380 ]\nChapter 14\ncanvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<canvas id=\"canvas1\"></canvas>\n<canvas id=\"canvas2\"></canvas>\n<canvas id=\"canvas3\"></canvas>\n<script>\nlet canvas1 = document.getElementById(\"canvas1\");\nlet ctx1 = canvas1.getContext(\"2d\");\nctx1.strokeRect(5, 5, 150, 100);\nlet canvas2 = document.getElementById(\"canvas2\");\nlet ctx2 = canvas2.getContext(\"2d\");\nctx2.beginPath();\nctx2.arc(60, 60, 20, 0, 2 * Math.PI);\nctx2.stroke();\nlet canvas3 = document.getElementById(\"canvas3\");\nlet ctx3 = canvas3.getContext(\"2d\");\nctx3.drawImage(canvas1, 10, 10);\nctx3.drawImage(canvas2, 10, 10);\n</script>\n</body>\n</html>\nWe create three canvases, to two we add shapes, and the third one is a combination\nof the first two. Here is what it looks like:\nFigure 14.8: The result: three canvases with shapes\nWe also can upload images to the canvas. This can be of great use when you want\nto show a preview to your user of something that was just uploaded, for example, a\nprofile picture. This is very similar to grabbing the <img> element from the webpage\nand using that element, but this time we need to read our data from the uploaded\nfile, create a new image element, and then draw that image to the canvas.\n[ 381 ]\nHTML5, Canvas, and JavaScript\nThe below code does just that:\n<html>\n<head>\n<style>\ncanvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<input type=\"file\" id=\"imgLoader\" />\n<br>\n<canvas id=\"canvas\"></canvas>\n<script>\nlet canvas = document.getElementById(\"canvas\");\nlet ctx = canvas.getContext(\"2d\");\nlet imgLoader = document.getElementById(\"imgLoader\");\nimgLoader.addEventListener(\"change\", upImage, false);\nfunction upImage() {\nlet fr = new FileReader();\nfr.readAsDataURL(event.target.files[0]);\nfr.onload = function (e) {\nlet img = new Image();\nimg.src = event.target.result;\nimg.onload = function () {\ncanvas.width = img.width;\ncanvas.height = img.height;\nctx.drawImage(img, 0, 0);\n};\nconsole.log(fr);\n};\n}\n</script>\n</body>\n</html>\nEvery time the input of the input field changes, the upImage() method gets executed.\nThis method does a few things, so let's break them down. First of all, we create a\nnew FileReader and add the uploaded file. There is only one in this case, so we\nuse index 0. Instead of readAsText() that we have already seen, we are now using\nreadAsDataURL(), which we can use to read images.\n[ 382 ]\nChapter 14\nThis will trigger the onload event. And in our case, this creates a new image that can\nbe added to the canvas later. As a source, we add the result of our read action and\nwhen the image is loaded, we change the size of our canvas to the size of our picture\nand then add the picture in there.\nThese new skills will enable you to work with images on canvases, draw your own\nimages, upload images from elsewhere, and even re-use the ones on the webpage.\nThis can come in handy for many situations, for example, to create basic animation,\nor to create the functionality to upload a new profile picture to a user's profile.\nPractice exercise 14.5\nWe will practice uploading a local image to the canvas. The following exercise\nwill demonstrate how to upload images from your local computer and have them\ndisplayed within the canvas element within your browser.\n1. Set up the page elements and add an input field to upload an image. Add the\ncanvas element to the page.\n2. In JavaScript, select the input field and the canvas elements as JavaScript\nobjects.\n3. Add an event listener to invoke an upload function once there is a change in\nthe input field contents.\n4. Create the aforementioned function to handle the upload of the image\nto the canvas. Using FileReader, create a new FileReader object. In the\nreader.onload event, create a new image object.\n5. Add an onload listener to the image object so that when the image is loaded,\nset the canvas height and width to match half the image size height and\nwidth. Using ctx.drawImage(), add the image to the canvas.\n6. Set the img source to the result from the input value.\n7. Use the reader object and invoke readAsDataURL() to convert the file input\nvalue to a readable format of base64 image data that can be used within the\ncanvas.\nAdding animations to the canvas\nWith the methods we have seen so far, we can already start creating animations. We\ndo this by using loops and recursion, combined with timeout(). These drawings\nwith (short) time intervals result in an animation. Let's start with a basic animation:\n<!DOCTYPE html>\n<html>\n[ 383 ]\nHTML5, Canvas, and JavaScript\n<head>\n<style>\ncanvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<canvas id=\"canvas\"></canvas>\n<script>\nwindow.onload = init;\nvar canvas = document.getElementById(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\ncanvas.height = 500;\ncanvas.width = 500;\nvar pos = {\nx: 0,\ny: 50,\n};\nfunction init() {\ndraw();\n}\nfunction draw() {\npos.x = pos.x + 5;\nif (pos.x > canvas.width) {\npos.x = 0;\n}\nif (pos.y > canvas.height) {\npos.y = 0;\n}\nctx.fillRect(pos.x, pos.y, 100, 100);\nwindow.setTimeout(draw, 50);\n}\n</script>\n</body>\n</html>\n[ 384 ]\nChapter 14\nThis will start drawing a square at position 5, 50. And after 50 ms, it will draw\nanother square at position 10, 50, and after that at 15, 50. And it will keep on\nchanging this x value by 5 up to the point that x gets bigger than the width of the\ncanvas, when it is then set to zero. This way, the last bit of white canvas on that line\ngets colored black too.\nRight now, it is more creating a line, and not a moving square. This is because we\nkeep on adding the colored part to the canvas, but not resetting it to the previous\ncolor. We can do this with the clearRect() method. This method takes four\nparameters. The first two are the starting point to draw the rectangle to be cleared\n(so x, y). The third one is the width of the rectangle to be cleared and the last one is\nthe height. In order to clear the full canvas, we'll have to write:\nctx.clearRect(0, 0, canvas.width, canvas.height);\nAdding this to the beginning of the draw function in our previous example results in\na moving square instead of a fat line being drawn because the previous square is not\nkept, but the canvas resets every time and the square gets drawn from scratch.\nPractice exercise 14.6\nWe will practice animating shapes and moving objects on the page. This exercise will\ndemonstrate how to move an object on the page using the HTML5 canvas element\nand JavaScript.\nFigure 14.9: Red circle moving within the boundaries of the canvas object\n[ 385 ]\nHTML5, Canvas, and JavaScript\nTake the following steps to create a red circle that will then be moved within the\ncanvas boundaries, appearing to be bouncing off the sides:\n1. Create the canvas and apply a border of 1 px to it.\n2. Select the canvas page elements with JavaScript and prepare to draw on the\ncanvas.\n3. Create variables to track the x and y positions, as well as the x-direction\nspeed and the y-direction speed. You can set these as a default of 1 and the x\nand y starting positions can be half of the canvas dimensions.\n4. Create a function to draw the ball. This will draw the ball as a red ball arc in\nthe x and y positions. Also, the size for the ball should be set as a variable so\nthat the boundaries can be calculated from it. Fill and close the path.\n5. Create a function to move the ball and set the interval on that function to 10\nmilliseconds.\n6. In the aforementioned movement function, clear the current rectangle and\ndraw the ball using the draw ball function.\n7. Check the position of the ball. If the ball is outside the canvas boundaries,\nyou need to change direction. This can be done by multiplying the direction\nby -1. Update the x and y positions with the new values.\nDrawing on canvas with a mouse\nWe have all the ingredients already to create a canvas on which we can draw with\nour mouse. Let's walk you through it. We'll start by setting up the canvas:\n<!DOCTYPE html>\n<html>\n<head>\n<style>\ncanvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<canvas id=\"canvas\"></canvas>\n<input type=\"color\" id=\"bgColor\" />\n[ 386 ]\nChapter 14\n<script>\nlet canvas = document.getElementById(\"canvas\");\nlet ctx = canvas.getContext(\"2d\");\ncanvas.width = 700;\ncanvas.height = 700;\n</script>\n</body>\n</html>\nIn our script element, we are going to add a method for when the window has\nloaded. When the window has loaded, we need to add some event listeners:\nwindow.onload = init; // add this line to the start of the script\nfunction init() {\ncanvas.addEventListener(\"mousemove\", draw);\ncanvas.addEventListener(\"mousemove\", setPosition);\ncanvas.addEventListener(\"mouseenter\", setPosition);\n}\nWe want to draw when the mouse is moving, and we want to change the current\nposition on the canvas when the mouse is moving. This is also something we want\nto do on mouseenter. Let's write the code for setting the position. This will be added\nto the script element as well. We will also have to add the position variable, which\nagain should be declared at the start of the script:\nlet pos = {\nx: 0,\ny: 0,\n};\nAnd the function for setting the position:\nfunction setPosition(e) {\npos.x = e.pageX;\npos.y = e.pageY;\n}\nThis function gets triggered on mousemove and on mouseenter. The event that triggers\nthis has a pageX and a pageY property we can use to get the current position of the\nmouse.\n[ 387 ]\nHTML5, Canvas, and JavaScript\nThe last must-have ingredient for drawing on the canvas is the draw() method. Here\nis what it could look like:\nfunction draw(e) {\nif (e.buttons !== 1) return;\nctx.beginPath();\nctx.moveTo(pos.x, pos.y);\nsetPosition(e);\nctx.lineTo(pos.x, pos.y);\nctx.lineWidth = 10;\nctx.lineCap = \"round\";\nctx.stroke();\n}\nWe start with something that might look strange, but it is a great trick to make sure\nthat the mouse is actually being clicked. We don't want to be drawing when no\nbutton on the mouse is clicked. This method prevents that by returning from the\nmethod if it is not being clicked.\nThen we start to begin a path. We always have a current x and y, so they are set as\ncoordinate one, and then we set them again and use these new coordinates for the\nline. We give it a round linecap to achieve smooth lines and a line width of 10. Then\nwe draw the line, and as long as the mouse is moving, the draw() function gets\ncalled again.\nThe app can now be opened and used as a functioning drawing tool. We can also\ngive the user more options here, for example, adding a color picker to change the\ncolor that the user is drawing with. In order to do that, we'll have to add a color\npicker to the HTML, like this:\n<input type=\"color\" id=\"bgColor\" />\nAnd change the selected color in JavaScript by adding an event listener for when the\nvalue of that input box changes:\nlet bgColor = \"pink\";\nlet bgC = document.getElementById(\"bgColor\");\nbgC.addEventListener(\"change\", function () {\nbgColor = event.target.value;\n});\nWe start with the color pink, and overwrite it with whatever the user selects in the\ncolor picker.\n[ 388 ]\nChapter 14\nPractice exercise 14.7\nWe will create an online drawing board, and include a dynamic value for width,\ncolor, and ability to erase the current drawing. Use the following HTML as a\ntemplate for this project to add JavaScript code to:\n<!doctype html>\n<html>\n<head>\n<style>\ncanvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<div class=\"controls\">\n<button class=\"clear\">Clear</button> <span>Color\n<input type=\"color\" value=\"#ffff00\" id=\"penColor\"></span>\n<span>Width\n<input type=\"range\" min=\"1\" max=\"20\" value=\"10\"\nid=\"penWidth\"></span> </div>\n</div>\n<canvas id=\"canvas\"></canvas>\n<script>\n</script>\n</body>\n</html>\nTake the following steps:\n1. Select the page elements as variable objects in JavaScript. Get the input field\nand select the button as an object.\n2. Add an event listener to the button that will run a function to clear the\ncurrent canvas. Within the clear function, use the confirm() method to check\nif the user wants to erase the canvas drawing. If they then confirm using\nclearRect(), delete the contents of the canvas element.\n3. Set a global position object for x and y and by adding event listeners to the\nmouse events, update the position. If the mouse move is triggered, invoke\na draw function. Set the position to update the mouse position, setting the\nglobal position values to that of the mouse x and y.\n[ 389 ]\nHTML5, Canvas, and JavaScript\n4. Within the draw function, check if the mouse button is pressed, and if not,\nthen add return. If it is pressed, we can then draw on the canvas. Set the new\npath and move to the positions x and y. Start a new line, get the strokestyle\nvalue from the color input field, and set the linewidth value from the input\nwidth value. Add the stroke() method to add the new line to the page.\nSaving dynamic images\nWe can convert the canvas to an image, and this image can then be saved as a next\nstep. In order to convert it to an image, we need to add the following to our script\nelement:\nlet dataURL = canvas.toDataURL();\ndocument.getElementById(\"imageId\").src = dataURL;\nWe are changing our canvas to a data URL, which then becomes the source of our\nimage. We want this to happen whenever a save button gets clicked. Here is the\nbutton:\n<input type=\"button\" id=\"save\" value=\"save\" />\nAnd the event listener:\ndocument.getElementById(\"save\").addEventListener(\"click\", function () {\nlet dataURL = canvas.toDataURL();\ndocument.getElementById(\"holder\").src = dataURL;\n});\nNow whenever the save button gets clicked, it is going to update the image with the\ngenerated data URL from the canvas. Whatever content is within the canvas element\nwill be turned into a base64 data image value and added to the page within an img\ntag.\nIn the following example, there is a canvas of 200 by 200 pixels and an empty\nimage of the same size. When a color gets selected, a square of 100 by 100 pixels in\nthat color is drawn on the canvas. When the save button gets clicked, this canvas\ngets converted to an image. This image can then be saved. Here is the code for the\nexample:\n[ 390 ]\nChapter 14\n<!doctype html>\n<html>\n<head>\n<style>\ncanvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<canvas id=\"canvas\"></canvas>\n<input type=\"color\" id=\"squareColor\" />\n<br>\n<img src=\"\" width=\"200\" height=\"200\" id=\"holder\" />\n<input type=\"button\" id=\"save\" value=\"save\" />\n<script>\nconst canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = 200;\ncanvas.height = 200;\nconst penColor = document.getElementById(\"squareColor\");\npenColor.addEventListener(\"change\", function () {\ncolor = event.target.value;\ndraw(color);\n});\ndocument.getElementById(\"save\").addEventListener(\"click\",\nfunction () {\nlet dataURL = canvas.toDataURL();\ndocument.getElementById(\"holder\").src = dataURL;\n});\nfunction draw(color) {\nctx.fillStyle = color;\nctx.fillRect(70, 70, 100, 100);\n}\n</script>\n</body>\n</html>\n[ 391 ]\nHTML5, Canvas, and JavaScript\nHere is what it looks like after saving the image:\nFigure 14.10: Result of saving the image\nMedia on the page\nThere are special elements for media on the page. We are going to show you how to\nadd audio and video and how to embed YouTube on a webpage.\nAdding an audio player to a page is very simple:\n<!DOCTYPE html>\n<html>\n<body>\n<audio controls>\n<source src=\"sound.ogg\" type=\"audio/ogg\">\n<source src=\"sound.mp3\" type=\"audio/mpeg\">\n</audio>\n</body>\n</html>\n[ 392 ]\nChapter 14\nYou specify the controls attribute if you want the user to be able to control pause\nand play and the volume. If you want it to start automatically, you'll have to add the\nattribute autoplay. With the source element, you specify the audio files that can be\nplayed. The browser will choose only one and will choose the first one (from top to\nbottom) that it supports.\nAdding a video to a webpage is very similar to adding audio. Here's how to do it:\n<video width=\"1024\" height=\"576\" controls>\n<source src=\"movie.mp4\" type=\"video/mp4\">\n<source src=\"movie.ogg\" type=\"video/ogg\">\n</video>\nOften you would want to link to YouTube instead. Here's how to do that:\n<iframe\nwidth=\"1024\"\nheight=\"576\"\nsrc=\"https://www.youtube.com/embed/v6VTv7czb1Y\"\n>\n</iframe>\nYou will have to use the iframe element. This is a special element that allows another\nwebpage inside the current webpage. And you can then add the YouTube embed\nlink as a source. The last code after embed comes from the video URL.\nThe height and width attributes of the video can be changed to make the video\nbigger or smaller. If you want to show it fullscreen, you can change the width and\nheight like this:\n<iframe\nwidth=\"100%\"\nheight=\"100%\"\nsrc=\"https://www.youtube.com/embed/v6VTv7czb1Y\"\n>\n</iframe>\nIf you want it to be only a part of the screen, you can adjust the width and height\nattributes accordingly.\nYou can autoplay these as well with the autoplay attribute. If you use autoplay on\nmore than one, none of them will autoplay to protect the visitor from getting all\nthat noise from the webpage. It is typically considered annoying if your video starts\nmaking noise in the browser. Adding the attribute muted will avoid this.\n[ 393 ]\nHTML5, Canvas, and JavaScript\nDigital accessibility in HTML\nDigital accessibility is of huge importance for visually impaired people or those\nunable to use a mouse. In order to use the internet with little or no vision, screen\nreaders are in place. This is a special piece of software that reads what is on the\nscreen or converts it to braille using special devices connected to the computer.\nPeople that cannot use a mouse will often rely on speech to give the computer\ninstructions.\nEarly web applications were terrible in terms of accessibility. Luckily, WAI-ARIA\ncreated a technical specification of how to make the internet digitally accessible.\nDynamic parts can be recognized if implemented correctly, and by adding semantics\nand metadata to the HTML, it's better useable for external tooling.\nSemantics might be one of the most important parts here. This comes down to using\nthe right HTML element for the right purpose. If something should be clicked, it is\nbest to make it a <button> element and not a <span>, for example. If it is a button, it is\npossible to navigate to it with the Tab key and click it using Enter.\nThe same goes for headers. You can create something that looks like a header using\na special class and give it a layout, but the screen readers are looking for h1, h2, and\nh3. You should always use the header elements for headers. This helps the screen\nreaders and improves the accessibility of your website. And as a bonus, it helps you\nrank higher in Google as well because bots also check out the headers to see what is\nimportant on your site.\nIt is also important to use labels and link text that is descriptive. If the link part is\nonly Click here, that is not helpful. Something like Click here to sign up for the\nsummer event is much better.\nThroughout this book, we have also done something wrong with our input boxes.\nIn order to make input fields accessible, you'll have to add a label element. This will\nmake it easier for screen readers to pick up on what the input box is about. So this is\ngenerally bad practice:\n<input type=\"text\" id=\"address\" />\n[ 394 ]\nChapter 14\nAnd this is much better, because now screen readers can read it too (and therefore\nvisually impaired people can understand it):\n<label for=\"address\">Address:</label>\n<input type=\"text\" id=\"address\" />\nOne last one that you may know already is the alt attribute for images. If the screen\nreader encounters an image, it will read the alt description. So make sure that these\nare descriptive, even if the image is not important. Since there is clearly no way\nto know it's not important if you cannot see the image, all you'll know is that you\ncannot see some picture. Here is how to add alt text:\n<img src=\"umbrella.jpg\" width=\"200\" height=\"200\" alt=\"rainbow colored\numbrella\" />\nThese tips are not that important for practicing and testing purposes, but they are of\ngreat use when you are going to create professional apps. Taking accessibility into\naccount will make your app more accessible for everyone. And as I said, Google will\n(currently) reward this good behavior by ranking you more highly and your app will\nbe more profitable since more people can use it!\nChapter projects\nCreate a Matrix effect\nThis exercise will create a continuous animation of text moving from top to bottom.\nThe final effect produced will show characters moving down the screen within the\ncanvas element and appearing to disappear and fade as they approach the bottom\nof the screen as more new characters will be added to the canvas in their place. The\nrandom character can be either a 0 or 1, and will be in place in the position according\nto the number, which will represent the vertical position of where the character is\ndrawn.\n[ 395 ]\nHTML5, Canvas, and JavaScript\nThe canvas will be filled with a black background, which is going to use opacity to\ncreate the fading effect once it's redrawn:\nFigure 14.11: Matrix effect desired outcome\nTake the following steps:\n1. Create a simple HTML document, and in JavaScript create a canvas element\nand add the getContent element as 2d.\n2. Select that canvas element and set the attribute height and width to 500x400.\nPrepend it to the body of your document.\n3. Create an empty array named colVal and create a loop to add a number\nof items into the array that will have a value of 0. The number of items\nyou need to add to the array can be determined by dividing the width by\nten, which should be the width between each column. The values in the\narray will be the starting vertical position of the content for the fillText()\nmethod that you will set up.\n4. Create the main Matrix function to run at 50 millisecond intervals.\n5. Set the fillStyle to be black with .05 opacity, so that when it layers on top\nof the existing elements it will produce a fading effect.\n6. Set the canvas font color to be green.\n7. Using an array map, iterate all the current items in the colVal array, which\nholds the vertical position for the output text.\n[ 396 ]\nChapter 14\n8. Within the map, set the characters to display. We want it to alternate between\n0 and 1 so, using Math.random(), generate a value of either 0 or 1 for the text\noutput. You can use a ternary operator to do this.\n9. Set the position of x using the index value multiplied by 10, which is the start\nof each new letter. Using the index from the colVal array, this will create\nseparate columns of moving characters.\n10. Create the character within the canvas using the ctx fillText() method,\nsetting the output character to the random 0 or 1 value, using posX for\nthe column x position, and posY, which is the value in the colVal array\nfor the item, as the position of the y axis for the output.\n11. Add a condition that checks if the position of y is greater than 100 plus a\nrandom value of 0-300. The larger the number, the longer the number will\nfall on the y position. This is random so not all numbers end at the same spot.\nThis will create a staggered effect after the initial drop.\n12. If the position of y is not past the random value and 100, increment the value\nof the index item by 10. Assign this value of y back to the item in the colVal\narray, which can then be used in the next iteration. This will move the letter\ndown 10 pixels on the canvas within the next draw round.\nCountdown clock\nThis exercise will produce a real-time countdown clock that will display the amount\nof time in days, hours, minutes, and seconds left until the date value within the input\ndate field. Adjusting the input date field will update the countdown clock. It will\nalso use local storage to capture and save the value in the input field, so if the page\nis refreshed, the input field will still retain the date value and the countdown clock\ncan continue to count down to that date value from the input field. You can use the\nfollowing HTML template:\n<!doctype html>\n<html>\n<head>\n<title>JavaScript</title>\n<style>\n.clock {\nbackground-color: blue;\nwidth: 400px;\ntext-align: center;\ncolor: white;\nfont-size: 1em;\n}\n[ 397 ]\nHTML5, Canvas, and JavaScript\n.clock>span {\npadding: 10px;\nborder-radius: 10px;\nbackground-color: black;\n}\n.clock>span>span {\npadding: 5px;\nborder-radius: 10px;\nbackground-color: red;\n}\ninput {\npadding: 15px;\nmargin: 20px;\nfont-size: 1.5em;\n}\n</style>\n</head>\n<body>\n<div>\n<input type=\"date\" name=\"endDate\">\n<div class=\"clock\"> <span><span class=\"days\">0</span> Days</\nspan> <span><span class=\"hours\">0</span>\nHours</span> <span><span class=\"minutes\">0</span>\nMinutes</span> <span><span class=\"seconds\">0</span>\nSeconds</span>\n</div>\n</div>\n<script>\n</script>\n</body>\n</html>\nWe have created page elements including input with a type of date, a main clock\ncontainer, and added spans for days, hours, minutes, and seconds. They have been\nlabeled and CSS applied as needed.\nYou can take the following steps:\n1. Select the page elements as JavaScript objects, as well as selecting the main\nclock output area as the value of a JavaScript object.\n[ 398 ]\nChapter 14\n2. Create variables for the timeInterval and a global Boolean value that can be\nused to stop the clock timer.\n3. Check the local storage if there is an item for countdown already set. If there\nis, use that value.\n4. Create a condition and function to start the clock as the saved value and set\nthe input field date value to the local storage saved value.\n5. Add an event listener to invoke a function if the value of the input field is\nchanged. Clear the interval if it has changed and set the new endDate value in\nthe local storage.\n6. Start the clock with the start clock function from that new endDate input\nvalue.\n7. Create a function to start the clock that is used to start the counter. Within\nthat function, you can create a function that updates the counter and outputs\nthe new clock time values into the page clock container area.\n8. Within this function, check if timeLeft is less than the counter time. Create a\nseparate function to handle this. If it's less, stop the timer.\n9. If the time left is more and has a value within the object, then output the\nobject by property names and match the property names you use in the time\nleft function object to the class names you use in your webpage elements\nso they match and you can save time rewriting them. Loop through all the\nobject values and assign the values within the innerHTML page element.\n10. In the time left function, get the current date. Using Date.parse(), parse the\ndate and calculate the total milliseconds left until the counter ends. Return\nthe values of the total days, hours, minutes, and seconds as a response object\nto use in the update function.\n11. If the counter is false and has passed the end time, then clear the interval.\nIf the counter is still valid, set the interval to run the update function every\n1,000 milliseconds.\nOnline paint app\nCreate a drawing application where the user can draw using their mouse in the\ncanvas element. When the user is within the canvas element and clicks down on\nthe mouse button, holding the button down will add lines, producing a drawing\neffect within the canvas element. The color and width of the drawing pencil can be\nchanged dynamically for more functionality. In addition, this app will include a\nbutton to save and download the image from the canvas element, as well as clearing\nthe current canvas content.\n[ 399 ]\nHTML5, Canvas, and JavaScript\nYou can use the following template and add the JavaScript code:\n<!doctype html>\n<html>\n<head>\n<title>Canvas HTML5</title>\n<style>\n#canvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<canvas id=\"canvas\" width=\"600\" height=\"400\"></canvas>\n<div>\n<button class=\"save\">Save</button>\n<button class=\"clear\">clear</button>\n<span>Color: <input type=\"color\" value=\"#ffff00\"\nid=\"penColor\"></span>\n<span>Width: <input type=\"range\" min=\"1\" max=\"20\" value=\"10\"\nid=\"penWidth\"></span>\n</div>\n<div class=\"output\"></div>\n<script>\n</script>\n</body>\n</html>\nWe have created a button to save and a button to clear, an input for color using the\nHTML5 color type, and the range type to get a numeric value for the pen width. We\nhave also added page elements for the canvas and an output area.\nTake the following steps:\n1. Using JavaScript, select all the page elements as JavaScript objects and set up\nthe canvas element to draw into.\n2. Set a variable to track the location of the pen.\n3. On the canvas, add an event listener to track mouse movement. Update\nthe pen position to the lastX and lastY positions, and then set the location\nposition to clientX and clientY. Create a function to draw at the pen\nposition and invoke the draw function.\n[ 400 ]\nChapter 14\n4. For mousedown, set draw to true, and for mouseup and mouseout, set draw to\nfalse.\n5. Within the draw function, begin the move path at the pen location values and\nset the stroke style to the pen color and stroke width to the pen width. These\ncan be changed by clicking the inputs and updating their HTML values. Add\nthe stroke and close the drawing path.\n6. Add an event listener to the clear button. If clicked, create a function that\nconfirms that the user wants to remove and clear the drawing, and then if\ntrue, invoke clearRect() to clear the canvas contents.\n7. Add another event listener to save the image. When clicked, it should invoke\na function that gets the canvas object using toDataURL as base64 image data.\nYou can log it into the console to see what it looks like.\n8. Create an img element and prepend it to the output area element. Set the src\npath to the dataURL value.\n9. To set a download of the image, create an anchor tag, append it to anywhere\nwithin the HTML page elements, and create a filename. You can generate\na unique filename with Math.random(). Set the hyperlink to the download\nattribute and the href path to the dataURL path, and trigger a click with the\nclick() method. Once clicked, remove the link element.\nSelf-check quiz\n1. Which statements below are the correct way to prepare to draw?\nconst canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nvar canvas = document.getElementById(\"canvas\");\nvar ctx = getContext(\"canvas\");\nvar ctx = canvas.getContext(\"canvas\");\n2. What will the following code do?\n<canvas id=\"canvas\"></canvas>\n<script>\nvar canvas = document.getElementById(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\ncanvas.height = 600;\ncanvas.width = 500;\nctx.beginPath();\nctx.fillStyle = \"red\";\n[ 401 ]\nHTML5, Canvas, and JavaScript\nctx.arc(50, 50, 50, 0, Math.PI * 2);\nctx.fill();\nctx.closePath();\n</script>\n\u2022 Nothing, the code has errors\n\u2022 Draws a red square\n\u2022 Draws a red circle\n\u2022 Draws half a circle\n3. What are all three methods required to draw a line within the canvas\nelement, and in what order?\nSummary\nWe have discussed a lot of great additions to our JavaScript toolbox using HTML5 in\nthis chapter. These new skills will really enhance our capabilities to build interactive\nweb apps. We started off with the local file reader, which enabled us to upload and\nread files using several methods, such as the readAsText() method. Then we saw\nhow to get the GeoLocation of a user. This can be great to personalize suggestions,\nfor example, for restaurants or parking spots.\nThe canvas was yet another amazing addition to what we can do with web page(s).\nCanvases allow us to draw, write text, add images (by drawing and uploading), and\ncreate complete animations. This all can be done using the methods on the canvas.\nWe then had a look at media on the page and how to add audio and video. Finally,\nwe discussed the topic of digital accessibility and how to make sure your website is\naccessible for everybody, with and without a screen reader.\nAnd at this point, we can say, you did it! You've worked your way through so many\nbasic and advanced web development topics. In the final chapter, we are going to\nbe exploring the next steps for you to take your skills to the next level beyond pure\nJavaScript, which is what this book has focused on.\n[ 402 ]\n15\nNext Steps\nYou've come very far already! At this point, you should have the building blocks of\nJavaScript down. And you are able to create apps, write clever scripts, and read a lot\nof code. This is a great foundation for some serious next steps. In this chapter, we\nwill be taking what you've learned to the next step by practicing and figuring out\nwhat interests you out of the endless possibilities that JavaScript offers.\nWe won't go into too much detail about all the topics here. The details will be\noutdated soon and there is an endless supply of very well-crafted tutorials and\ninformation on the internet for each one of them. Chances are that by the time you\nare reading this, the frameworks and libraries we are recommending are hopelessly\nold. The good news is that the likelihood that the next big thing will use the same\nconcepts is huge.\nThis chapter will serve as a starting point for your next steps with JavaScript. We\nwill cover the following topics:\n\u2022 Libraries and frameworks\n\u2022 Learning the backend\n\u2022 Next steps\nNote: exercise, project and self-check quiz answers can be found in\nthe Appendix.\n[ 403 ]\nNext Steps\nLibraries and frameworks\nLet's start with libraries and frameworks. Libraries are basically pre-programmed\nJavaScript modules that you can use to speed up your development process. They\ntypically do one specific thing for you. Frameworks are very similar, they are also\npre-programmed, but instead of doing only one thing for you, they arrange a whole\nlist of things. This is why it is called a framework, it really is providing you a solid\nplace to start from and usually demands a certain structure for your files in order to\ndo so. A framework is often a bundle of libraries that provide an all-in-one solution.\nOr at least a many-in-one. You'll eventually even find yourself using external\nlibraries on top of the frameworks.\nTo give a non-code example, if we started building a car, we could do so from\nscratch and make every single piece of this car ourselves. This is pretty much what\nwe've been doing in this book so far. With libraries, we get ready-made parts\u2014in\nour car example, we could get fully built chairs that we only would have to install\nonto the car frame we've built. If we used a framework to make a car, we would get\nthe skeleton of the car itself, with all the essential parts in it already, and it would\nprobably be capable of driving already. We would only need to focus on customizing\nthe car and making sure it includes all the special things for our wants and needs.\nWhile doing that, we would have to keep in mind the skeleton of the car we already\nhave and continue in that style.\nAs you can imagine, we would be done with our car project a lot faster using\nlibraries and frameworks. Also, we would run into less trouble using libraries and\nframeworks, since the pre-made parts would have been well tested by many others\nalready. If we were to make our own car chairs from scratch, chances are that after\na year of driving they are no longer comfortable, whereas the standard solution has\nbeen thoroughly checked already.\nSo, libraries and frameworks don't just speed up the process, they also provide you\nwith a more stable and better-tested solution. Are there no downsides? Well, of\ncourse there are. The most important one is probably flexibility, as you will have to\nstick to the structure of the framework you are using. To some extent, this could also\nbe an advantage because it usually requires a well-structured coding style from you,\nwhich will improve the code quality.\nAnother downside is that you'll have to keep on updating your app whenever the\nframework or library you are using is updated. This is very important, especially\nwhen the updates are fixes to security issues. On the one hand, frameworks and\nlibraries are very reliable, but because they're so commonly used, it is not unusual\nfor hackers to find weaknesses. If they find one, this will give them opportunities\non many apps, including your own. On the other hand, your own code is probably\nweaker than an average framework, by a lot.\n[ 404 ]\nChapter 15\nHowever, in many cases, hacking your custom app might be too costly. For example,\nwhen you just have a hobby project online, you are probably not going to pay a\nhuge amount of ransom money to hackers and the data in your app also won't be\nworth the hackers' effort. Whereas a script that just tries to exploit a weakness of\nan often-used framework for apps on a random number of websites is common. To\nminimize the risk, update your dependencies often and keep an eye out for reported\nweaknesses by the owner of your library or framework.\nLibraries\nTechnically, we cannot do anything more with frameworks and libraries than we\ncan do without them. That is, if you leave time out of the equation. Frameworks and\nlibraries allow us to develop to a higher quality a lot faster, and this is why they are\nso popular.\nWe will be discussing a few of the most popular libraries here. This is definitely not\nan exclusive list, and it is also very dynamic, so other libraries or frameworks might\nbe more popular in a year's time. This is why we are not going to be covering full\ntutorials and how to get started here. We will just explain the basic principles and\nshow some code snippets. However, this is still a solid foundation for the next big\nstep in your development career.\nMany of the libraries can be included in a page by adding a script tag to the head of\nthe HTML, like this:\n<script src=\"https://linktolibrary.com/librarycode.js\"></script>\nWe will start by discussing a few common libraries.\njQuery\njQuery is arguably the most famous JavaScript library. It was great to use in the\npast, when it would be compiled into the latest version of JavaScript for the specific\nbrowser. Nowadays, it is just a different way of writing some of the things we have\nseen in the book. You can recognize jQuery easily by the amount of dollar signs in\nthe code. You can also tell if a website is using jQuery if you type $ or jQuery into\nthe console of the website, and it returns the jQuery object. The jQuery library is\nmainly focused on selecting HTML elements from the DOM and interacting with\nand manipulating them. It roughly looks like this:\n$(selector).action();\n[ 405 ]\nNext Steps\nWith the dollar sign you indicate that you want to start jQuery, and with the selector\nyou can select the element in HTML. The signs here are a bit like CSS:\n\u2022 Just a simple string value targets an HTML element: $(\"p\")\n\u2022 A period before a word or phrase indicates you want to select all elements\nwith a certain class: $(\".special\")\n\u2022 A hashtag targets an element with a certain ID: $(\"#unique\")\n\u2022 You can also use any other CSS selector, including the more complicated\nchained ones\nHere is an example where the jQuery library is imported in the script element\nstarting on line 3:\n<html>\n<head>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/\njquery.min.js\"></script>\n</head>\n<body>\n<p>Let's play a game!</p>\n<p>Of hide and seek...</p>\n<p class=\"easy\">I'm easy to find!</p>\n<button id=\"hidebutton\">Great idea</button>\n<button id=\"revealbutton\">Found you!</button>\n<script>\n$(document).ready(function () {\n$(\"#hidebutton\").click(function () {\n$(\"p\").hide();\n});\n$(\"#revealbutton\").click(function () {\n$(\".easy\").show();\n});\n});\n</script>\n</body>\n</html>\n[ 406 ]\nChapter 15\nThis is what the page looks like:\nFigure 15.1: Page with a simple jQuery script\nWhen you click the Great idea button, all the paragraphs will be hidden. This is\ndone inside the event that's been added using jQuery. First, we selected the button\nwith the ID hidebutton, next we call the click function on it, which specifies what\nwill happen on click. In that function, we state that we'll select all p elements and\nhide them. hide is a special jQuery function that adds the display:none style to the\nHTML element.\nSo, after clicking, all the paragraphs are gone. When we click on Found you!, only\none comes back, the last one reading I'm easy to find. This is because when the\nbutton with the ID revealbutton gets clicked, it selects all elements with class easy\nand removes the display:none from the style using the jQuery show function.\nThis is what jQuery really comes down to:\n\u2022 Getting the selectors down\n\u2022 Knowing some extra or differently named functions to manipulate the\nelements\nYou can use jQuery in your code, but this won't expand your possibilities to do more\nwith JavaScript. It will just allow you to do the same thing with fewer characters of\ncode. The reason jQuery was so popular is that it added a lot of value when browsers\nwere less standardized, in which case using jQuery would actually provide the\nsolution to standardizing JavaScript across multiple browsers. This is of little use\nnowadays, and if you are going to write new code, you would be better just using\nJavaScript. However, whenever you are working on older code, it is very likely you'll\nrun into jQuery so knowing how it works will definitely help you in these cases.\n[ 407 ]\nNext Steps\nAt the time of writing, you can find the jQuery docs here:\nhttps://api.jquery.com/.\nD3\nD3 stands for three Ds: data-driven documents. It is a JavaScript library that helps\nmanipulate documents based on data and it can be used to visualize data using\nHTML, SVG, and CSS. It comes in very handy for dashboards that need to contain\nany sort of data representation.\nYou can make pretty much any kind of graph you could want with a lot of features\nusing D3. It can look rather intimidating, because all the settings for the graph figure\nneed to be set. Diving into it and breaking it up in pieces will ensure you'll overcome\nany hurdles. Below you'll find a very basic example to add three spheres to an SVG\nusing D3:\n<!DOCTYPE html>\n<html>\n<head>\n<script src=\"https://d3js.org/d3.v7.min.js\"></script>\n<style>\nsvg {\nbackground-color: lightgrey;\n}\n</style>\n</head>\n<body>\n<svg id=\"drawing-area\" height=100 width=500></svg>\n<script>\nlet svg = d3.select(\"#drawing-area\");\nsvg.append(\"circle\")\n.attr(\"cx\", 100).attr(\"cy\", 50).attr(\"r\", 20).style(\"fill\",\n\"pink\");\nsvg.append(\"circle\")\n.attr(\"cx\", 200).attr(\"cy\", 20).attr(\"r\", 20).style(\"fill\",\n\"black\");\nsvg.append(\"circle\")\n.attr(\"cx\", 300).attr(\"cy\", 70).attr(\"r\", 20).style(\"fill\",\n\"grey\");\n[ 408 ]\nChapter 15\n</script>\n</body>\n</html>\nThe D3 library gets imported in the first script tag. And the svg variable gets created\nusing the d3.select method on the svg with ID drawing-area.\nWe are not doing the possibilities of D3 any justice\u2014in this case, this isn't a lot\nmore useful than just doing this with a canvas. However, you can make beautiful\nanimations of the data, such as a zoom effect, a sortable bar graph, a spin effect on\na sphere, and so much more. That code would take up multiple pages of the book\nthough.\nAt the time of writing, you can find the full documentation here:\nhttps://devdocs.io/d3~4/.\nUnderscore\nUnderscore is a JavaScript library that can be summarized as a toolkit for functional\nprogramming. Functional programming can be considered a programming\nparadigm, it revolves around using descriptive functions in a sequence rather than\nseparate examples. Object-oriented programming (OOP) is also a programming\nparadigm, which is all about objects and their state, and the data can be encapsulated\nand hidden from the outside code. In functional programming the functions are very\nimportant, but there is less state to be concerned about. These functions do the same\nthing with different arguments all the time, and they can be easily chained.\nThe Underscore library offers a lot of functions for everyday programming, such as\nmap, filter, invoke, and functions for testing. Here is a little code snippet showing\nsome Underscore, which makes an alert pop-up box for all the items in the array\u2014in\nthis case, it is making a pop-up for 1, 2, and 3:\n<!DOCTYPE html>\n<html>\n<head>\n<script src=\"https://cdn.jsdelivr.net/npm/underscore@1.13.1/\nunderscore-umd-min.js\"></script>\n[ 409 ]\nNext Steps\n</head>\n<body>\n<script>\n_.each([1, 2, 3], alert);\n</script>\n</body>\n</html>\nThere are many other functions for filtering, grouping elements, transforming\nelements, getting a random value, getting the current time, and a lot more.\nThis snippet probably explains the name as well, since we access Underscore\nfunctions using an underscore. You will have to install Underscore first though, else\nthe interpreter won't understand the syntax.\nAt the time of writing, you can find the full documentation here:\nhttps://devdocs.io/underscore/.\nReact\nReact is the last frontend library we are going to discuss. If you would rather say\nReact is a framework you are not completely wrong, but not right either. The reason\nthat we consider React a library is that you'll need to use some other libraries to get\nto the point where it feels like a framework.\nReact is used to build beautiful and dynamic user interfaces. It splits up pages into\ndifferent components and the data gets sent and updated between components as\nit changes. Here is a very basic example that only scratches the very surface of what\nReact can do. This HTML will give this sentence on the page: Hi Emile, what's up?:\n<div id=\"root\"></div>\nIt will do this when the following JavaScript is associated with it:\nReactDOM.render(\n<p> Hi Emile, what's up?</p>,\ndocument.getElementById('root');\n);\n[ 410 ]\nChapter 15\nThis will only work when the React library is available. And it will render the DOM,\nreplacing the innerHTML of the div with the first argument of the render function.\nWe can do this by adding React in a script element in the header and not installing\nanything on our system. The completed script looks like this:\n<!DOCTYPE html>\n<html>\n<head>\n<script src=\"https://unpkg.com/react@17/umd/react.development.js\"\ncrossorigin></script>\n<script src=\"https://unpkg.com/react-dom@17/umd/react-dom.\ndevelopment.js\" crossorigin></script>\n</head>\n<body>\n<div id=\"root\"></div>\n<script>\nlet p = React.createElement(\"p\", null, \"Hi Emile, what's up?\");\nReactDOM.render(\np,\ndocument.getElementById(\"root\");\n);\n</script>\n</body>\n</html>\nThis will write Hi Emile, what's up? to the page using React elements created\nmanually in the script tag. This is not something you should be doing for large\nprojects though. It is way more valuable to set up React and everything you need\nusing a package manager such as Node Package Manager (NPM). This will allow\nyou to easily manage all the dependencies and keep your code organized.\nAt the time of writing, more can be found here: https://\nreactjs.org/docs/getting-started.html.\n[ 411 ]\nNext Steps\nFrameworks\nThe frameworks are more complex and usually you'll have to install them on your\ncomputer. How to do this can be found in the online documentation of the specific\nframework. And whenever you are done coding and you want to run your code,\nyou'll have to run a command that will process your code into something the\nbrowser will understand. We are \"serving\" the application when we do this.\nVue.js\nVue.js is a lightweight JavaScript framework. It can be used to build user interfaces\nand single-page applications (SPAs). The way user interfaces are written with\nVue.js can be hard to get your head around the first time you encounter it. Have a\nlook at this code sample:\n<!DOCTYPE html>\n<html>\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n<body>\n<div id=\"app\">\n<p v-if=\"!hide\">\nLet's play hide and seek. <br />\nGo to the console and type: <br />\nobj._data.hide = true <br />\n</p>\n</div>\n<script>\nlet obj = new Vue({\nel: \"#app\",\ndata: {\nhide: false,\n},\n});\n</script>\n</body>\n</html>\nThis is a simple HTML page, importing a JavaScript link from Vue. There is\nsomething weird going on in the HTML of the <p> tag: there is a v-if element. This\nelement will only be displayed when the condition in that v-if is true.\n[ 412 ]\nChapter 15\nIn this case, it is looking at the hide property of our data object in our Vue instance.\nIf you change the value of this hide to true, the negated hide statement will become\nfalse, and the element will disappear. This is something that we could have done\nwithout Vue as well, but we would then have specified a JavaScript event for the\nchange of the value and used JavaScript to edit the CSS to hide the paragraph.\nYou can even see HTML elements that are new to you. That is because these are\nnot regular HTML elements, but rather from Vue, which lets you define your own\nelements. You can run into HTML that looks like this:\n<div id=\"custom-component\">\n<maaike></maaike>\n</div>\nAnd when you open the webpage associated with it, it shows:\nMaaike says: good job!\nThis is not because HTML knows how to do that. This is because there is a snippet\nthat defines the maaike component. Here is the snippet:\n<script>\nVue.component(\"maaike\", {\ntemplate: \"<p>Maaike says: good job!</p>\",\n});\nnew Vue({ el: \"#app\" });\n</script>\nIn the preceding code, a new Vue component is created, and it can actually hold data\nand have a function too, but this one is very basic and just to illustrate we can add\nHTML templates in the template property. There is a paragraph specified. When the\nwebpage gets loaded, the <maaike> component will be replaced with whatever is in\nthe template.\nThe content of one page can come from many files. Usually these components all\nhave their own file. There is a lot more official Vue tooling that you will get to\nknow once you dive into Vue.js. It is actually a great framework for beginners with\nframeworks, as it is rather clear what is going on and is a great starting point for\ncomprehending frameworks in general.\n[ 413 ]\nNext Steps\nAt the time of writing, you can find the full Vue docs here:\nhttps://v3.vuejs.org/guide/introduction.html.\nAngular\nAngular is a framework that originates from and is (currently) maintained by\nGoogle. Angular is a lot heavier than Vue.js, but it can be considered a complete\npackage. This means that Angular takes up more disk space, and more disk space\nusually means it is slower to compile and install. Looking at Angular code isn't\nreally that much different from Vue.js. However, Angular uses TypeScript instead\nof JavaScript. TypeScript is a superset of JavaScript and gets transpiled to JavaScript,\nbut it is stricter and has a different syntax as well.\nAngular can be recognized by the ng attributes in the HTML. We are not going to\nshow a full example, but here is the HTML that will show all the tasks on a to-do list\n(when the code around it is set correctly):\n<ul>\n<li ng-repeat=\"task in tasks\">\n{{task}}<span ng-click=\"deleteTask($index)\">Done</span>\n</li>\n</ul>\nThe ng-repeat attribute is specifying the repeat action that for every task on the task\nlist, it should create a <li> element. And task can be used as a variable inside <li>\nas well, as indicated by {{ task }}.\nThere's one more Angular-specific thing going on, ng-click, which tells Angular\nwhat to do when an element gets clicked. This is similar to the onclick event of\nJavaScript, but it can now be dynamically binded. This means that when writing\nthe code, you don't need to know about onclick yet. Clearly, you can achieve the\nsame thing in JavaScript by specifying events that will lead to changes of the onclick\nattribute (and the complete element if necessary), but this is a lot more code that\nneeds to be written. This goes for anything in Angular: it can be done with just\nJavaScript but it is a lot more work (and that might actually be an understatement,\ndepending on the complexity of the situation).\n[ 414 ]\nChapter 15\nAt the time of writing, you can find the full docs here: https://\nangular.io/docs.\nLearning to work with libraries and frameworks such as React, Angular, or Vue is\na very logical and even must-have next step if you seek to be a frontend developer.\nIn the authors' view, the difficulty of these options doesn't really differ that much.\nWhich one is the best choice depends on the place you want to work and the region\nthat you are in, because there are regional preferences for these frameworks and\nlibraries.\nLearning the backend\nSo far, we have only been dealing with the frontend. The frontend is the part that is\nrunning on the client side, which could be any device that the user is using, such as\na phone, laptop, or tablet. In order for websites to do interesting stuff, we also need\na backend. For example, if you want to log on to a website, this website somehow\nneeds to know whether this user exists.\nThis is the job of the server-side code, the backend. This is code that is running not\non the device of the user, but on some sort of server elsewhere, which is often owned\nor leased by the company hosting the website. Hosting the website usually means\nthat they make it available to the world wide web by placing it on a server that can\ntake outside requests via a URL.\nThe code on the server does many things, all related to deeper logic and data. For\nexample, an e-commerce store has a bunch of items in the shop that come from a\ndatabase. The server gets the items from the database, parsing the HTML template\nand sending the HTML, CSS, and JavaScript over to the client.\nThe same goes for logging in: when you enter your username and password on a\nwebsite and you click on login, the code on the server gets triggered. This code is\ngoing to verify the details you entered with those in the database. If you have the\ncorrect details, it will send you back the page of your portal for logged-in users.\nAnd if you have entered incorrect details, it will send back the error to the client.\nIn this section, we will cover the basics of communication between the frontend\nand backend, and we will show you how you can use JavaScript to write backend\ncode as well using Node.js.\n[ 415 ]\nNext Steps\nAPIs\nAn API (Application Programming Interface) is essentially an interface for code,\nwritten with more code. A request can be made to an API using (for example) a URL.\nThis will trigger a certain piece of code and this piece of code will give a certain\nresponse back.\nThis is all very abstract, so let's use an example. If we had a website for a hotel, it\nwould make sense for people to be able to make bookings online. This would require\nus to have some sort of API. Whenever a user has filled out all the fields and clicks\non Submit booking, the API will get triggered by calling the URL and sending all\nthe data that the user has entered to that endpoint (a specific URL), for example:\nwww.api.hotelname.com/rooms/book. This API will process and validate our data and\nwhen everything is fine, it will store the room booking in our database and probably\nsend a confirmation mail to our guest.\nWhenever one of the hotel clerks goes to check out the reservations, another API call\nwill be made using one of the endpoints. It could be an endpoint that looks like this\nfor example: www.api.hotelname.com/reservations. This would first go ahead and\ncheck whether our employee is logged in with the right role, and if so, it will fetch all\nthe reservations for the selected date range from the database and send the page with\nthe results back to our employee, who can then see all the bookings. So APIs are the\nconnection points between the logic, database, and frontend.\nAPIs work with Hypertext Transfer Protocol (HTTP) calls. HTTP is just a protocol\nfor communication between two parties: a client and a server, or a server and\nanother server (in which the requesting server acts like the client). This means that\nit has to stick to certain conventions and rules that the other party expects, and the\nother party will respond in a certain way. For example, this means using a specific\nformat to specify headers, using GET methods for getting information, using POST\nmethods for creating new information on the server, and using PUT methods to\nchange information on the server.\nThere can be more done with APIs, for example, your computer\nand printer communicate via an API as well. However, this is not\ntoo relevant from a JavaScript point of view.\nYou will see how to consume these APIs in the AJAX section. You can also write\nyour own APIs, and the ultimate basics of how to do this can be found in the Node.js\nsection.\n[ 416 ]\nChapter 15\nAJAX\nAJAX stands for Asynchronous JavaScript and XML, which is a misnomer, because\nnowadays it is more common to use JSON instead of XML. We use it to make calls\nfrom the frontend to the backend, without refreshing the page (asynchronously).\nAJAX is not a programming language or a library, it is a combination of the built-in\nXMLHttpRequest object in the browser and the JavaScript language.\nYou probably won't be using plain AJAX in your day-to-day life as a frontend\ndeveloper nowadays, but it is being used beneath the surface so it won't hurt to\nknow how it works. Here is an example of calling the backend using AJAX:\nlet xhttp = new XMLHttpRequest();\nlet url = \"some valid url\";\nxhttp.load = function () {\nif (this.status == 200 && this.readyState == 4) {\ndocument.getElementById(\"content\").innerHTML = this.responseText;\n}\n};\nxhttp.open(\"GET\", url, true);\nxhttp.send();\nThis is not a working example, because there is no valid URL, but it demonstrates\nhow AJAX works. It sets up what it needs to do when the request has been loaded,\nin this case, replacing the HTML inside the element with ID content with whatever\nthe link returns. This could be a link to a file, or to some API that calls a database.\nIt can give different responses when there is other (or no) data in the database. This\nresponse is in JSON, but it could also be in XML. This depends on how the server\nwas coded.\nMore common now is the use of the Fetch API for AJAX requests. This is similar to\nwhat we can do with XMLHttpRequest but it provides a more flexible and powerful\nset of features. For example, in the following code we get the data from the URL,\nconvert it to JSON with the json() method, and output it to the console:\nlet url = \"some valid url\";\nfetch(url)\n.then(response => response.json())\n.then(data => console.log(data));\nThe Fetch API works with promises, which should look familiar at this point. So\nafter the promise is resolved, a new one gets created with then, and when that one is\nresolved, the next then gets executed.\n[ 417 ]\nNext Steps\nAt the time of writing, more information can be found here:\nhttps://developer.mozilla.org/en-US/docs/Web/Guide/\nAJAX/Getting_Started.\nPractice exercise 15.1\nCreate a JSON file and using fetch, return the results as a usable object into your\nJavaScript code:\n1. Create a JSON object and save it in a file called list.json.\n2. Using JavaScript, assign the filename and path to a variable named url.\n3. Using fetch, make the request to the file URL. Return the results as JSON.\n4. Once the response object is ready, iterate through the data and output the\nresults into the console of each item in the JSON file.\nNode.js\nWe can write APIs in JavaScript using Node.js. Node.js is a very clever runtime\nenvironment that has taken the Google JavaScript engine, expanded it, and made it\npossible to run JavaScript on servers, interacting with the filesystem protocol and\nHTTP using JavaScript. Because of this, we can use JavaScript for the backend. This\nmeans that you can write both the backend and the frontend with only one language\n(along with HTML and CSS). Without Node.js, you would have to use another\nlanguage such as PHP, Java, or C# for the backend.\nIn order to run Node.js, you first have to set it up and then run the node nameOfFile.\njs command. You can find out how to set it up on your system in the official Node.js\ndocumentation. Often it requires downloading and installing something, and then\nyou are done.\nAt the time of writing, the download instructions are accessible at\nhttps://nodejs.org/en/download/.\nHere is an example of some code that will receive HTTP calls that can be written for\nNode.js:\n[ 418 ]\nChapter 15\nconst http = require(\"http\");\nhttp.createServer(function(req, res){\nres.writeHead(200, {\"Content-Type\": \"text/html\"}); //header status\nlet name = \"Rob\";\nres.write(`Finally, hello ${name}`); //body\nres.end();\n}).listen(8080); //listen to port 8080\nconsole.log(\"Listening on port 8080... \");\nWe start by importing the http module. This is an external code file that needs to be\nimported in order to run. The http module comes with Node.js, but other modules\nmight need to be installed. You will use a package manager for this, such as NPM,\nwhich will help to install all the dependencies and be able to manage all the different\nversions of the external modules.\nThe code above sets up a server that is listening to port 8080, and whenever it\ngets accessed, it will return Finally, hello Rob. We create the server with the\ncreateServer method on the imported http module. We then say what needs to\nhappen for a call to our server. We respond with a 200 status (indicating \"OK\") and\nwrite Finally, hello Rob to the response. We then specify the default port 8080 as\nthe listening port.\nThis example uses the built-in http module for Node.js, which is very powerful for\ncreating APIs. This is definitely something that's worth having some experience with.\nBeing able to write your own APIs will enable you to write full applications yourself.\nThis gets even easier when we add Express to the mix.\nUsing the Express Node.js framework\nNode.js is not a framework, nor a library. It is a runtime environment. This means\nthat it can run and interpret the JavaScript code written. There are frameworks for\nNode.js and currently Express is the most popular one.\nHere is a very basic Express application\u2014again, you will have to set up Node.js first,\nthen add the Express module (if you are using NPM, npm install express will do)\nand run it using the node nameOfRootFile.js command:\nconst express = require('express');\nconst app = express();\napp.get('/', (request, response) => {\n[ 419 ]\nNext Steps\nresponse.send('Hello Express!');\n});\napp.listen(3000, () => {\nconsole.log('Express app at http://localhost:3000');\n});\nAfter running this and going to localhost:3000 (assuming you are running it on\nlocalhost), you will get the message Hello Express! in your browser. In the terminal\nwhere you are running your Node app, it will print the console log message after\nloading.\nYou can find more in the Node.js documentation, which at the time\nof writing is at the following address: https://nodejs.org/en/\ndocs/.\nFor the Express module, you can go to https://expressjs.com/\nen/5x/api.html.\nNext steps\nYou have learned a lot about JavaScript in this book and with this chapter you\nshould have an idea of possible next steps you can take. This chapter hasn't taught\nyou all of these topics in depth, as entire books could be (and have been) written\nabout each of them, but you should have a good idea of where to look for your next\nsteps and what to consider while deciding which next step to take.\nThe best way to learn is by doing. So we highly recommend you just come up with a\nfun project idea and go ahead and try to make it. Alternatively, with this knowledge,\nyou may feel ready for an entry-level JavaScript position! You can also do tutorials\nonline or even work in a project team as a junior, using freelance platforms such\nas Upwork or Fiverr to get a project. These are hard to find though, and we can\nimagine that you'll learn a framework or get a bit more experience with Node.js first.\nHowever, this is often possible on the job if you can show your skills and potential in\nthe hiring process.\n[ 420 ]\nChapter 15\nChapter projects\nWorking with JSON\nCreate a JSON file locally, connect to the JSON and data, and output the data from\nthe JSON file into your console:\n1. Create a file with the extension JSON name it people.json.\n2. Within people.json create an array that contains multiple objects. Each item\nin the array should be an object that has the same structure, using first,\nlast, and topic as the property names. Make sure you use double quotes\naround the property names and values as this is the proper JSON syntax.\n3. Add three or more entries into the array using the same object structure for\neach item.\n4. Create an HTML file and add a JavaScript file. Within the JavaScript file use\npeople.json as the URL. Using fetch connect to the URL and retrieve the\ndata. Since this is a JSON-formatted file, once you get the response data it can\nbe formatted into JSON using the .json() method in fetch.\n5. Output the full contents of the data into the console.\n6. Using foreach, loop through the items in the data and output the values into\nthe console. You can use a template literal and output each value.\nList-making project\nCreate a list that saves to local storage so even if the page is refreshed, the data will\npersist within the browser. If the local storage is empty on the first load of the page,\nset up a JSON file that will be loaded to the local storage and saved as a default list to\nstart the list:\n1. Set up an HTML file, adding a div to output the list results to, and an input\nfield with a button that can be clicked.\n2. Using JavaScript, add the page elements as objects that can be used within\nthe code.\n[ 421 ]\nNext Steps\n3. Create your default JSON file (which can be empty) and add the path to the\nfile into your JavaScript code using a variable called url.\n4. Add an event listener to the button element that will run a function called\naddToList().\n5. In addToList(), check if the value of the input field has a length of 3 or\nmore. If it does then create an object with a name and the value of the input\nfield. Create a global variable named myList to hold the list, and within\naddToList() push the new object data into myList.\n6. Create a function called maker(), which will create the page element and add\ntext into the element, appending it to the output element. Invoke maker() to\nadd the new item within the addToList() function.\n7. Also, save the item to local storage so that the visual content of myList will\nbe synced with the local storage saved value. To do this, create a function\ncalled savetoStorage() and invoke it every time you update the myList in\nthe script.\n8. Within the savetoStorage() function, set the value of myList into\nlocalStorage using setItem. You will need to convert myList into a string\nvalue to save it into localStorage.\n9. Add to the code getItem() to retrieve a value of myList from localStorage.\nSet up a global variable for the myList array.\n10. Add an event listener to listen for DOMContentLoaded. Within that function,\ncheck if the localstorage loaded a value. If it did then get myList from local\nstorage and convert it from a string to a JavaScript object. Clear the output\nelement contents. Loop through the items in myList and add them to the\npage with the maker() function created earlier.\n11. If localStorage does not have content, load the JSON file with the default\nvalues using fetch. Once the data is loaded, assign it to the global myList\nvalue. Loop through the items in myList and using maker(), output them to\nthe page. Don't forget to invoke savetoStorage() after so that the storage will\ncontain the same list items as are visible on the page.\nSelf-check quiz\n1. What are JavaScript libraries and frameworks?\n2. How can you tell if a webpage is using the jQuery library?\n3. Which library contains a lot of functionality for manipulating data?\n4. When Node.js is installed, how can you run a Node.js file?\n[ 422 ]\nChapter 15\nSummary\nIn this chapter, we have explored a few of the possibilities to continue your\nJavaScript journey and keep on improving yourself. We started off by discussing\nthe frontend and what libraries and frameworks are. Libraries and frameworks are\nboth pre-made code that you can use in your project, but libraries typically solve one\nproblem while frameworks provide a standard solution that usually controls the way\nyou structure your application and will come with some limitations. On the other\nhand, frameworks are great fits for very many things you might want to do with\nyour web apps.\nWe then moved on to looking at the backend. The backend is the code that runs on\nthe server and we can write this code in JavaScript when we use Node.js. Node.js is\na runtime engine that can process JavaScript and has some additional features for\nJavaScript that we don't have when using JavaScript in the browser.\nAnd that's it. You have a very solid understanding of JavaScript at this point. You\nhave seen all the major building blocks, and had a lot of practice with smaller\nexercises and bigger projects. There are a few things for certain: you'll never be done\nwith learning as a JavaScript programmer, and you will keep on amazing yourself\nwith the things you can make as you keep on progressing.\nDon't forget to have fun!\n[ 423 ]\nAppendix \u2013 Practice\nExercise, Project, and Self-\nCheck Quiz Answers\nChapter 1, Getting Started with\nJavaScript\nPractice exercises\nPractice exercise 1.1\n4 + 10\n14\nconsole.log(\"Laurence\");\nLaurence\nundefined\nPractice exercise 1.2\n<!DOCTYPE html>\n<html>\n<head>\n<title>Tester</title>\n</head>\n<body>\n[ 425 ]\nAppendix\n<script>\nconsole.log(\"hello world\");\n</script>\n</body>\n</html>\nPractice exercise 1.3\n<!DOCTYPE html>\n<html>\n<head>\n<title>Tester</title>\n</head>\n<body>\n<script src=\"app.js\"></script>\n</body>\n</html>\nPractice exercise 1.4\nlet a = 10; // assign a value of 10 to variable a\nconsole.log(a); // This will output 10 into the console\n/*\nThis is a multi-line\nComment\n*/\nProjects\nCreating an HTML file and a linked JavaScript file\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n</head>\n[ 426 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\n<body>\n<script src=\"myJS.js\"></script>\n</body>\n</html>\n// console.log(\"Laurence\");\n/*\nThis is my comment\nLaurence Svekis\n*/\nSelf-check quiz\n1. <script src=\"myJS.js\"></script>.\n2. No.\n3. By opening and closing it with /* and */.\n4. Comment out the line with //.\nChapter 2, JavaScript Essentials\nPractice exercises\nPractice exercise 2.1\nconsole.log(typeof(str1));\nconsole.log(typeof(str2));\nconsole.log(typeof(val1));\nconsole.log(typeof(val2));\nconsole.log(typeof(myNum));\nPractice exercise 2.2\nconst myName = \"Maaike\";\nconst myAge = 29;\nconst coder = true;\nconst message = \"Hello, my name is \" + myName + \", I am \" + myAge+\"\nyears old and I can code JavaScript: \" + coder + \".\";\nconsole.log(message);\n[ 427 ]\nAppendix\nPractice exercise 2.3\nlet a = window.prompt(\"Value 1?\");\nlet b = window.prompt(\"Value 2?\");\na = Number(a);\nb = Number(b);\nlet hypotenuseVal = ((a * a) + (b * b))**0.5;\nconsole.log(hypotenuseVal);\nPractice exercise 2.4\nlet a = 4;\nlet b = 11;\nlet c = 21;\na = a + b;\na = a / c;\nc = c % b;\nconsole.log(a, b, c);\nProjects\nMiles-to-kilometers converter\n//Convert miles to kilometers.\n//1 mile equals 1.60934 kilometers.\nlet myDistanceMiles = 130;\nlet myDistanceKM = myDistanceMiles * 1.60934;\nconsole.log(\"The distance of \" + myDistanceMiles + \" miles is equal to\n\" + myDistanceKM + \" kilometers\");\nBMI calculator\n//1 inch = 2.54 centimetres.\n//2.2046 pounds in a kilo\nlet inches = 72;\nlet pounds = 180;\nlet weight = pounds / 2.2046; // in kilos\nlet height = inches * 2.54; // height in centimetres\nconsole.log(weight, height);\nlet bmi = weight/(height/100*height/100);\nconsole.log(bmi);\n[ 428 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nSelf-check quiz\n1. String\n2. Number\n3. Line 2\n4. world\n5. Hello world!\n6. Whatever the user enters in\n7. 71\n8. 4\n9. 16 and 536\n10. true\nfalse\ntrue\ntrue\nfalse\nChapter 3, JavaScript Multiple Values\nPractice exercises\nPractice exercise 3.1\nconst myList = [\"Milk\", \"Bread\", \"Apples\"];\nconsole.log(myList.length);\nmyList[1] = \"Bananas\";\nconsole.log(myList);\nPractice exercise 3.2\nconst myList = [];\nmyList.push(\"Milk\", \"Bread\", \"Apples\");\nmyList.splice(1, 1, \"Bananas\", \"Eggs\");\nconst removeLast = myList.pop();\nconsole.log(removeLast);\n[ 429 ]\nAppendix\nmyList.sort();\nconsole.log(myList.indexOf(\"Milk\"));\nmyList.splice(1, 0, \"Carrots\", \"Lettuce\");\nconst myList2 = [\"Juice\", \"Pop\"];\nconst finalList = myList.concat(myList2, myList2);\nconsole.log(finalList.lastIndexOf(\"Pop\"));\nconsole.log(finalList);\nPractice exercise 3.3\nconst myArr = [1, 2, 3];\nconst bigArr = [myArr, myArr, myArr];\nconsole.log(bigArr[1][1]);\nconsole.log(bigArr[0][1]);\nconsole.log(bigArr[2][1]);\nPractice exercise 3.4\nconst myCar = {\nmake: \"Toyota\",\nmodel: \"Camry\",\ntires: 4,\ndoors: 4,\ncolor: \"blue\",\nforSale: false\n};\nlet propColor = \"color\";\nmyCar[propColor] = \"red\";\npropColor = \"forSale\";\nmyCar[propColor] = true;\nconsole.log(myCar.make + \" \" + myCar.model);\nconsole.log(myCar.forSale);\nPractice exercise 3.5\nconst people = {friends:[]};\nconst friend1 = {first: \"Laurence\", last: \"Svekis\", id: 1};\nconst friend2 = {first: \"Jane\", last: \"Doe\", id: 2};\nconst friend3 = {first: \"John\", last: \"Doe\", id: 3};\npeople.friends.push(friend1, friend2, friend3);\nconsole.log(people);\n[ 430 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nProjects\nManipulating an array\ntheList.pop();\ntheList.shift();\ntheList.unshift(\"FIRST\");\ntheList[3] = \"hello World\";\ntheList[2] = \"MIDDLE\";\ntheList.push(\"LAST\");\nconsole.log(theList);\nCompany product catalog\nconst inventory = [];\nconst item3 = {\nname: \"computer\",\nmodel: \"imac\",\ncost: 1000,\nqty: 3\n}\nconst item2 = {\nname: \"phone\",\nmodel: \"android\",\ncost: 500,\nqty: 11\n}\nconst item1 = {\nname: \"tablet\",\nmodel: \"ipad\",\ncost: 650,\nqty: 1\n}\ninventory.push(item1, item2, item3);\nconsole.log(inventory);\nconsole.log(inventory[2].qty);\n[ 431 ]\nAppendix\nSelf-check quiz\n1. Yes. You can reassign values within an array declared with const, but cannot\nredeclare the array itself.\n2. Length\n3. The outputs are as follows:\n-1\n1\n4. You can do the following:\nconst myArr = [1,3,5,6,8,9,15];\nmyArr.splice(1,1,4);\nconsole.log(myArr);\n5. The output is as follows:\n[empty \u00d7 10, \"test\"]\nundefined\n6. The output is as follows:\nundefined\nChapter 4, Logic Statements\nPractice exercises\nPractice exercise 4.1\nconst test = false;\nconsole.log(test);\nif(test){\nconsole.log(\"It's True\");\n}\nif(!test){\nconsole.log(\"False now\");\n}\n[ 432 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nPractice exercise 4.2\nlet age = prompt(\"How old are you?\");\nage = Number(age);\nlet message;\nif(age >= 21){\nmessage = \"You can enter and drink.\";\n}else if(age >= 19){\nmessage = \"You can enter but not drink.\";\n}else{\nmessage = \"You are not allowed in!\";\n}\nconsole.log(message);\nPractice exercise 4.3\nconst id = true;\nconst message = (id) ? \"Allowed In\" : \"Denied Entry\";\nconsole.log(message);\nPractice exercise 4.4\nconst randomNumber = Math.floor(Math.random() * 6);\nlet answer = \"Something went wrong\";\nlet question = prompt(\"Ask me anything\");\nswitch (randomNumber) {\ncase 0:\nanswer = \"It will work out\";\nbreak;\ncase 1:\nanswer = \"Maybe, maybe not\";\nbreak;\ncase 2:\nanswer = \"Probably not\";\nbreak;\ncase 3:\nanswer = \"Highly likely\";\nbreak;\ndefault:\n[ 433 ]\nAppendix\nanswer = \"I don't know about that\";\n}\nlet output = \"You asked me \" + question + \". I think that \" + answer;\nconsole.log(output);\nPractice exercise 4.5\nlet prize = prompt(\"Pick a number 0-10\");\nprize = Number(prize);\nlet output = \"My Selection: \";\nswitch (prize){\ncase 0:\noutput += \"Gold \";\ncase 1:\noutput += \"Coin \";\nbreak;\ncase 2:\noutput += \"Big \";\ncase 3:\noutput += \"Box of \";\ncase 4:\noutput += \"Silver \";\ncase 5:\noutput += \"Bricks \";\nbreak;\ndefault:\noutput += \"Sorry Try Again\";\n}\nconsole.log(output);\nProjects\nEvaluating a number game answers\nlet val = prompt(\"What number?\");\nval = Number(val);\nlet num = 100;\nlet message = \"nothing\";\nif (val > num) {\nmessage = val + \" was greater than \" + num;\n} else if (val === num) {\n[ 434 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nmessage = val + \" was equal to \" + num;\n} else {\nmessage = val + \" is less than \" + num;\n}\nconsole.log(message);\nconsole.log(message);\nFriend checker game answers\nlet person = prompt(\"Enter a name\");\nlet message;\nswitch (person) {\ncase \"John\" :\ncase \"Larry\" :\ncase \"Jane\" :\ncase \"Laurence\" :\nmessage = person + \" is my friend\";\nbreak;\ndefault :\nmessage = \"I don't know \" + person;\n}\nconsole.log(message);\nRock paper scissors game answers\nconst myArr = [\"Rock\", \"Paper\", \"Scissors\"];\nlet computer = Math.floor(Math.random() * 3);\nlet player = Math.floor(Math.random() * 3);\nlet message = \"player \" + myArr[player] + \" vs computer \" +\nmyArr[computer] + \" \";\nif (player === computer) {\nmessage += \"it's a tie\";\n} else if (player > computer) {\nif (computer == 0 && player == 2) {\nmessage += \"Computer Wins\";\n} else {\nmessage += \"Player Wins\";\n}\n} else {\nif (computer == 2 && player == 0) {\nmessage += \"Player Wins\";\n} else {\n[ 435 ]\nAppendix\nmessage += \"Computer Wins\";\n}\n}\nconsole.log(message);\nSelf-check quiz\n1. one\n2. this is the one\n3. login\n4. Welcome, that is a user: John\n5. Wake up, it's morning\n6. Result:\n\u2022 true\n\u2022 false\n\u2022 true\n\u2022 true\n7. Result:\n100 was LESS or Equal to 100\n100 is Even\nChapter 5, Loops\nPractice exercises\nPractice exercise 5.1\nconst max = 5;\nconst ranNumber = Math.floor(Math.random() * max) + 1;\n//console.log(ranNumber);\nlet correct = false;\nwhile (!correct) {\nlet guess = prompt(\"Guess a Number 1 - \" + max);\nguess = Number(guess);\nif (guess === ranNumber) {\n[ 436 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\ncorrect = true;\nconsole.log(\"You got it \" + ranNumber);\n} else if (guess > ranNumber) {\nconsole.log(\"Too high\");\n} else {\nconsole.log(\"Too Low\");\n}\n}\nPractice exercise 5.2\nlet counter = 0;\nlet step = 5;\ndo {\nconsole.log(counter);\ncounter += step;\n}\nwhile (counter <= 100);\nPractice exercise 5.3\nconst myWork = [];\nfor (let x = 1; x < 10; x++) {\nlet stat = x % 2 ? true : false;\nlet temp = {\nname: `Lesson ${x}`, status: stat\n};\nmyWork.push(temp);\n}\nconsole.log(myWork);\nPractice exercise 5.4\nconst myTable = [];\nconst rows = 4;\nconst cols = 7;\nlet counter = 0;\nfor (let y = 0; y < rows; y++) {\nlet tempTable = [];\nfor (let x = 0; x < cols; x++) {\ncounter++;\n[ 437 ]\nAppendix\ntempTable.push(counter);\n}\nmyTable.push(tempTable);\n}\nconsole.table(myTable);\nPractice exercise 5.5\nconst grid = [];\nconst cells = 64;\nlet counter = 0;\nlet row;\nfor (let x = 0; x < cells + 1; x++) {\nif (counter % 8 == 0) {\nif (row != undefined) {\ngrid.push(row);\n}\nrow = [];\n}\ncounter++;\nlet temp = counter;\nrow.push(temp);\n}\nconsole.table(grid);\n[ 438 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nPractice exercise 5.6\nconst myArray = [];\nfor (let x = 0; x < 10; x++) {\nmyArray.push(x + 1);\n}\nconsole.log(myArray);\nfor (let i = 0; i < myArray.length; i++) {\nconsole.log(myArray[i]);\n}\nfor (let val of myArray) {\nconsole.log(val);\n}\nPractice exercise 5.7\nconst obj = {\na: 1,\nb: 2,\nc: 3\n};\n[ 439 ]\nAppendix\nfor (let prop in obj) {\nconsole.log(prop, obj[prop]);\n}\nconst arr = [\"a\", \"b\", \"c\"];\nfor (let w = 0; w < arr.length; w++) {\nconsole.log(w, arr[w]);\n}\nfor (el in arr) {\nconsole.log(el, arr[el]);\n}\nPractice exercise 5.8\nlet output = \"\";\nlet skipThis = 7;\nfor (let i = 0; i < 10; i++) {\nif (i === skipThis) {\ncontinue;\n}\noutput += i;\n}\nconsole.log(output);\nAlternatively, the following code could be used, replacing continue with break:\nlet output = \"\";\nlet skipThis = 7;\nfor (let i = 0; i < 10; i++) {\nif (i === skipThis) {\nbreak;\n}\noutput += i;\n}\nconsole.log(output);\n[ 440 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nProject\nMath multiplication table\nconst myTable = [];\nconst numm = 10;\nfor(let x=0; x<numm; x++){\nconst temp = [];\nfor(let y = 0; y<numm; y++){\ntemp.push(x*y);\n}\nmyTable.push(temp);\n}\nconsole.table(myTable);\n[ 441 ]\nAppendix\nSelf-check quiz\n1. Result:\n0\n3\n6\n9\n2. Result:\n0\n5\n1\n6\n2\n7\n[1, 5, 7]\nChapter 6, Functions\nPractice exercises\nPractice exercise 6.1\nfunction adder(a, b) {\nreturn a + b;\n}\nconst val1 = 10;\nconst val2 = 20;\nconsole.log(adder(val1, val2));\nconsole.log(adder(20, 30));\nPractice exercise 6.2\nconst adj = [\"super\", \"wonderful\", \"bad\", \"angry\", \"careful\"];\nfunction myFun() {\nconst question = prompt(\"What is your name?\");\nconst nameAdj = Math.floor(Math.random() * adj.length);\nconsole.log(adj[nameAdj] + \" \" + question );\n[ 442 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\n}\nmyFun();\nPractice exercise 6.3\nconst val1 = 10;\nconst val2 = 5;\nlet operat = \"-\";\nfunction cal(a, b, op) {\nif (op == \"-\") {\nconsole.log(a \u2014 b);\n} else {\nconsole.log(a + b);\n}\n}\ncal(val1, val2, operat);\nPractice exercise 6.4\nconst myArr = [];\nfor(let x=0; x<10; x++){\nlet val1 = 5 * x;\nlet val2 = x * x;\nlet res = cal(val1, val2, \"+\");\nmyArr.push(res);\n}\nconsole.log(myArr);\nfunction cal(a, b, op) {\nif (op == \"-\") {\nreturn a - b;\n} else {\nreturn a + b;\n}\n}\nPractice exercise 6.5\nlet val = \"1000\";\n(function () {\nlet val = \"100\"; // local scope variable\n[ 443 ]\nAppendix\nconsole.log(val);\n})();\nlet result = (function () {\nlet val = \"Laurence\";\nreturn val;\n})();\nconsole.log(result);\nconsole.log(val);\n(function (val) {\nconsole.log(`My name is ${val}`);\n})(\"Laurence\");\nPractice exercise 6.6\nfunction calcFactorial(nr) {\nconsole.log(nr);\nif (nr === 0) {\nreturn 1;\n}\nelse {\nreturn nr * calcFactorial(--nr);\n}\n}\nconsole.log(calcFactorial(4));\nPractice exercise 6.7\nlet start = 10;\nfunction loop1(val) {\nconsole.log(val);\nif (val < 1) {\nreturn;\n}\nreturn loop1(val - 1);\n}\nloop1(start);\nfunction loop2(val) {\nconsole.log(val);\nif (val > 0) {\n[ 444 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nval--;\nreturn loop2(val);\n}\nreturn;\n}\nloop2(start);\nPractice exercise 6.8\nconst test = function(val){\nconsole.log(val);\n}\ntest('hello 1');\nfunction test1(val){\nconsole.log(val);\n}\ntest1(\"hello 2\");\nProjects\nCreate a recursive function\nconst main = function counter(i) {\nconsole.log(i);\nif (i < 10) {\nreturn counter(i + 1);\n}\nreturn;\n}\nmain(0);\nSet timeout order\nconst one = ()=> console.log('one');\nconst two = ()=> console.log('two');\nconst three = () =>{\nconsole.log('three');\none();\ntwo();\n}\n[ 445 ]\nAppendix\nconst four = () =>{\nconsole.log('four');\nsetTimeout(one,0);\nthree();\n}\nfour();\nSelf-check quiz\n1. 10\n2. Hello\n3. Answer:\nWelcome\nLaurence\nMy Name is Laurence\n4. 19\n5. 16\nChapter 7, Classes\nPractice exercises\nPractice exercise 7.1\nclass Person {\nconstructor(firstname, lastname) {\nthis.firstname = firstname;\nthis.lastname = lastname;\n}\n}\nlet person1 = new Person(\"Maaike\", \"van Putten\");\nlet person2 = new Person(\"Laurence\", \"Svekis\");\nconsole.log(\"hello \" + person1.firstname);\nconsole.log(\"hello \" + person2.firstname);\n[ 446 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nPractice exercise 7.2\nclass Person {\nconstructor(firstname, lastname) {\nthis.firstname = firstname;\nthis.lastname = lastname;\n}\nfullname(){\nreturn this.firstname + \" \" + this.lastname;\n}\n}\nlet person1 = new Person(\"Maaike\", \"van Putten\");\nlet person2 = new Person(\"Laurence\", \"Svekis\");\nconsole.log(person1.fullname());\nconsole.log(person2.fullname());\nPractice exercise 7.3\nclass Animal {\nconstructor(species, sounds) {\nthis.species = species;\nthis.sounds = sounds;\n}\nspeak() {\nconsole.log(this.species + \" \" + this.sounds);\n}\n}\nAnimal.prototype.eat = function () {\nreturn this.species + \" is eating\";\n}\nlet cat = new Animal(\"cat\", \"meow\");\nlet dog = new Animal(\"dog\", \"bark\");\ncat.speak();\nconsole.log(dog.eat());\nconsole.log(dog);\n[ 447 ]\nAppendix\nProjects\nEmployee tracking app\nclass Employee {\nconstructor(first, last, years) {\nthis.first = first;\nthis.last = last;\nthis.years = years;\n}\n}\nconst person1 = new Employee(\"Laurence\", \"Svekis\", 10);\nconst person2 = new Employee(\"Jane\", \"Doe\", 5);\nconst workers = [person1, person2];\nEmployee.prototype.details = function(){\nreturn this.first + \" \" + this.last + \" has worked here \" +\nthis.years + \" years\";\n}\nworkers.forEach((person) => {\nconsole.log(person.details());\n});\nMenu items price calculator\nclass Menu {\n#offer1 = 10;\n#offer2 = 20;\nconstructor(val1, val2) {\nthis.val1 = val1;\nthis.val2 = val2;\n}\ncalTotal(){\nreturn (this.val1 * this.#offer1) + (this.val2 * this.#offer2);\n}\nget total(){\nreturn this.calTotal();\n}\n}\n[ 448 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nconst val1 = new Menu(2,0);\nconst val2 = new Menu(1,3);\nconst val3 = new Menu(3,2);\nconsole.log(val1.total);\nconsole.log(val2.total);\nconsole.log(val3.total);\nSelf-check quiz\n1. class\n2. Using the following syntax:\nclass Person {\nconstructor(firstname, lastname) {\nthis.firstname = firstname;\nthis.lastname = lastname;\n}\n}\n3. Inheritance\n4. Answers:\n\u2022 True\n\u2022 False\n\u2022 True\n\u2022 True\n\u2022 False\n5. B\nChapter 8, Built-In JavaScript Methods\nPractice exercises\nPractice exercise 8.1\nconst secretMes1 = \"How's%20it%20going%3F\";\nconst secretMes2 = \"How's it going?\";\nconst decodedComp = decodeURIComponent(secretMes1);\nconsole.log(decodedComp);\n[ 449 ]\nAppendix\nconst encodedComp = encodeURIComponent(secretMes2);\nconsole.log(encodedComp);\nconst uri = \"http://www.basescripts.com?=Hello World\";\nconst encoded = encodeURI(uri);\nconsole.log(encoded);\nPractice exercise 8.2\nconst arr = [\"Laurence\", \"Mike\", \"Larry\", \"Kim\", \"Joanne\", \"Laurence\",\n\"Mike\", \"Laurence\", \"Mike\", \"Laurence\", \"Mike\"];\nconst arr2 = arr.filter ( (value, index, array) => {\nconsole.log(value,index,array.indexOf(value));\nreturn array.indexOf(value) === index;\n});\nconsole.log(arr2);\nPractice exercise 8.3\nconst myArr = [1,4,5,6];\nconst myArr1 = myArr.map(function(ele){\nreturn ele * 2;\n});\nconsole.log(myArr1);\nconst myArr2 = myArr.map((ele)=> ele*2);\nconsole.log(myArr2);\nPractice exercise 8.4\nconst val = \"thIs will be capiTalized for each word\";\nfunction wordsCaps(str) {\nstr = str.toLowerCase();\nconst tempArr = [];\nlet words = str.split(\" \");\nwords.forEach(word => {\nlet temp = word.slice(0, 1).toUpperCase() + word.slice(1);\ntempArr.push(temp);\n});\nreturn tempArr.join(\" \");\n}\nconsole.log(wordsCaps(val));\n[ 450 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nPractice exercise 8.5\nlet val = \"I love JavaScript\";\nval = val.toLowerCase();\nlet vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\nvowels.forEach((letter,index) =>{\nconsole.log(letter);\nval = val.replaceAll(letter,index);\n});\nconsole.log(val);\nPractice exercise 8.6\nconsole.log(Math.ceil(5.7));\nconsole.log(Math.floor(5.7));\nconsole.log(Math.round(5.7));\nconsole.log(Math.random());\nconsole.log(Math.floor(Math.random()*11)); // 0-10\nconsole.log(Math.floor(Math.random()*10)+1); // 1-10;\nconsole.log(Math.floor(Math.random()*100)+1); // 1-100;\nfunction ranNum(min, max) {\nreturn Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfor (let x = 0; x < 100; x++) {\nconsole.log(ranNum(1, 100));\n}\nPractice exercise 8.7\nlet future = new Date(2025, 5, 15);\nconsole.log(future);\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n\"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nlet day = future.getDate();\nlet month = future.getMonth();\nlet year = future.getFullYear();\nlet myDate = `${months[month-1]} ${day} ${year}`;\nconsole.log(myDate);\n[ 451 ]\nAppendix\nProjects\nWord scrambler\nlet str = \"JavaScript\";\nfunction scramble(val) {\nlet max = val.length;\nlet temp = \"\";\nfor(let i=0;i<max;i++){\nconsole.log(val.length);\nlet index = Math.floor(Math.random() * val.length);\ntemp += val[index];\nconsole.log(temp);\nval = val.substr(0, index) + val.substr(index + 1);\nconsole.log(val);\n}\nreturn temp;\n}\nconsole.log(scramble(str));\nCountdown timer\nconst endDate = \"Sept 1 2022\";\nfunction countdown() {\nconst total = Date.parse(endDate) - new Date();\nconst days = Math.floor(total / (1000 * 60 * 60 * 24));\nconst hrs = Math.floor((total / (1000 * 60 * 60)) % 24);\nconst mins = Math.floor((total / 1000 / 60) % 60);\nconst secs = Math.floor((total / 1000) % 60);\nreturn {\ndays,\nhrs,\nmins,\nsecs\n};\n}\nfunction update() {\nconst temp = countdown();\n[ 452 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nlet output = \"\";\nfor (const property in temp) {\noutput += (`${property}: ${temp[property]} `);\n}\nconsole.log(output);\nsetTimeout(update, 1000);\n}\nupdate();\nSelf-check quiz\n1. decodeURIComponent(e)\n2. 4\n3. [\"Hii\", \"hi\", \"hello\", \"Hii\", \"hi\", \"hi World\", \"Hi\"]\n4. [\"hi\", \"hi World\"]\nChapter 9, The Document Object Model\nPractice exercises\nPractice exercise 9.1\n[ 453 ]\nAppendix\nPractice exercise 9.2\nconsole.log(window.location.protocol);\nconsole.log(window.location.href);\nPractice exercise 9.3\n<script>\nconst output = document.querySelector('.output');\noutput.textContent = \"Hello World\";\noutput.classList.add(\"red\");\noutput.id = \"tester\";\noutput.style.backgroundColor = \"red\";\nconsole.log(document.URL);\noutput.textContent = document.URL;\n</script>\nProjects\nManipulating HTML elements with JavaScript\nconst output = document.querySelector(\".output\");\nconst mainList = output.querySelector(\"ul\");\nmainList.id = \"mainList\";\n[ 454 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nconsole.log(mainList);\nconst eles = document.querySelectorAll(\"div\");\nfor (let x = 0; x < eles.length; x++) {\nconsole.log(eles[x].tagName);\neles[x].id = \"id\" + (x + 1);\nif (x % 2) {\neles[x].style.color = \"red\";\n} else {\neles[x].style.color = \"blue\";\n}\n}\nSelf-check quiz\n1. You should see an object representing the list of elements contained within\nbody object of the HTML page.\n2. document.body.textContent = \"Hello World\";\n3. The code is as follows:\nfor (const property in document) {\nconsole.log(`${property}: ${document[property]}`);\n}\n4. The code is as follows:\nfor (const property in window) {\nconsole.log(`${property}: ${document[window]}`);\n}\n5. The code is as follows:\n<!doctype html>\n<html>\n<head>\n[ 455 ]\nAppendix\n<title>JS Tester</title>\n</head>\n<body>\n<h1>Test</h1>\n<script>\nconst output = document.querySelector('h1');\noutput.textContent = \"Hello World\";\n</script>\n</body>\n</html>\nChapter 10, Dynamic Element\nManipulation Using the DOM\nPractice exercises\nPractice exercise 10.1\n[ 456 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nPractice exercise 10.2\n<!doctype html>\n<html>\n<head>\n<title>Canvas HTML5</title>\n</head>\n<body>\n<div id=\"one\">Hello World</div>\n<script>\nconst myEle = document.getElementById(\"one\");\nconsole.log(myEle);\n</script>\n</body>\n</html>\nPractice exercise 10.3\n<!doctype html>\n<html>\n<head>\n<title>Dynamic event manipulation</title>\n</head>\n<body>\n<div>Hello World 1</div>\n<div>Hello World 2</div>\n<div>Hello World 3</div>\n<script>\nconst myEles = document.getElementsByTagName(\"div\");\nconsole.log(myEles[1]);\n</script>\n</body>\n</html>\nPractice exercise 10.4\n<!doctype html>\n<html>\n<head>\n<title>Canvas HTML5</title>\n</head>\n<body>\n[ 457 ]\nAppendix\n<body>\n<h1 class=\"ele\">Hello World</h1>\n<div class=\"ele\">Hello World 1</div>\n<div class=\"ele\">Hello World 3</div>\n<script>\nconst myEles = document.getElementsByClassName(\"ele\");\nconsole.log(myEles[0]);\n</script>\n</html>\nPractice exercise 10.5\n<!doctype html>\n<html>\n<head>\n<title>Canvas HTML5</title>\n</head>\n<body>\n<body>\n<h1 class=\"ele\">Hello World</h1>\n<div class=\"ele\">Hello World 1</div>\n<div class=\"ele\">Hello World 3</div>\n<p class=\"ele\">Hello World 4</p>\n<script>\nconst myEle = document.querySelector(\".ele\");\nconsole.log(myEle);\n</script>\n</html>\nPractice exercise 10.6\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n</head>\n<body>\n<div class=\"container\">\n<div class=\"myEle\">One</div>\n<div class=\"myEle\">Two</div>\n<div class=\"myEle\">Three</div>\n[ 458 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\n<div class=\"myEle\">Four</div>\n<div class=\"myEle\">Five</div>\n</div>\n<script>\nconst eles = document.querySelectorAll(\".myEle\");\nconsole.log(eles);\neles.forEach((el) => {\nconsole.log(el);\n});\n</script>\n</body>\n</html>\nPractice exercise 10.7\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n</head>\n<body>\n<div>\n<button onclick=\"message(this)\">Button 1</button>\n<button onclick=\"message(this)\">Button 2</button>\n</div>\n<script>\nfunction message(el) {\nconsole.dir(el.textContent);\n}\n</script>\n</body>\n</html>\nPractice exercise 10.8\n<script>\nconst message = document.querySelector(\"#message\");\nconst myArray = [\"Laurence\", \"Mike\", \"John\", \"Larry\", \"Kim\",\n\"Joanne\", \"Lisa\", \"Janet\", \"Jane\"];\nbuild();\n//addClicks();\n[ 459 ]\nAppendix\nfunction build() {\nlet html = \"<h1>My Friends Table</h1><table>\";\nmyArray.forEach((item, index) => {\nhtml += `<tr class=\"box\" data-row=\"${index+1}\"\ndata-name=\"${item}\" onclick=\"getData(this)\">\n<td>${item}</td>`;\nhtml += `<td >${index + 1}</td></tr>`;\n});\nhtml += \"</table>\";\ndocument.getElementById(\"output\").innerHTML = html;\n}\nfunction getData(el) {\nlet temp = el.getAttribute(\"data-row\");\nlet tempName = el.getAttribute(\"data-name\");\nmessage.innerHTML = `${tempName } is in row #${temp}`;\n}\n</script>\nPractice exercise 10.9\n<script>\nconst btns = document.querySelectorAll(\"button\");\nbtns.forEach((btn)=>{\nfunction output(){\nconsole.log(this.textContent);\n}\nbtn.addEventListener(\"click\",output);\n});\n</script>\nPractice exercise 10.10\n<script>\ndocument.getElementById(\"addNew\").onclick = function () {\naddOne();\n}\nfunction addOne() {\nvar a = document.getElementById(\"addItem\").value;\nvar li = document.createElement(\"li\");\nli.appendChild(document.createTextNode(a));\n[ 460 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\ndocument.getElementById(\"sList\").appendChild(li);\n}\n</script>\nProjects\nCollapsible accordion component\n<script>\nconst menus = document.querySelectorAll(\".title\");\nconst openText = document.querySelectorAll(\".myText\");\nmenus.forEach((el) => {\nel.addEventListener(\"click\", (e) => {\nconsole.log(el.nextElementSibling);\nremover();\nel.nextElementSibling.classList.toggle(\"active\");\n})\n})\nfunction remover() {\nopenText.forEach((ele) => {\nele.classList.remove(\"active\");\n})\n}\n</script>\nInteractive voting system\n<script>\nwindow.onload = build;\nconst myArray = [\"Laurence\", \"Mike\", \"John\", \"Larry\"];\nconst message = document.getElementById(\"message\");\nconst addNew = document.getElementById(\"addNew\");\nconst newInput = document.getElementById(\"addFriend\");\nconst output = document.getElementById(\"output\");\naddNew.onclick = function () {\nconst newFriend = newInput.value;\nadder(newFriend, myArray.length, 0);\nmyArray.push(newFriend);\n}\nfunction build() {\n[ 461 ]\nAppendix\nmyArray.forEach((item, index) => {\nadder(item, index, 0);\n});\n}\nfunction adder(name, index, counter) {\nconst tr = document.createElement(\"tr\");\nconst td1 = document.createElement(\"td\");\ntd1.classList.add(\"box\");\ntd1.textContent = index + 1;\nconst td2 = document.createElement(\"td\");\ntd2.textContent = name;\nconst td3 = document.createElement(\"td\");\ntd3.textContent = counter;\ntr.append(td1);\ntr.append(td2);\ntr.append(td3);\ntr.onclick= function () {\nconsole.log(tr.lastChild);\nlet val = Number(tr.lastChild.textContent);\nval++;\ntr.lastChild.textContent = val;\n}\noutput.appendChild(tr);\n}\n</script>\nHangman game\n<script>\nconst game = { cur: \"\", solution: \"\", puzz: [], total: 0 };\nconst myWords = [\"learn Javascript\", \"learn html\",\n\"learn css\"];\nconst score = document.querySelector(\".score\");\nconst puzzle = document.querySelector(\".puzzle\");\nconst letters = document.querySelector(\".letters\");\nconst btn = document.querySelector(\"button\");\nbtn.addEventListener(\"click\", startGame);\nfunction startGame() {\nif (myWords.length > 0) {\nbtn.style.display = \"none\";\ngame.puzz = [];\n[ 462 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\ngame.total = 0;\ngame.cur = myWords.shift();\ngame.solution = game.cur.split(\"\");\nbuilder();\n} else {\nscore.textContent = \"No More Words.\";\n}\n}\nfunction createElements(elType, parentEle, output, cla) {\nconst temp = document.createElement(elType);\ntemp.classList.add(\"boxE\");\nparentEle.append(temp);\ntemp.textContent = output;\nreturn temp;\n}\nfunction updateScore() {\nscore.textContent = `Total Letters Left : ${game.total}`;\nif (game.total <= 0) {\nconsole.log(\"game over\");\nscore.textContent = \"Game Over\";\nbtn.style.display = \"block\";\n}\n}\nfunction builder() {\nletters.innerHTML = \"\";\npuzzle.innerHTML = \"\";\ngame.solution.forEach((lett) => {\nlet div = createElements(\"div\", puzzle, \"-\", \"boxE\");\nif (lett == \" \") {\ndiv.style.borderColor = \"white\";\ndiv.textContent = \" \";\n} else {\ngame.total++;\n}\ngame.puzz.push(div);\nupdateScore();\n})\nfor (let i = 0; i < 26; i++) {\nlet temp = String.fromCharCode(65 + i);\nlet div = createElements(\"div\", letters, temp,\"box\");\n[ 463 ]\nAppendix\nlet checker = function (e) {\ndiv.style.backgroundColor = \"#ddd\";\ndiv.classList.remove(\"box\");\ndiv.classList.add(\"boxD\");\ndiv.removeEventListener(\"click\", checker);\ncheckLetter(temp);\n}\ndiv.addEventListener(\"click\", checker);\n}\n}\nfunction checkLetter(letter) {\nconsole.log(letter);\ngame.solution.forEach((ele, index) => {\nif (ele.toUpperCase() == letter) {\ngame.puzz[index].textContent = letter;\ngame.total--;\nupdateScore();\n};\n};\n)\n}\n</script>\nSelf-check quiz\n1. Hello <br> World\n2. Hello\nWorld\n3. Hello World\n4. When three gets clicked, the output is three. When one gets clicked, the\noutput is:\none\ntwo\nthree\n5. btn.removeEventListener(\"click\", myFun);\n[ 464 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nChapter 11, Interactive Content and Event\nListeners\nPractice exercises\nPractice exercise 11.1\n<!DOCTYPE html>\n<html>\n<head>\n<title>Laurence Svekis</title>\n</head>\n<body>\n<script>\nlet darkMode = false;\nwindow.onclick = () => {\nconsole.log(darkMode);\nif (!darkMode) {\ndocument.body.style.backgroundColor = \"black\";\ndocument.body.style.color = \"white\";\ndarkMode = true;\n} else {\ndocument.body.style.backgroundColor = \"white\";\ndocument.body.style.color = \"black\";\ndarkMode = false;\n}\n}\n</script>\n</body>\n</html>\n[ 465 ]\nAppendix\nPractice exercise 11.2\n<!doctype html>\n<html>\n<body>\n<div>red</div>\n<div>blue</div>\n<div>green</div>\n<div>yellow</div>\n<script>\nconst divs = document.querySelectorAll(\"div\");\ndivs.forEach((el)=>{\nel.addEventListener(\"click\",()=>{\ndocument.body.style.backgroundColor = el.textContent;\n});\n})\n</script>\n</body>\n</html>\nPractice exercise 11.3\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n</head>\n<body>\n<script>\ndocument.addEventListener(\"DOMContentLoaded\", (e) => {\nmessage(\"Document ready\", e);\n});\nwindow.onload = (e) => {\nmessage(\"Window ready\", e);\n}\nfunction message(val, event) {\nconsole.log(event);\nconsole.log(val);\n}\n</script>\n</body>\n</html>\n[ 466 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nPractice exercise 11.4\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n</head>\n<body>\n<div class=\"output\"></div>\n<script>\nconst output = document.querySelector(\".output\");\noutput.textContent = \"hello world\";\noutput.style.height = \"200px\";\noutput.style.width = \"400px\";\noutput.style.backgroundColor = \"red\";\noutput.addEventListener(\"mousedown\", function (e) {\nmessage(\"green\", e);\n});\noutput.addEventListener(\"mouseover\", function (e) {\nmessage(\"red\", e);\n});\noutput.addEventListener(\"mouseout\", function (e) {\nmessage(\"yellow\", e);\n});\noutput.addEventListener(\"mouseup\", function (e) {\nmessage(\"blue\", e);\n});\nfunction message(elColor, event) {\nconsole.log(event.type);\noutput.style.backgroundColor = elColor;\n}\n</script>\n</body>\n</html>\nPractice exercise 11.5\n<script>\nconst myInput = document.querySelector(\"input[name='message']\");\nconst output = document.querySelector(\".output\");\nconst btn1 = document.querySelector(\".btn1\");\n[ 467 ]\nAppendix\nconst btn2 = document.querySelector(\".btn2\");\nconst btn3 = document.querySelector(\".btn3\");\nconst log = [];\nbtn1.addEventListener(\"click\", tracker);\nbtn2.addEventListener(\"click\", tracker);\nbtn3.addEventListener(\"click\", (e) => {\nconsole.log(log);\n});\nfunction tracker(e) {\noutput.textContent = myInput.value;\nconst ev = e.target;\nconsole.dir(ev);\nconst temp = {\nmessage: myInput.value,\ntype: ev.type,\nclass: ev.className,\ntag: ev.tagName\n};\nlog.push(temp);\nmyInput.value = \"\";\n}\n</script>\nPractice exercise 11.6\n<script>\nconst main = document.querySelector(\".container\");\nconst boxes = document.querySelectorAll(\".box\");\nmain.addEventListener(\"click\", (e) => {\nconsole.log(\"4\");\n},false);\nmain.addEventListener(\"click\", (e) => {\nconsole.log(\"1\");\n},true);\nboxes.forEach(ele => {\nele.addEventListener(\"click\", (e) => {\nconsole.log(\"3\");\nconsole.log(e.target.textContent);\n},false);\n[ 468 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nele.addEventListener(\"click\", (e) => {\nconsole.log(\"2\");\nconsole.log(e.target.textContent);\n},true);\n});\n</script>\nPractice exercise 11.7\n<script>\nconst output = document.querySelector(\".output1\");\nconst in1 = document.querySelector(\"input[name='first']\");\nconst in2 = document.querySelector(\"input[name='last']\");\nin1.addEventListener(\"change\", (e) => {\nconsole.log(\"change\");\nupdater(in1.value);\n});\nin1.addEventListener(\"blur\", (e) => {\nconsole.log(\"blur\");\n});\nin1.addEventListener(\"focus\", (e) => {\nconsole.log(\"focus\");\n});\nin2.addEventListener(\"change\", (e) => {\nconsole.log(\"change\");\nupdater(in2.value);\n});\nin2.addEventListener(\"blur\", (e) => {\nconsole.log(\"blur\");\n});\nin2.addEventListener(\"focus\", (e) => {\nconsole.log(\"focus\");\n});\nfunction updater(str) {\noutput.textContent = str;\n}\n</script>\n[ 469 ]\nAppendix\nPractice exercise 11.8\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n</head>\n<body>\n<div class=\"output\"></div>\n<input type=\"text\" name=\"myNum1\">\n<input type=\"text\" name=\"myNum2\">\n<script>\nconst eles = document.querySelectorAll(\"input\");\nconst output = document.querySelector(\".output\");\neles.forEach(el => {\nel.addEventListener(\"keydown\", (e) => {\nif (!isNaN(e.key)) {\noutput.textContent += e.key;\n}\n});\nel.addEventListener(\"keyup\", (e) => {\nconsole.log(e.key);\n});\nel.addEventListener(\"paste\", (e) => {\nconsole.log('pasted');\n});\n});\n</script>\n</body>\n</html>\nPractice exercise 11.9\n<script>\nconst dragme = document.querySelector(\"#dragme\");\ndragme.addEventListener(\"dragstart\", (e) => {\ndragme.style.opacity = .5;\n});\ndragme.addEventListener(\"dragend\", (e) => {\ndragme.style.opacity = \"\";\n});\nconst boxes = document.querySelectorAll(\".box\");\n[ 470 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nboxes.forEach(box => {\nbox.addEventListener(\"dragenter\", (e) => {\ne.target.classList.add('red');\n});\nbox.addEventListener(\"dragover\", (e) => {\ne.preventDefault();\n});\nbox.addEventListener(\"dragleave\", (e) => {\n//console.log(\"leave\");\ne.target.classList.remove('red');\n});\nbox.addEventListener(\"drop\", (e) => {\ne.preventDefault();\nconsole.log(\"dropped\");\ne.target.appendChild(dragme);\n});\n});\nfunction dragStart(e) {\nconsole.log(\"Started\");\n}\n</script>\nPractice exercise 11.10\n<!doctype html>\n<html>\n<head>\n<title>JS Tester</title>\n</head>\n<body>\n<form action=\"index2.html\" method=\"get\">\nFirst: <input type=\"text\" name=\"first\">\n<br>Last: <input type=\"text\" name=\"last\">\n<br>Age: <input type=\"number\" name=\"age\">\n<br><input type=\"submit\" value=\"submit\">\n</form>\n<script>\nconst form = document.querySelector(\"form\");\nconst email = document.querySelector(\"#email\");\nform.addEventListener(\"submit\", (e) => {\nlet error = false;\n[ 471 ]\nAppendix\nif (checker(form.first.value)) {\nconsole.log(\"First Name needed\");\nerror = true;\n}\nif (checker(form.last.value)) {\nconsole.log(\"Last Name needed\");\nerror = true;\n}\nif (form.age.value < 19) {\nconsole.log(\"You must be 19 or over\");\nerror = true;\n}\nif (error) {\ne.preventDefault();\nconsole.log(\"please review the form\");\n}\n});\nfunction checker(val) {\nconsole.log(val.length);\nif (val.length < 6) {\nreturn true;\n}\nreturn false;\n}\n</script>\n</body>\n</html>\nPractice exercise 11.11\n<!doctype html>\n<html>\n<style>\ndiv {\nbackground-color: purple;\nwidth: 100px;\nheight: 100px;\nposition: absolute;\n}\n</style>\n<body>\n[ 472 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\n<div id=\"block\"></div>\n<script>\nconst main = document.querySelector(\"#block\");\nlet mover = { speed: 10, dir: 1, pos: 0 };\nmain.addEventListener(\"click\", moveBlock);\nfunction moveBlock() {\nlet x = 30;\nsetInterval(function () {\nif (x < 1) {\nclearInterval();\n} else {\nif (mover.pos > 800 || mover.pos < 0) {\nmover.dir *= -1;\n}\nx--;\nmover.pos += x * mover.dir;\nmain.style.left = mover.pos + \"px\";\nconsole.log(mover.pos);\n}\n}, 2);\n}\n</script>\n</body>\n</html>\nProjects\nBuild your own analytics\n<!doctype html >\n<html>\n<head>\n<title>JS Tester</title>\n<style>.box{width:200px;height:100px;border:1px solid black}</\nstyle>\n</head>\n<body>\n<div class=\"container\">\n<div class=\"box\" id=\"box0\">Box #1</div>\n<div class=\"box\" id=\"box1\">Box #2</div>\n<div class=\"box\" id=\"box2\">Box #3</div>\n[ 473 ]\nAppendix\n<div class=\"box\" id=\"box3\">Box #4</div>\n</div>\n<script>\nconst counter = [];\nconst main = document.querySelector(\".container\");\nmain.addEventListener(\"click\",tracker);\nfunction tracker(e){\nconst el = e.target;\nif(el.id){\nconst temp = {};\ntemp.content = el.textContent;\ntemp.id = el.id;\ntemp.tagName = el.tagName;\ntemp.class = el.className;\nconsole.dir(el);\ncounter.push(temp);\nconsole.log(counter);\n}\n}\n</script>\n</body>\n</html>\nStar rater system\n<script>\nconst starsUL = document.querySelector(\".stars\");\nconst output = document.querySelector(\".output\");\nconst stars = document.querySelectorAll(\".star\");\nstars.forEach((star, index) => {\nstar.starValue = (index + 1);\nstar.addEventListener(\"click\", starRate);\n});\nfunction starRate(e) {\noutput.innerHTML =\n`You Rated this ${e.target.starValue} stars`;\nstars.forEach((star, index) => {\nif (index < e.target.starValue) {\nstar.classList.add(\"orange\");\n} else {\nstar.classList.remove(\"orange\");\n}\n[ 474 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\n});\n}\n</script>\nMouse position tracker\n<!DOCTYPE html>\n<html>\n<head>\n<title>Complete JavaScript Course</title>\n<style>\n.holder {\ndisplay: inline-block;\nwidth: 300px;\nheight: 300px;\nborder: 1px solid black;\npadding: 10px;\n}\n.active {\nbackground-color: red;\n}\n</style>\n</head>\n<body>\n<div class=\"holder\">\n<div id=\"output\"></div>\n</div>\n<script>\nconst ele = document.querySelector(\".holder\");\nele.addEventListener(\"mouseover\",\n(e) => { e.target.classList.add(\"active\"); });\nele.addEventListener(\"mouseout\",\n(e) => { e.target.classList.remove(\"active\"); });\nele.addEventListener(\"mousemove\", coordin);\nfunction coordin() {\nlet html = \"X:\" + event.clientX + \" | Y:\" + event.clientY;\ndocument.getElementById(\"output\").innerHTML = html;\n}\n</script>\n</body>\n</html>\n[ 475 ]\nAppendix\nBox clicker speed test game\n<script>\nconst output = document.querySelector('.output');\nconst message = document.querySelector('.message');\nmessage.textContent = \"Press to Start\";\nconst box = document.createElement('div');\nconst game = {\ntimer: 0,\nstart: null\n};\nbox.classList.add('box');\noutput.append(box);\nbox.addEventListener('click', (e) => {\nbox.textContent = \"\";\nbox.style.display = 'none';\ngame.timer = setTimeout(addBox, ranNum(3000));\nif (!game.start) {\nmessage.textContent = 'Loading....';\n} else {\nconst cur = new Date().getTime();\nconst dur = (cur - game.start) / 1000;\nmessage.textContent = `It took ${dur} seconds to click`;\n}\n});\nfunction addBox() {\nmessage.textContent = 'Click it...';\ngame.start = new Date().getTime();\nbox.style.display = 'block';\nbox.style.left = ranNum(450) + 'px';\nbox.style.top = ranNum(450) + 'px';\n}\nfunction ranNum(max) {\nreturn Math.floor(Math.random() * max);\n}\n</script>\n[ 476 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nSelf-check quiz\n1. Window Object Model.\n2. The preventDefault() method cancels the event if it can be canceled. The\ndefault action that belongs to the event will not occur.\nChapter 12, Intermediate JavaScript\nPractice exercises\nPractice exercise 12.1\n<script>\nconst output = document.getElementById(\"output\");\nconst findValue = document.getElementById(\"sText\");\nconst replaceValue = document.getElementById(\"rText\");\ndocument.querySelector(\"button\").addEventListener(\"click\", lookUp);\nfunction lookUp() {\nconst s = output.textContent;\nconst rt = replaceValue.value;\nconst re = new RegExp(findValue.value, \"gi\");\nif (s.match(re)) {\nlet newValue = s.replace(re, rt);\noutput.textContent = newValue;\n}\n}\n</script>\nPractice exercise 12.2\n<script>\nconst output = document.querySelector(\".output\");\nconst emailVal = document.querySelector(\"input\");\nconst btn = document.querySelector(\"button\");\nconst emailExp =\n/([A-Za-z0-9._-]+@[A-Za-z0-9._-]+\\.[A-Za-z0-9]+)\\w+/;\nbtn.addEventListener(\"click\", (e) => {\n[ 477 ]\nAppendix\nconst val = emailVal.value;\nconst result = emailExp.test(val);\nlet response = \"\";\nif (!result) {\nresponse = \"Invalid Email\";\noutput.style.color = \"red\";\n} else {\nresponse = \"Valid Email\";\noutput.style.color = \"green\";\n}\nemailVal.value = \"\";\noutput.textContent = response;\n});\n</script>\nPractice exercise 12.3\nfunction showNames() {\nlet lastOne = \"\";\nfor (let i = 0; i < arguments.length; i++) {\nlastOne = arguments[i];\n}\nreturn lastOne;\n}\nconsole.log(showNames(\"JavaScript\", \"Laurence\", \"Mike\", \"Larry\"));\nPractice exercise 12.4\n15\n45\nPractice exercise 12.5\nfunction test(val) {\ntry {\nif (isNaN(val)) {\nthrow \"Not a number\";\n} else {\nconsole.log(\"Got number\");\n}\n[ 478 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\n} catch (e) {\nconsole.error(e);\n} finally {\nconsole.log(\"Done \" + val);\n}\n}\ntest(\"a\");\ntest(100);\nPractice exercise 12.6\n<script>\nconsole.log(document.cookie);\nconsole.log(rCookie(\"test1\"));\nconsole.log(rCookie(\"test\"));\ncCookie(\"test1\", \"new Cookie\", 30);\ndCookie(\"test2\");\nfunction cCookie(cName, value, days) {\nif (days) {\nconst d = new Date();\nd.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));\nlet e = \"; expires=\" + d.toUTCString();\ndocument.cookie = cName + \"=\" + value + e + \"; path=/\";\n}\n}\nfunction rCookie(cName) {\nlet cookieValue = false;\nlet arr = document.cookie.split(\"; \");\narr.forEach(str => {\nconst cookie = str.split(\"=\");\nif (cookie[0] == cName) {\ncookieValue = cookie[1];\n}\n});\nreturn cookieValue;\n}\nfunction dCookie(cName) {\ncCookie(cName, \"\", -1);\n}\n</script>\n[ 479 ]\nAppendix\nPractice exercise 12.7\n<script>\nconst userTask = document.querySelector(\".main input\");\nconst addBtn = document.querySelector(\".main button\");\nconst output = document.querySelector(\".output\");\nconst tasks = JSON.parse(localStorage.getItem(\"tasklist\")) || [];\naddBtn.addEventListener(\"click\", createListItem);\nif (tasks.length > 0) {\ntasks.forEach((task) => {\ngenItem(task.val, task.checked);\n});\n}\nfunction saveTasks() {\nlocalStorage.setItem(\"tasklist\", JSON.stringify(tasks));\n}\nfunction buildTasks() {\ntasks.length = 0;\nconst curList = output.querySelectorAll(\"li\");\ncurList.forEach((el) => {\nconst tempTask = {\nval: el.textContent,\nchecked: false\n};\nif (el.classList.contains(\"ready\")) {\ntempTask.checked = true;\n}\ntasks.push(tempTask);\n});\nsaveTasks();\n}\nfunction genItem(val, complete) {\nconst li = document.createElement(\"li\");\nconst temp = document.createTextNode(val);\nli.appendChild(temp);\noutput.append(li);\nuserTask.value = \"\";\nif (complete) {\nli.classList.add(\"ready\");\n}\n[ 480 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nli.addEventListener(\"click\", (e) => {\nli.classList.toggle(\"ready\");\nbuildTasks();\n});\nreturn val;\n}\nfunction createListItem() {\nconst val = userTask.value;\nif (val.length > 0) {\nconst myObj = {\nval: genItem(val, false),\nchecked: false\n};\ntasks.push(myObj);\nsaveTasks();\n}\n}\n</script>\nPractice exercise 12.8\nlet myList = [{\n\"name\": \"Learn JavaScript\",\n\"status\": true\n},\n{\n\"name\": \"Try JSON\",\n\"status\": false\n}\n];\nreloader();\nfunction reloader() {\nmyList.forEach((el) => {\nconsole.log(`${el.name} = ${el.status}`);\n});\n}\n[ 481 ]\nAppendix\nPractice Exercise 12.9\nlet myList = [{\n\"name\": \"Learn JavaScript\",\n\"status\": true\n},\n{\n\"name\": \"Try JSON\",\n\"status\": false\n}\n];\nconst newStr = JSON.stringify(myList);\nconst newObj = JSON.parse(newStr);\nnewObj.forEach((el)=>{\nconsole.log(el);\n});\nProjects\nEmail extractor\n<script>\nconst firstArea = document.querySelector(\n\"textarea[name='txtarea']\");\nconst secArea = document.querySelector(\n\"textarea[name='txtarea2']\");\ndocument.querySelector(\"button\").addEventListener(\"click\", lookUp);\nfunction lookUp() {\nconst rawTxt = firstArea.value;\nconst eData = rawTxt.match(\n/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi);\nconst holder = [];\nfor (let x = 0; x < eData.length; x++) {\nif (holder.indexOf(eData[x]) == -1) {\nholder.push(eData[x]);\n}\n}\nsecArea.value = holder.join(',');\n}\n</script>\n[ 482 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nForm validator\n<script>\nconst myForm = document.querySelector(\"form\");\nconst inputs = document.querySelectorAll(\"input\");\nconst errors = document.querySelectorAll(\".error\");\nconst required = [\"email\", \"userName\"];\nmyForm.addEventListener(\"submit\", validation);\nfunction validation(e) {\nlet data = {};\ne.preventDefault();\nerrors.forEach(function (item) {\nitem.classList.add(\"hide\");\n});\nlet error = false;\ninputs.forEach(function (el) {\nlet tempName = el.getAttribute(\"name\");\nif (tempName != null) {\nel.style.borderColor = \"#ddd\";\nif (el.value.length == 0 &&\nrequired.includes(tempName)) {\naddError(el, \"Required Field\", tempName);\nerror = true;\n}\nif (tempName == \"email\") {\nlet exp = /([A-Za-z0-9._-]+@[A-Za-z0-9._-]+\\.\n[A-Za-z0-9]+)\\w+/;\nlet result = exp.test(el.value);\nif (!result) {\naddError(el, \"Invalid Email\", tempName);\nerror = true;\n}\n}\nif (tempName == \"password\") {\nlet exp = /[A-Za-z0-9]+$/;\nlet result = exp.test(el.value);\nif (!result) {\naddError(el, \"Only numbers and Letters\",\ntempName);\nerror = true;\n}\n[ 483 ]\nAppendix\nif (!(el.value.length > 3 &&\nel.value.length < 9)) {\naddError(el, \"Needs to be between 3-8 \" +\n\"characters\", tempName);\nerror = true;\n}\n}\ndata[tempName] = el.value;\n}\n});\nif (!error) {\nmyForm.submit();\n}\n}\nfunction addError(el, mes, fieldName) {\nlet temp = el.nextElementSibling;\ntemp.classList.remove(\"hide\");\ntemp.textContent = fieldName.toUpperCase() + \" \" + mes;\nel.style.borderColor = \"red\";\nel.focus();\n}\n</script>\nSimple math quiz\n<!doctype html>\n<html>\n<head>\n<title>Complete JavaScript Course</title>\n</head>\n<body>\n<span class=\"val1\"></span> <span>+</span>\n<span class=\"val2\"></span> = <span>\n<input type=\"text\" name=\"answer\"></span><button>Check</button>\n<div class=\"output\"></div>\n<script>\nconst app = function () {\nconst game = {};\nconst val1 = document.querySelector(\".val1\");\nconst val2 = document.querySelector(\".val2\");\nconst output = document.querySelector(\".output\");\n[ 484 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nconst answer = document.querySelector(\"input\");\nfunction init() {\ndocument.querySelector(\"button\").addEventListener(\n\"click\", checker);\nloadQuestion();\n}\nfunction ranValue(min, max) {\nreturn Math.floor(Math.random() * (max - min + 1) +\nmin);\n}\nfunction loadQuestion() {\ngame.val1 = ranValue(1, 100);\ngame.val2 = ranValue(1, 100);\ngame.answer = game.val1 + game.val2;\nval1.textContent = game.val1;\nval2.textContent = game.val2;\n}\nfunction checker() {\nlet bg = answer.value == game.answer ? \"green\" : \"red\";\noutput.innerHTML +=\n`<div style=\"color:${bg}\">${game.val1} +\n${game.val2} = ${game.answer} (${answer.value})\n</div>`;\nanswer.value = \"\";\nloadQuestion();\n}\nreturn {\ninit: init\n};\n}();\ndocument.addEventListener('DOMContentLoaded', app.init);\n</script>\n</body>\n</html>\nSelf-check quiz\n1. The range matched is from a to e and is case sensitive. It will return the rest\nof the word: enjoy avaScript.\n2. Yes.\n3. It will clear cookies from the site.\n4. hello world\n[ 485 ]\nAppendix\n5. a is not defined.\n6. a\nc\nb\nChapter 13, Concurrency\nPractice exercises\nPractice exercise 13.1\nfunction greet(fullName){\nconsole.log(`Welcome, ${fullName[0]} ${fullName[1]}`)\n}\nfunction processCall(user, callback){\nconst fullName = user.split(\" \");\ncallback(fullName);\n}\nprocessCall(\"Laurence Svekis\", greet);\nPractice exercise 13.2\nconst myPromise = new Promise((resolve, reject) => {\nresolve(\"Start Counting\");\n});\nfunction counter(val){\nconsole.log(val);\n}\nmyPromise\n.then(value => {counter(value); return \"one\"})\n.then(value => {counter(value); return \"two\"})\n.then(value => {counter(value); return \"three\"})\n.then(value => {counter(value);});\n[ 486 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nPractice exercise 13.3\nlet cnt = 0;\nfunction outputTime(val) {\nreturn new Promise(resolve => {\nsetTimeout(() => {\ncnt++;\nresolve(`x value ${val} counter:${cnt}`);\n}, 1000);\n});\n}\nasync function aCall(val) {\nconsole.log(`ready ${val} counter:${cnt}`);\nconst res = await outputTime(val);\nconsole.log(res);\n}\nfor (let x = 1; x < 4; x++) {\naCall(x);\n}\nProjects\nPassword checker\nconst allowed = [\"1234\", \"pass\", \"apple\"];\nfunction passwordChecker(pass) {\nreturn allowed.includes(pass);\n}\nfunction login(password) {\nreturn new Promise((resolve, reject) => {\nif (passwordChecker(password)) {\nresolve({\nstatus: true\n});\n} else {\nreject({\nstatus: false\n});\n}\n[ 487 ]\nAppendix\n});\n}\nfunction checker(pass) {\nlogin(pass)\n.then(token => {\nconsole.log(\"Approve:\");\nconsole.log(token);\n})\n.catch(value => {\nconsole.log(\"Reject:\");\nconsole.log(value);\n})\n}\nchecker(\"1234\");\nchecker(\"wrong\");\nSelf-check quiz\n1. The updated code is as follows:\nfunction addOne(val){\nreturn val + 1;\n}\nfunction total(a, b, callback){\nconst sum = a + b;\nreturn callback(sum);\n}\nconsole.log(total(4, 5, addOne));\n2. The console will show the error message Error: Oh no.\n3. The updated code is as follows:\nfunction checker(val) {\nreturn new Promise((resolve, reject) => {\nif (val > 5) {\nresolve(\"Ready\");\n} else {\nreject(new Error(\"Oh no\"));\n}\n});\n}\n[ 488 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nchecker(5)\n.then((data) => {console.log(data); })\n.catch((err) => {console.error(err); })\n.finally(() => { console.log(\"done\");});\n4. The updated code is as follows:\nasync function myFun() {\nreturn \"Hello\";\n}\nmyFun().then(\nfunction(val) { console.log(val); },\nfunction(err) { conole.log(err); }\nChapter 14, HTML5, Canvas, and\nJavaScript\nPractice exercises\nPractice exercise 14.1\n<script>\nconst message = document.getElementById(\"message\");\nconst output = document.querySelector(\".output\");\nconst myInput = document.querySelector(\"input\");\nmyInput.addEventListener(\"change\", uploadAndReadFile);\nfunction uploadAndReadFile(e) {\nconst files = e.target.files;\nfor (let i = 0; i < files.length; i++) {\nconst file = files[i];\nconst img = document.createElement(\"img\");\nimg.classList.add(\"thumb\");\nimg.file = file;\noutput.appendChild(img);\nconst reader = new FileReader();\nreader.onload = (function (myImg) {\nreturn function (e) {\nmyImg.src = e.target.result;\n};\n[ 489 ]\nAppendix\n})(img);\nreader.readAsDataURL(file);\n}\n}\n</script>\nPractice exercise 14.2\n<!doctype html>\n<html>\n<head>\n<title>Canvas HTML5</title>\n<style>\n#canvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<canvas id=\"canvas\" width=\"640\" height=\"640\">Not Supported</canvas>\n<script>\nconst canvas = document.querySelector('#canvas');\nconst ctx = canvas.getContext(\"2d\");\nctx.fillStyle = \"red\";\nctx.fillRect(100, 100, 500, 300); //filled shape\nctx.strokeRect(90, 90, 520, 320); // outline\nctx.clearRect(150, 150, 400, 200); //transparent\n</script>\n</body>\n</html>\nPractice exercise 14.3\n<!doctype html>\n<html>\n<head>\n<title>Canvas HTML5</title>\n<style>\n#canvas {\nborder: 1px solid black;\n}\n[ 490 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\n</style>\n</head>\n<body>\n<canvas id=\"canvas\" width=\"640\" height=\"640\">Not Supported</canvas>\n<script>\nconst canvas = document.querySelector(\"#canvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.beginPath();\nctx.fillStyle = \"red\";\nctx.arc(300, 130, 100, 0, Math.PI * 2);\nctx.fill();\nctx.beginPath();\nctx.fillStyle = \"black\";\nctx.arc(250, 120, 20, 0, Math.PI * 2);\nctx.moveTo(370, 120);\nctx.arc(350, 120, 20, 0, Math.PI * 2);\nctx.moveTo(240, 160);\nctx.arc(300, 160, 60, 0, Math.PI);\nctx.fill();\nctx.moveTo(300, 130);\nctx.lineTo(300, 150);\nctx.stroke();\nctx.beginPath();\nctx.moveTo(300, 230);\nctx.lineTo(300, 270);\nctx.lineTo(400, 270);\nctx.lineTo(200, 270);\nctx.lineTo(300, 270);\nctx.lineTo(300, 350);\nctx.lineTo(400, 500);\nctx.moveTo(300, 350);\nctx.lineTo(200, 500);\nctx.stroke();\nctx.beginPath();\nctx.fillStyle = \"blue\";\nctx.moveTo(200, 50);\nctx.lineTo(400, 50);\nctx.lineTo(300, 20);\nctx.lineTo(200, 50);\nctx.fill();\nctx.stroke();\n[ 491 ]\nAppendix\n</script>\n</body>\n</html>\nPractice exercise 14.4\n<!doctype html>\n<html>\n<head>\n<title>Canvas HTML5</title>\n<style>\n#canvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<canvas id=\"canvas\" width=\"640\" height=\"640\">Not Supported</canvas>\n<script>\nconst canvas = document.querySelector(\"#canvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.beginPath();\nctx.fillStyle = \"red\";\nctx.arc(300, 130, 100, 0, Math.PI * 2);\nctx.fill();\nctx.beginPath();\nctx.fillStyle = \"black\";\nctx.arc(250, 120, 20, 0, Math.PI * 2);\nctx.moveTo(370, 120);\nctx.arc(350, 120, 20, 0, Math.PI * 2);\nctx.moveTo(240, 160);\nctx.arc(300, 160, 60, 0, Math.PI);\nctx.fill();\nctx.moveTo(300, 130);\nctx.lineTo(300, 150);\nctx.stroke();\nctx.beginPath();\nctx.moveTo(300, 230);\nctx.lineTo(300, 270);\nctx.lineTo(400, 270);\nctx.lineTo(200, 270);\nctx.lineTo(300, 270);\n[ 492 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nctx.lineTo(300, 350);\nctx.lineTo(400, 500);\nctx.moveTo(300, 350);\nctx.lineTo(200, 500);\nctx.stroke();\nctx.beginPath();\nctx.fillStyle = \"blue\";\nctx.moveTo(200, 50);\nctx.lineTo(400, 50);\nctx.lineTo(300, 20);\nctx.lineTo(200, 50);\nctx.fill();\nctx.stroke();\n</script>\n</body>\n</html>\nPractice exercise 14.5\n<!doctype html>\n<html>\n<head>\n<title>Canvas HTML5</title>\n<style>\n#canvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<div><label>Image</label>\n<input type=\"file\" id=\"imgLoader\" name=\"imgLoader\">\n</div>\n<div><canvas id=\"canvas\"></canvas></div>\n<script>\nconst canvas = document.querySelector(\"#canvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst imgLoader = document.querySelector(\"#imgLoader\");\nimgLoader.addEventListener(\"change\", handleUpload);\nfunction handleUpload(e) {\nconsole.log(e);\n[ 493 ]\nAppendix\nconst reader = new FileReader();\nreader.onload = function (e) {\nconsole.log(e);\nconst img = new Image();\nimg.onload = function () {\ncanvas.width = img.width / 2;\ncanvas.height = img.height / 2;\nctx.drawImage(img, 0, 0, img.width / 2,\nimg.height / 2);\n}\nimg.src = e.target.result;\n}\nreader.readAsDataURL(e.target.files[0]);\n}\n</script>\n</body>\n</html>\nPractice exercise 14.6\n<!doctype html>\n<html>\n<head>\n<title>Canvas HTML5</title>\n<style>\n#canvas {\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<div><canvas id=\"canvas\"></canvas></div>\n<script>\nconst canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst ballSize = 10;\nlet x = canvas.width / 2;\nlet y = canvas.height / 2;\nlet dirX = 1;\nlet dirY = 1;\nfunction drawBall() {\nctx.beginPath();\n[ 494 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\nctx.arc(x, y, ballSize, 0, Math.PI * 2);\nctx.fillStyle = \"red\";\nctx.fill();\nctx.closePath();\n}\nfunction move() {\nctx.clearRect(0, 0, canvas.width, canvas.height);\ndrawBall();\nif (x > canvas.width - ballSize || x < ballSize) {\ndirX *= -1;\n}\nif (y > canvas.height - ballSize || y < ballSize) {\ndirY *= -1;\n}\nx += dirX;\ny += dirY;\n}\nsetInterval(move, 10);\n</script>\n</body>\n</html>\nPractice exercise 14.7\n<script>\nwindow.onload = init;\nconst canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.style.border = \"1px solid black\";\nconst penColor = document.querySelector(\"#penColor\");\nconst penWidth = document.querySelector(\"#penWidth\");\ndocument.querySelector(\".clear\").addEventListener(\n\"click\", clearImg);\ncanvas.width = 700;\ncanvas.height = 700;\nlet pos = {\nx: 0,\ny: 0,\n};\nfunction init() {\ncanvas.addEventListener(\"mousemove\", draw);\ncanvas.addEventListener(\"mousemove\", setPosition);\n[ 495 ]\nAppendix\ncanvas.addEventListener(\"mouseenter\", setPosition);\n}\nfunction draw(e) {\nif (e.buttons !== 1) return;\nctx.beginPath();\nctx.moveTo(pos.x, pos.y);\nsetPosition(e);\nctx.lineTo(pos.x, pos.y);\nctx.strokeStyle = penColor.value;\nctx.lineWidth = penWidth.value;\nctx.lineCap = \"round\";\nctx.stroke();\n}\nfunction setPosition(e) {\npos.x = e.pageX;\npos.y = e.pageY;\n}\nfunction clearImg() {\nconst temp = confirm(\"Clear confirm?\");\nif (temp) {\nctx.clearRect(0, 0, canvas.offsetWidth,\ncanvas.offsetHeight);\n}\n}\n</script>\nProjects\nCreate a Matrix effect\n<!doctype html>\n<html>\n<head>\n<title>Canvas HTML5</title>\n</head>\n<body>\n<div class=\"output\"></div>\n<script>\nconst canvas = document.createElement(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.setAttribute(\"width\", \"500\");\n[ 496 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\ncanvas.setAttribute(\"height\", \"300\");\ndocument.body.prepend(canvas);\nconst colVal = [];\nfor(let x=0;x<50;x++){\ncolVal.push(0);\n}\nfunction matrix() {\nctx.fillStyle = \"rgba(0,0,0,.05)\";\nctx.fillRect(0, 0, canvas.width, canvas.height);\nctx.fillStyle = \"green\";\ncolVal.map((posY, index) => {\nlet output = Math.random()<0.5?0:1;\nlet posX = (index * 10) + 10;\nctx.fillText(output, posX, posY);\nif (posY > 100 + Math.random() * 300) {\ncolVal[index] = 0;\n} else {\ncolVal[index] = posY + 10;\n}\n});\n}\nsetInterval(matrix, 50);\n</script>\n</body>\n</html>\nCountdown clock\n<script>\nconst endDate = document.querySelector(\"input[name='endDate']\");\nconst clock = document.querySelector(\".clock\");\nlet timeInterval;\nlet timeStop = true;\nconst savedValue = localStorage.getItem(\"countdown\") || false;\nif (savedValue) {\nstartClock(savedValue);\nlet inputValue = new Date(savedValue);\nendDate.valueAsDate = inputValue;\n}\nendDate.addEventListener(\"change\", function (e) {\n[ 497 ]\nAppendix\ne.preventDefault();\nclearInterval(timeInterval);\nconst temp = new Date(endDate.value);\nlocalStorage.setItem(\"countdown\", temp);\nstartClock(temp);\ntimeStop = true;\n});\nfunction startClock(d) {\nfunction updateCounter() {\nlet tl = (timeLeft(d));\nif (tl.total <= 0) {\ntimeStop = false;\n}\nfor (let pro in tl) {\nlet el = clock.querySelector(\".\" + pro);\nif (el) {\nel.innerHTML = tl[pro];\n}\n}\n}\nupdateCounter();\nif (timeStop) {\ntimeInterval = setInterval(updateCounter, 1000);\n} else {\nclearInterval(timeInterval);\n}\n}\nfunction timeLeft(d) {\nlet currentDate = new Date();\nlet t = Date.parse(d) - Date.parse(currentDate);\nlet seconds = Math.floor((t / 1000) % 60);\nlet minutes = Math.floor((t / 1000 / 60) % 60);\nlet hours = Math.floor((t / (1000 * 60 * 60)) % 24);\nlet days = Math.floor(t / (1000 * 60 * 60 * 24));\nreturn {\n\"total\": t,\n\"days\": days,\n\"hours\": hours,\n\"minutes\": minutes,\n\"seconds\": seconds\n};\n[ 498 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\n}\n</script>\nOnline paint app\n<script>\nconst canvas = document.querySelector(\"#canvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst penColor = document.querySelector(\"#penColor\");\nconst penWidth = document.querySelector(\"#penWidth\");\nconst btnSave = document.querySelector(\".save\");\nconst btnClear = document.querySelector(\".clear\");\nconst output = document.querySelector(\".output\");\nconst mLoc = {\ndraw: false,\nx: 0,\ny: 0,\nlastX: 0,\nlastY: 0\n};\ncanvas.style.border = \"1px solid black\";\nbtnSave.addEventListener(\"click\", saveImg);\nbtnClear.addEventListener(\"click\", clearCanvas);\ncanvas.addEventListener(\"mousemove\", (e) => {\nmLoc.lastX = mLoc.x;\nmLoc.lastY = mLoc.y;\n//console.log(e);\nmLoc.x = e.clientX;\nmLoc.y = e.clientY;\ndraw();\n});\ncanvas.addEventListener(\"mousedown\", (e) => {\nmLoc.draw = true;\n});\ncanvas.addEventListener(\"mouseup\", (e) => {\nmLoc.draw = false;\n});\ncanvas.addEventListener(\"mouseout\", (e) => {\nmLoc.draw = false;\n});\n[ 499 ]\nAppendix\nfunction saveImg() {\nconst dataURL = canvas.toDataURL();\nconsole.log(dataURL);\nconst img = document.createElement(\"img\");\noutput.prepend(img);\nimg.setAttribute(\"src\", dataURL);\nconst link = document.createElement(\"a\");\noutput.append(link);\nlet fileName = Math.random().toString(16).substr(-8) +\n\".png\"\nlink.setAttribute(\"download\", fileName);\nlink.href = dataURL;\nlink.click();\noutput.removeChild(link);\n}\nfunction clearCanvas() {\nlet temp = confirm(\"clear canvas?\");\nif (temp) {\nctx.clearRect(0, 0, canvas.width, canvas.height);\n}\n}\nfunction draw() {\nif (mLoc.draw) {\nctx.beginPath();\nctx.moveTo(mLoc.lastX, mLoc.lastY);\nctx.lineTo(mLoc.x, mLoc.y);\nctx.strokeStyle = penColor.value;\nctx.lineWidth = penWidth.value;\nctx.stroke();\nctx.closePath();\n}\n}\n</script>\nSelf-check quiz\n1. const canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\n2. Draws a red circle.\n[ 500 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\n3. moveTo(), lineTo(), stroke()\nctx.moveTo(100, 0);\nctx.lineTo(100, 100);\nctx.stroke();\nChapter 15, Next Steps\nPractice exercises\nPractice exercise 15.1\n[\n{\n\"name\": \"Learn JavaScript\",\n\"status\" : true\n},\n{\n\"name\": \"Try JSON\",\n\"status\" : false\n}\n]\nconst url = \"list.json\";\nfetch(url).then(rep => rep.json())\n.then((data) => {\ndata.forEach((el) => {\nconsole.log(`${el.name} = ${el.status}`);\n});\n});\nProjects\nWorking with JSON\n<!DOCTYPE html>\n<html>\n<head><title>Working with JSON Project</title></head>\n<body>\n[ 501 ]\nAppendix\n<script src=\"myscript.js\"></script>\n</body>\n</html>\n// myscript.js\nlet url = \"people.json\";\nfetch(url)\n.then(response => response.json())\n.then(data => {\nconsole.log(data);\ndata.forEach(person => {\nconsole.log(`${person.first} ${person.last} - ${person.topic}`);\n});\n});\n// people.json\n[\n{\n\"first\": \"Laurence\",\n\"last\": \"Svekis\",\n\"topic\": \"JavaScript\"\n},\n{\n\"first\": \"John\",\n\"last\": \"Smith\",\n\"topic\": \"HTML\"\n},\n{\n\"first\": \"Jane\",\n\"last\": \"Doe\",\n\"topic\": \"CSS\"\n}\n]\nList-making project\n<!DOCTYPE html>\n<html>\n<head>\n[ 502 ]\nPractice Exercise, Project, and Self-Check Quiz Answers\n<title>JavaScript List Project</title>\n</head>\n<body>\n<div class=\"output\"></div>\n<input type=\"text\"><button>add</button>\n<script>\nconst output = document.querySelector(\".output\");\nconst myValue = document.querySelector(\"input\");\nconst btn1 = document.querySelector(\"button\");\nconst url = \"list.json\";\nbtn1.addEventListener(\"click\", addToList);\nlet localData = localStorage.getItem(\"myList\");\nlet myList = [];\nwindow.addEventListener(\"DOMContentLoaded\", () => {\noutput.textContent = \"Loading......\";\nif (localData) {\nmyList = JSON.parse(localStorage.getItem(\"myList\"));\noutput.innerHTML = \"\";\nmyList.forEach((el, index) => {\nmaker(el);\n});\n} else {\nreloader();\n}\n});\nfunction addToList() {\nif (myValue.value.length > 3) {\nconst myObj = {\n\"name\": myValue.value\n}\nmyList.push(myObj);\nmaker(myObj);\nsavetoStorage();\n}\nmyValue.value = \"\";\n}\nfunction savetoStorage() {\nconsole.log(myList);\n[ 503 ]\nAppendix\nlocalStorage.setItem(\"myList\", JSON.stringify(myList));\n}\nfunction reloader() {\nfetch(url).then(rep => rep.json())\n.then((data) => {\nmyList = data;\nmyList.forEach((el, index) => {\nmaker(el);\n});\nsavetoStorage();\n});\n}\nfunction maker(el) {\nconst div = document.createElement(\"div\");\ndiv.innerHTML = `${el.name}`;\noutput.append(div);\n}\n</script>\n</body>\n</html>\nSelf-check quiz\n1. Pre-programmed JavaScript modules that you can use to speed up your\ndevelopment process.\n2. Open the console and type $ or jQuery, and if you get a jQuery object as a\nresponse, the page has reference to the $ or jQuery.\n3. UnderscoreJS.\n4. Type node and the filename into the terminal within the file directory.\n[ 504 ]\npackt.com\nSubscribe to our online digital library for full access to over 7,000 books and videos,\nas well as industry leading tools to help you plan your personal development and\nadvance your career. For more information, please visit our website.\nWhy subscribe?\n\u2022 Spend less time learning and more time coding with practical eBooks and\nVideos from over 4,000 industry professionals\n\u2022 Improve your learning with Skill Plans built especially for you\n\u2022 Get a free eBook or video every month\n\u2022 Fully searchable for easy access to vital information\n\u2022 Copy and paste, print, and bookmark content\nAt www.packt.com, you can also read a collection of free technical articles, sign up for\na range of free newsletters, and receive exclusive discounts and offers on Packt books\nand eBooks.\n[ 505 ]\nOther Books\nYou May Enjoy\nIf you enjoyed this book, you may be interested in these other books by Packt:\nResponsive Web Design with HTML5 and CSS - Third Edition\nBen Frain\nISBN: 9781839211560\n\u2022 Integrate CSS media queries into your designs; apply different styles to\ndifferent devices\n\u2022 Load different sets of images depending upon screen size or resolution\n\u2022 Leverage the speed, semantics, and clean markup of accessible HTML\npatterns\n\u2022 Implement SVGs into your designs to provide resolution-independent\nimages\n[ 507 ]\nOther Books You May Enjoy\n\u2022 Apply the latest features of CSS like custom properties, variable fonts, and\nCSS Grid\n\u2022 Add validation and interface elements like date and color pickers to HTML\nforms\n\u2022 Understand the multitude of ways to enhance interface elements with filters,\nshadows, animations, and more\n[ 508 ]\nOther Books You May Enjoy\nLearn Python Programming - Third Edition\nFabrizio Romano\nHeinrich Kruger\nISBN: 9781801815093\n\u2022 Get Python up and running on Windows, Mac, and Linux\n\u2022 Write elegant, reusable, and efficient code in any situation\n\u2022 Avoid common pitfalls like duplication, complicated design, and over-\nengineering\n\u2022 Understand when to use the functional or object-oriented approach to\nprogramming\n\u2022 Build a simple API with FastAPI and program GUI applications with Tkinter\n\u2022 Get an initial overview of more complex topics such as data persistence and\ncryptography\n\u2022 Fetch, clean, and manipulate data, making efficient use of Python's built-in\ndata structures\n[ 509 ]\nOther Books You May Enjoy\nDancing with Python\nRobert S. Sutor\nISBN: 9781801077859\n\u2022 Explore different quantum gates and build quantum circuits with Qiskit and\nPython\n\u2022 Write succinct code the Pythonic way using magic methods, iterators, and\ngenerators\n\u2022 Analyze data, build basic machine learning models, and plot the results\n\u2022 Search for information using the quantum Grover Search Algorithm\n\u2022 Optimize and test your code to run efficiently\n[ 510 ]\nOther Books You May Enjoy\nPackt is searching for authors like you\nIf you're interested in becoming an author for Packt, please visit authors.packtpub.\ncom and apply today. We have worked with thousands of developers and tech\nprofessionals, just like you, to help them share their insight with the global tech\ncommunity. You can make a general application, apply for a specific hot topic that\nwe are recruiting an author for, or submit your own idea.\nShare Your Thoughts\nNow you've finished JavaScript from Beginner to Professional, we'd love to hear your\nthoughts! If you purchased the book from Amazon, please click here to go\nstraight to the Amazon review page for this book and share your feedback or leave\na review on the site that you purchased it from.\nYour review is important to us and the tech community and will help us make sure\nwe're delivering excellent quality content.\n[ 511 ]\nIndex\nA manipulating 68\nmethods 53\naccordion component occurrence, finding in 179, 180\nbuilding 256, 257 part, replacing with another\naction part of array 178, 179\nperforming, for every item 176, 177 reversing 58\naddition operator 32 sorting 58\nanalytics string, converting to 182\nbuilding 294, 295 values, mapping 179\nand operator 42 working with 64\nAngular 414 arrow functions 124, 125\nreference link 415 returning with 129\nanonymous functions 142, 143 assignment operators 38, 39\nAPI (Application Programming Interface) 416 Asynchronous JavaScript and XML (AJAX) 417\nargument 120, 121 reference link 418\narguments object 314 async keyword 353, 354\narithmetic operators 32 attributes\naddition 32 exercise 249, 250\ndivision 34 manipulating 247, 248\nexponentiation 34 await keyword 353, 354\nmodulus 35, 36\nmultiplication 33 B\nsubtraction 33\narray methods 176 backend\narrays 48, 89, 98-100 learning 415\nbuilt-in length property 51, 52 BigInt 24\ncreating 48, 49 Boolean 25\nconverting, to string 182, 183 box clicker\nelements, accessing 50 speed test game 297, 298\nelements, adding 53-55 break keyword 107-109\nelements, deleting 55, 56 in labeled blocks 113\nelements, finding 56, 57 using, in nested loops 112, 113\nelements, overwriting 50, 51 breakpoints 318-320\nelements, replacing 53-55 example 320-324\nfiltering 177, 178 Browser Object Model (BOM) 205, 211-213\nin objects 65 window history object 214\n[ 513 ]\nwindow location object 216, 217 D\nwindow navigator object 215\nbuilt-in JavaScript methods 168 data-driven documents (D3) 408, 409\ndata position\nC obtaining, with GeoLocation 369, 370\ndata types\ncallback queue 355-359 analyzing 27\ncallbacks 346-348 converting 29-31\ncall stack 355-359 modifying 27\ncanvas date methods 196\ndrawing, with mouse 386-389 dates\ncases converting, to string 200\ncombining 81, 82 creating 197, 198\nclasses 149-152 debugging 317\nconstructors 152, 153 decimals\nmethods 154 turning, into integers 194, 195\nproperties 156, 157 decodeUri() 170\ncode comments 13 decodeUriComponent() 171, 172\ncode completion 3 decrement operator 36\ncommand prompt 14 default case 79, 80\ncompany product catalog 68 default parameters 122, 123\ncomparison operators 40 digital accessibility\nequal 40 in HTML 394, 395\ngreater than 41 division operator 34\nnot equal 41 Document Object Model (DOM) 5, 205, 217,\nsmaller than 41 218\ncompiling 4 additional properties 219\nconcat() method 55 exercise 228, 229\nconcurrency 346 overview 226-228\ncondition page elements, selecting 220, 221\nchecking, for elements 178 DOM elements\nconditional ternary operators 76 accessing 230, 231\nconst keyword 19 accessing, by class name 234\nconstructors 152, 153 accessing, by ID 231, 232\nconst scope 133, 134 accessing, by tag name 232, 233\ncontinue keyword 107-110 accessing, with CSS selector 234, 235\nin labeled blocks 113 innerHTML, modifying 230\nusing, in nested loops 112, 113 innerText, modifying 230\ncookies selecting, as objects 229\nusing 327-329 DOM Event Flow 275-278\ncopyWithin() method 178 do while loop 91, 92\ncountdown clock 397, 398 dynamic canvas 373\ncountdown timer 202, 203 animations, adding to 383-385\nCSS selector circles, adding to 374-376\nquerySelectorAll(), using 236 images, adding to 380-383\nquerySelector(), using 235 images, uploading to 380-383\nused, for accessing DOM elements 234, 235 lines, adding to 374-376\n[ 514 ]\nstick man, drawing 376, 377 event target property 272-274\ntext, adding to 377-379 exponent 196\ndynamic images exponentiation operator 34\nsaving 390-392 Express module\nreference link 420\nE Express Node.js framework\nusing 419\nECMAScript 6 (ES6) 5\nelement click handler 237, 238 F\nelements\nanimating 292, 293 Fetch API 417\nclass, adding to 243, 244 Fibonacci sequence 90\nclass, modifying 243 floats\nclass, removing 244, 245 making, with parseFloat() 174, 175\nclass, toggling 246 foreach 87\ncreating 253, 254 for in loop 103\ndragging 285-287 used, for looping over object 103\ndropping 285-287 for loops 92-94\nexercise 255 formatting code 11\nmouse position, tracking 296 indentations and whitespace 11, 12\nelement style semicolon 12\nmanipulating 240-243 form submission 289-291\nelse-if statements 74, 75 form validator 339, 340\nemail extractor 338 for of loop 101, 102\nemployee tracking app 163 frameworks 404, 412\nencapsulation 158 Angular 414\nencodeUri() 170 Vue.js 412, 413\nencodeUriComponent() 171, 172 friend checker game 83\nequal operator 40 function callbacks 143, 144\nerror handling 325, 326 functions 314\nescape() basic functions 118\nencoding with 172 invoking 118\nescape characters 22 local variables 130, 131\neval() naming 119\nused, for executing JavaScript 175, 176 return value 128\nevent bubbling 278 writing 118, 119\nevent capturing 278 function values\nevent delegation 278 returning 127\nevent listeners\nexercise 253 G\non element 251, 252\nevent loop 355 GeoLocation\nevents used, for obtaining data position 369, 370\nget keyword 158\nspecifying 266\ngetters 157-159\nspecifying, with event listeners 267, 268\nglobal JavaScript methods 169\nspecifying, with HTML 266\nglobal variables 134-136\nspecifying, with JavaScript 267\ngreater than operator 41\n[ 515 ]\nH JavaScript code\ncode comments 13\nHangman game 259-261 command prompt 14\nhighest number formatting code 11\nfinding 193 random number 14\nHTML5 writing 11\nwith JavaScript 364 JavaScript coding environment\nHTML5 canvas 370-372 Integrated Development Environment (IDE) 3\nexercise 373 online editors 4\nHTML crash course 206 setting up 3\nHyper-Text Markup Language (HTML) 206 tools 4\nattributes 210 web browser 4\nelements 206-210 JavaScript hoisting 315, 316\nelements, manipulating with JavaScript 222 JavaScript Object Notation (JSON) 333, 334\nused, for specifying events 266 parsing 336\nHypertext Transfer Protocol (HTTP) 416 jQuery 405-407\nURL 408\nI JSON\nworking with 421\nif-else statements 72, 73\nif statements 72, 73 K\nimmediately invoked function expression\n(IIFE) 136, 137 key event handler 282-284\nincludes() method 359\nincrement operator 36 L\nindex\nworking with 183, 184 let keyword 19\ninheritance 159-161 block scope 19\nintegers let variables\ndecimals, turning into 194, 195 versus var variables 132, 133\nmaking, with parseInt() 172, 173 libraries 404, 405\nIntegrated Development Environment (IDE) 3 data-driven documents (D3) 408, 409\ninteractive content 266 jQuery 405-407\ninteractive voting system 258, 259 React 410, 411\ninterpreter 4 Underscore library 409, 410\nlist\nJ creating, to save local storage 421, 422\nlocal file reader 365\nJavaScript files, displaying 368, 369\nadding, to web page 8 files, reading 367\nexecuting, with eval() 175, 176 files, uploading 365-369\nexternal file, linking to web page 9-11 local storage 330-332\nHTML elements, manipulating with 222 local variables\nin HTML 8, 9 in functions 130, 131\nlearning, need for 2, 3 logarithm 196\nused, for specifying events 267 logical operators 42\nusing, in HTML5 364 and 42\n[ 516 ]\nnot 43 number game\nor 43 evaluating 82\nloops 87 number methods 190\narrays 98-100 isFinite() 190\ndo while loop 91, 92 isInteger() 191\nfor a loop 101, 102 isNaN 190\nfor in loop 103 number of decimals\nfor loop 92-94 specifying 192\nfor of loop 103\nnested loop 95, 96 O\nused, for creating math\nobject-oriented programming (OOP) 150, 409\nmultiplication table 114\nobjects 150\nwhile loop 88-90\nlowest number in arrays 66\nfinding 193 in objects 64\nlooping over, by converting to array 104-106\nM looping over, with for in loop 103\nupdating 62, 63\nMath methods 192 working with 64\nmath multiplication table objects in arrays\ncreating, with loops 114 in objects 66, 67\nmath quiz objects, JavaScript 61, 62\ncreating 341, 342 occurrence\nMatrix effect finding, in array 179, 180\ncreating 395-397 onblur 280, 281\nmedia onchange 280, 281\nadding, on page 392, 393 online editor\nmenu items price calculator 163 for JavaScript coding environment 4\nmethods 154, 155 online paint app 399-401\nmodulus operator 35, 36 onload event handler 268, 269\nmouse event handlers 270-272 operand 36\nmultidimensional arrays 59, 60 operators 32\nmultiplication operator 33 arithmetic operators 32\nassignment operators 38, 39\nN combining 38\ncomparison operators 40\nnested functions 140, 141\nlogical operators 42\nnested loops 95, 96\nor operator 43\nusing, in break keyword 111-113 OWASP (Open Web Application Security\nusing, in continue keyword 111-113 Project) 176\nNode.js 418, 419\nreference link 418 P\nNode Package Manager (NPM) 411\nnot equal operator 40 page elements\nnot operator 43 selecting 220, 221\nnull 26 parameter 121\nnumber 23 parseFloat()\nused, for making floats 174, 175\n[ 517 ]\nparseInt() S\nused, for making integers 172, 173\nparsing dates 200 set keyword 158\nparsing numbers 172 setters 157-159\npassword checker 359 setTimeout 145\npositions single-page applications (SPAs) 412\nworking with 183, 184 smaller than operator 41\npostfix unary operator 36, 37 splice() method 54\nprecision spread operator 125, 126\nspecifying 192 star rating system\nprefix unary operator 36, 37 creating 295, 296\nprimitive data types 20 strict mode\nBigInt 24 using 316, 317\nBoolean 25 string methods 181\nnull 26 string parts\nnumber 23 replacing 185, 186\nstrings 21 strings 21\nsymbol 25 array, converting to 182, 183\nundefined 26 combining 181\nprintStuff() 177 converting, to array 182\nPromises 349-352 date, converting to 200\nproperties 156 end of 187, 188\ngetters 157-159 lowercase 186, 187\nsetters 157-159 replacing 310\nprototype 161, 162 searching 310\nstart of 187, 188\nR uppercase 186, 187\nsubstrings\nrandom number creating 185\ngenerating, in JavaScript 14, 15 subtraction operator 33\nReact 410, 411 switch statement 77, 78\nReact documentation default case 79, 80\nreference link 411 symbol 25\nrecursive functions 138, 139\ncreating 145 T\nregex 184, 302\nregular expressions 302, 303 this keyword 15, 238, 239\ncharacter options 304-307 exercise 239\nemail validation 312 type of 28\ngroups 307-309\nU\nmultiple options, specifying\nfor words 303, 304\nunary operators\nrest parameter 127\ndecrement 36\nrock paper scissors game 83\nincrement 36\n[ 518 ]\nundefined data type 26\nUnderscore.js\nreference link 410\nUnderscore library 409, 410\nunescape()\nencoding with 172\nuniform resource identifier (URI)s\ndecoding 169, 170\nencoding 169, 170\nuniform resource locator (URL) 169\nunsuitable parameters 122, 123\nV\nvalues\nmapping, of array 179\nvariables 18\ndeclaring 18\nnaming 20\nvar keyword 19\nglobal scope 19\nvar variables\nversus let variables 132, 133\nVue.js 412, 413\nreference link 414\nW\nweb browser\nfor JavaScript coding environment 4\nrecognizing, JavaScript 4, 5\nweb browser console\nusing 5-7\nworking with 7\nweb page\nJavaScript, adding to 8\nwhile loop 88-90\nwindow browser object 211\nwindow history object 214\nwindow location object 216, 217\nwindow navigator object 215\nword scrambler 201, 202\n[ 519 ]"
}